[{"path":".github/workflows/delete-deploy.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"name: Delete deployments for closed pull requests"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":""},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"on:"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"  pull_request_target:"},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"    branches-ignore:"},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"      - gh-pages"},{"lineNumber":7,"author":{"gitId":"gok99"},"content":"    types: [closed]"},{"lineNumber":8,"author":{"gitId":"gok99"},"content":""},{"lineNumber":9,"author":{"gitId":"gok99"},"content":"jobs:"},{"lineNumber":10,"author":{"gitId":"gok99"},"content":"  delete:"},{"lineNumber":11,"author":{"gitId":"gok99"},"content":"    name: Delete pull request deployments"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":"    runs-on: ubuntu-latest"},{"lineNumber":13,"author":{"gitId":"gok99"},"content":"    env:"},{"lineNumber":14,"author":{"gitId":"gok99"},"content":"      ACTIONS_PULL_REQUEST_HEAD: ${{ github.event.pull_request.head.sha }}"},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"      ACTIONS_PULL_REQUEST_NUMBER: ${{ github.event.number }}"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":"      GITHUB_TOKEN: ${{ github.token }}"},{"lineNumber":17,"author":{"gitId":"gok99"},"content":""},{"lineNumber":18,"author":{"gitId":"gok99"},"content":"    steps:"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":"    - name: Checkout repository"},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"      uses: actions/checkout@v2"},{"lineNumber":21,"author":{"gitId":"gok99"},"content":""},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"    - name: Delete deployments"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"      run: ./config/gh-actions/delete-deploy.sh"}],"authorContributionMap":{"gok99":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027idea\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    id \u0027com.liferay.node\u0027 version \u00274.4.0\u0027"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    id \u0027com.github.psxpaul.execfork\u0027 version \u00270.1.8\u0027"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    id \u0027com.palantir.git-version\u0027 version \u00270.12.3\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"OperatingSystem os \u003d DefaultNativePlatform.currentOperatingSystem;"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027reposense.RepoSense\u0027"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"node.nodeVersion \u003d \u002710.16.0\u0027"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_1_8"},{"lineNumber":22,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_1_8"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"configurations {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    systemtestImplementation.extendsFrom testImplementation"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    systemtestRuntime.extendsFrom testRuntime"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    implementation  group: \u0027com.google.code.gson\u0027 ,name: \u0027gson\u0027, version:\u00272.8.5\u0027"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    implementation  group: \u0027net.freeutils\u0027, name: \u0027jlhttp\u0027, version: \u00272.4\u0027"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    implementation  group: \u0027net.sourceforge.argparse4j\u0027, name: \u0027argparse4j\u0027, version: \u00270.8.1\u0027"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.apache.ant\u0027, name: \u0027ant\u0027, version: \u00271.10.3\u0027"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.apache.commons\u0027, name: \u0027commons-csv\u0027, version: \u00271.6\u0027"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.apache.commons\u0027, name: \u0027commons-text\u0027, version: \u00271.9\u0027"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"sourceSets {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    systemtest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        compileClasspath +\u003d main.output + test.output"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        runtimeClasspath +\u003d main.output + test.output"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        java.srcDir file(\u0027src/systemtest/java\u0027)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        resources.srcDir file(\u0027src/systemtest/resources\u0027)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"wrapper {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    gradleVersion \u003d \u00275.2.1\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //the second arguments indicates the default value associated with the property."},{"lineNumber":60,"author":{"gitId":"-"},"content":"    args System.getProperty(\u0027args\u0027, \u0027\u0027).split()"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    systemProperty \"version\", getRepoSenseVersion()"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.1\u0027"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    configDir \u003d file(\"$rootProject.projectDir/config/checkstyle\")"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"idea {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    module {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        sourceSets.systemtest.allSource.srcDirs.each { srcDir -\u003e module.testSourceDirs +\u003d srcDir }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"jacoco {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    toolVersion \u003d \"0.8.3\""},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"jacocoTestReport {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        xml.enabled true"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        csv.enabled false"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        html.destination file(\"${buildDir}/jacocoHtml\")"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    environment(\"REPOSENSE_ENVIRONMENT\", \"TEST\")"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d true"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    doFirst {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    doLast {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027RepoSense.jar\u0027"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    destinationDir \u003d file(\"${buildDir}/jar/\")"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    manifest {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        attributes \u0027Implementation-Version\u0027: getRepoSenseVersion()"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"task installFrontend(type: com.liferay.gradle.plugins.node.tasks.ExecuteNpmTask) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    args \u003d [\u0027install\u0027]"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"task buildFrontend(dependsOn: [\u0027installFrontend\u0027], type: com.liferay.gradle.plugins.node.tasks.ExecuteNpmTask) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    args \u003d [\u0027run\u0027, \u0027devbuild\u0027]"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"task lintFrontend(dependsOn: [\u0027installFrontend\u0027], type: com.liferay.gradle.plugins.node.tasks.ExecuteNpmTask) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    args \u003d [\u0027run\u0027, \u0027lint\u0027]"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"task zipReport(dependsOn: \u0027buildFrontend\u0027, type: Zip) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    from \u0027frontend/build/\u0027"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    baseName \u003d \u0027templateZip\u0027"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    destinationDir \u003d file(\u0027src/main/resources\u0027)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"tasks.shadowJar.dependsOn(\u0027zipReport\u0027);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"tasks.compileJava.dependsOn(\u0027zipReport\u0027);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"tasks.run.dependsOn(\u0027compileJava\u0027);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"task systemtest(dependsOn: \u0027zipReport\u0027, type: Test) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    testClassesDirs \u003d sourceSets.systemtest.output.classesDirs"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    classpath \u003d sourceSets.systemtest.runtimeClasspath"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    environment(\"REPOSENSE_ENVIRONMENT\", \"TEST\")"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d true"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    doFirst {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    doLast {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"task startServerInBackground(dependsOn: \u0027classes\u0027, type: com.github.psxpaul.task.JavaExecFork) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    main \u003d mainClassName"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    classpath \u003d sourceSets.main.runtimeClasspath"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    args \u003d [\u0027--repo\u0027, \u0027https://github.com/reposense/RepoSense.git\u0027, \u0027https://github.com/reposense/testrepo-Empty.git\u0027, \u0027--since\u0027, \u0027d1\u0027, \u0027--view\u0027]"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    String versionJvmArgs \u003d \u0027-Dversion\u003d\u0027 + getRepoSenseVersion()"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    jvmArgs \u003d [ versionJvmArgs ]"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    waitForPort \u003d 9000"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"task installCypress(type: com.liferay.gradle.plugins.node.tasks.ExecuteNpmTask) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/cypress/\u0027"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    args \u003d [\u0027install\u0027]"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"task cypress(dependsOn: [\u0027zipReport\u0027, \u0027installCypress\u0027, \u0027startServerInBackground\u0027], type: com.liferay.gradle.plugins.node.tasks.ExecuteNpmTask) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    tasks.startServerInBackground.mustRunAfter(\u0027installCypress\u0027)"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    workingDir \u003d file(\u0027frontend/cypress/\u0027)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    args \u003d [\"run-script\", \"debug\"]"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"task frontendTest(dependsOn: [\u0027zipReport\u0027, \u0027installCypress\u0027, \u0027startServerInBackground\u0027], type: com.liferay.gradle.plugins.node.tasks.ExecuteNpmTask) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    tasks.startServerInBackground.mustRunAfter(\u0027installCypress\u0027)"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    workingDir \u003d file(\u0027frontend/cypress/\u0027)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    args \u003d [\"run-script\", \"tests\"]"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    // Run tests in CI without slow motion"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    if (project.hasProperty(\u0027ci\u0027)) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        args \u003d [\"run-script\", \"ci\"]"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"tasks.withType(Copy) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    includeEmptyDirs \u003d true"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"String getRepoSenseVersion() {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    String repoSenseVersion \u003d project.property(\"version\")"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    if (repoSenseVersion.equals(\"unspecified\")) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        repoSenseVersion \u003d versionDetails().commitDistance \u003d\u003d 0 ? versionDetails().lastTag : versionDetails().gitHash"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    return repoSenseVersion"},{"lineNumber":218,"author":{"gitId":"-"},"content":"}"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"task syncFrontendPublic(type: Sync) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    from \u0027reposense-report\u0027"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    into \u0027frontend/public/\u0027"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    include \u0027**/*.json\u0027"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    includeEmptyDirs \u003d false"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    preserve {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        include \u0027index.html\u0027"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        include \u0027favicon.ico\u0027"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"task macHotReloadFrontend(type: Exec) {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    dependsOn(installFrontend)"},{"lineNumber":233,"author":{"gitId":"gok99"},"content":"    onlyIf {os.isMacOsX()}"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":235,"author":{"gitId":"gok99"},"content":"    commandLine \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"task windowsHotReloadFrontend(type: Exec) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    dependsOn(installFrontend)"},{"lineNumber":240,"author":{"gitId":"gok99"},"content":"    onlyIf {os.isWindows()}"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    commandLine \u0027cmd\u0027,\u0027/c\u0027, \u0027START\u0027, \u0027\"hotreload RepoSense frontend\"\u0027, \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":243,"author":{"gitId":"-"},"content":"}"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"gok99"},"content":"task linuxHotReloadFrontend(type: Exec) {"},{"lineNumber":246,"author":{"gitId":"gok99"},"content":"    dependsOn(installFrontend)"},{"lineNumber":247,"author":{"gitId":"gok99"},"content":"    onlyIf {os.isLinux()}"},{"lineNumber":248,"author":{"gitId":"gok99"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":249,"author":{"gitId":"gok99"},"content":"    commandLine \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":250,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":251,"author":{"gitId":"gok99"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"task hotReloadFrontend() {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    dependsOn syncFrontendPublic"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    finalizedBy windowsHotReloadFrontend"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    finalizedBy macHotReloadFrontend"},{"lineNumber":256,"author":{"gitId":"gok99"},"content":"    finalizedBy linuxHotReloadFrontend"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":"// End of hot reload Tasks"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"void deleteReposAddressDirectory() {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    final String REPOS_ADDRESS \u003d \"repos\""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    def reposDirectory \u003d new File(REPOS_ADDRESS)"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    reposDirectory.deleteDir()"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"jacocoTestReport.executionData(systemtest)"},{"lineNumber":267,"author":{"gitId":"-"},"content":"jacocoTestReport.executionData(frontendTest)"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027build\u0027, \u0027systemtest\u0027, \u0027frontendTest\u0027, \u0027coverage\u0027"}],"authorContributionMap":{"gok99":14,"-":255}},{"path":"config/gh-actions/delete-deploy.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"#!/bin/bash"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":"# This script automatically deletes RepoSense and documentation deployments on closed PRs"},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"# This is intended to be run for the pull_request_target workflow"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":""},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"# Set to false if unset, ref: http://stackoverflow.com/a/39296583/1320290"},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"CI\u003d${CI:-false}"},{"lineNumber":7,"author":{"gitId":"gok99"},"content":""},{"lineNumber":8,"author":{"gitId":"gok99"},"content":"if [ \"$CI\" \u003d\u003d \"false\" ]"},{"lineNumber":9,"author":{"gitId":"gok99"},"content":"then"},{"lineNumber":10,"author":{"gitId":"gok99"},"content":"  echo \"ERROR: This script is intended to be run on GitHub Actions only!\""},{"lineNumber":11,"author":{"gitId":"gok99"},"content":"  exit 1"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":"fi"},{"lineNumber":13,"author":{"gitId":"gok99"},"content":""},{"lineNumber":14,"author":{"gitId":"gok99"},"content":"if [ \"$GITHUB_EVENT_NAME\" !\u003d \"pull_request_target\" ]"},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"then"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":"  echo \"ERROR: This script is intended to be run for pull_request workflows only!\""},{"lineNumber":17,"author":{"gitId":"gok99"},"content":"  exit 1"},{"lineNumber":18,"author":{"gitId":"gok99"},"content":"fi"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":""},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"REPO_SLUG_ARRAY\u003d(${GITHUB_REPOSITORY//\\// })"},{"lineNumber":21,"author":{"gitId":"gok99"},"content":"REPO_OWNER\u003d${REPO_SLUG_ARRAY[0]}"},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"REPO_NAME\u003d${REPO_SLUG_ARRAY[1]}"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"ACTIONS_DASHBOARD_ENV\u003d\"dashboard-${ACTIONS_PULL_REQUEST_NUMBER}\""},{"lineNumber":24,"author":{"gitId":"gok99"},"content":"ACTIONS_DOCS_ENV\u003d\"docs-${ACTIONS_PULL_REQUEST_NUMBER}\""},{"lineNumber":25,"author":{"gitId":"gok99"},"content":"DASHBOARD_DEPLOY_DOMAIN\u003dhttps://${ACTIONS_DASHBOARD_ENV}-pr-${REPO_NAME,,}-${REPO_OWNER,,}.surge.sh"},{"lineNumber":26,"author":{"gitId":"gok99"},"content":"DOCS_DEPLOY_DOMAIN\u003dhttps://${ACTIONS_DOCS_ENV}-pr-${REPO_NAME,,}-${REPO_OWNER,,}.surge.sh"},{"lineNumber":27,"author":{"gitId":"gok99"},"content":""},{"lineNumber":28,"author":{"gitId":"gok99"},"content":"# Function to get deployment ID for environment name from Github response"},{"lineNumber":29,"author":{"gitId":"gok99"},"content":"# $1: Response from Github"},{"lineNumber":30,"author":{"gitId":"gok99"},"content":"# $2: Deployment environment name"},{"lineNumber":31,"author":{"gitId":"gok99"},"content":"get_ids_from_response() {"},{"lineNumber":32,"author":{"gitId":"gok99"},"content":"  echo \"$1\" | python3 -c \"import sys, json; \\"},{"lineNumber":33,"author":{"gitId":"gok99"},"content":"    print(\u0027 \u0027.join( \\"},{"lineNumber":34,"author":{"gitId":"gok99"},"content":"      map(lambda j: str(j[\u0027id\u0027]), \\"},{"lineNumber":35,"author":{"gitId":"gok99"},"content":"          filter(lambda j: j[\u0027environment\u0027]\u003d\u003d\u0027${2}\u0027, \\"},{"lineNumber":36,"author":{"gitId":"gok99"},"content":"                 json.load(sys.stdin) \\"},{"lineNumber":37,"author":{"gitId":"gok99"},"content":"                 ) \\"},{"lineNumber":38,"author":{"gitId":"gok99"},"content":"          )))\""},{"lineNumber":39,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":40,"author":{"gitId":"gok99"},"content":""},{"lineNumber":41,"author":{"gitId":"gok99"},"content":"# Function to delete GitHub deployment via a cURL command"},{"lineNumber":42,"author":{"gitId":"gok99"},"content":"# NOTE: deployment must be set inactive before it can be deleted"},{"lineNumber":43,"author":{"gitId":"gok99"},"content":"# $1: The deployment ID"},{"lineNumber":44,"author":{"gitId":"gok99"},"content":"delete_deployment() {"},{"lineNumber":45,"author":{"gitId":"gok99"},"content":"  echo \"Deleting Deployment: ${1}\""},{"lineNumber":46,"author":{"gitId":"gok99"},"content":"  curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/deployments/$1\" \\"},{"lineNumber":47,"author":{"gitId":"gok99"},"content":"  -X DELETE \\"},{"lineNumber":48,"author":{"gitId":"gok99"},"content":"  -H \"Accept: application/vnd.github.v3+json\" \\"},{"lineNumber":49,"author":{"gitId":"gok99"},"content":"  -H \"Authorization: token ${GITHUB_TOKEN}\""},{"lineNumber":50,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":51,"author":{"gitId":"gok99"},"content":""},{"lineNumber":52,"author":{"gitId":"gok99"},"content":"# Function to update GitHub deployment status to inactive via a cURL command"},{"lineNumber":53,"author":{"gitId":"gok99"},"content":"# $1: The deployment ID to update the status for"},{"lineNumber":54,"author":{"gitId":"gok99"},"content":"mark_deployment_inactive() {"},{"lineNumber":55,"author":{"gitId":"gok99"},"content":"  echo \"Marking Deployment Inactive: ${1}\""},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"  curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/deployments/$1/statuses\" \\"},{"lineNumber":57,"author":{"gitId":"gok99"},"content":"  -X POST \\"},{"lineNumber":58,"author":{"gitId":"gok99"},"content":"  -H \"Content-Type: application/json\" \\"},{"lineNumber":59,"author":{"gitId":"gok99"},"content":"  -H \"Accept: application/vnd.github.v3+json\" \\"},{"lineNumber":60,"author":{"gitId":"gok99"},"content":"  -H \"Authorization: token ${GITHUB_TOKEN}\" \\"},{"lineNumber":61,"author":{"gitId":"gok99"},"content":"  -d \"{\\\"state\\\": \\\"inactive\\\"}\""},{"lineNumber":62,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":63,"author":{"gitId":"gok99"},"content":""},{"lineNumber":64,"author":{"gitId":"gok99"},"content":"# Function to get deployment data about repo via a cURL command"},{"lineNumber":65,"author":{"gitId":"gok99"},"content":"get_deployment_data() {"},{"lineNumber":66,"author":{"gitId":"gok99"},"content":"  curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/deployments\" \\"},{"lineNumber":67,"author":{"gitId":"gok99"},"content":"  -X GET \\"},{"lineNumber":68,"author":{"gitId":"gok99"},"content":"  -H \"Accept: application/vnd.github.v3+json\" \\"},{"lineNumber":69,"author":{"gitId":"gok99"},"content":"  -H \"Authorization: token ${GITHUB_TOKEN}\""},{"lineNumber":70,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":71,"author":{"gitId":"gok99"},"content":""},{"lineNumber":72,"author":{"gitId":"gok99"},"content":"# Function to post surge deployment links as a comment on PR via a cURL command"},{"lineNumber":73,"author":{"gitId":"gok99"},"content":"post_preview_links_comment() {"},{"lineNumber":74,"author":{"gitId":"gok99"},"content":"  curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/${ACTIONS_PULL_REQUEST_NUMBER}/comments\" \\"},{"lineNumber":75,"author":{"gitId":"gok99"},"content":"  -X POST \\"},{"lineNumber":76,"author":{"gitId":"gok99"},"content":"  -H \"Accept: application/vnd.github.v3+json\" \\"},{"lineNumber":77,"author":{"gitId":"gok99"},"content":"  -H \"Authorization: token ${GITHUB_TOKEN}\" \\"},{"lineNumber":78,"author":{"gitId":"gok99"},"content":"  -d \"{\\\"body\\\": \\\"The following links are for previewing this pull request:\\n- **Dashboard Preview**: ${DASHBOARD_DEPLOY_DOMAIN}\\n- **Docs Preview**: ${DOCS_DEPLOY_DOMAIN}\\\"}\""},{"lineNumber":79,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":80,"author":{"gitId":"gok99"},"content":""},{"lineNumber":81,"author":{"gitId":"gok99"},"content":"# Function to mark inactive and delete deployments for given array"},{"lineNumber":82,"author":{"gitId":"gok99"},"content":"# of deployment IDs"},{"lineNumber":83,"author":{"gitId":"gok99"},"content":"# $@: Array of deployment IDs"},{"lineNumber":84,"author":{"gitId":"gok99"},"content":"delete_all_deployments() {"},{"lineNumber":85,"author":{"gitId":"gok99"},"content":"  for ID in \"$@\""},{"lineNumber":86,"author":{"gitId":"gok99"},"content":"  do"},{"lineNumber":87,"author":{"gitId":"gok99"},"content":"    if [ -z \"${ID}\" ] # empty IDs, skip deployment"},{"lineNumber":88,"author":{"gitId":"gok99"},"content":"    then"},{"lineNumber":89,"author":{"gitId":"gok99"},"content":"      continue"},{"lineNumber":90,"author":{"gitId":"gok99"},"content":"    fi"},{"lineNumber":91,"author":{"gitId":"gok99"},"content":"    mark_deployment_inactive \"$ID\""},{"lineNumber":92,"author":{"gitId":"gok99"},"content":"    delete_deployment \"$ID\""},{"lineNumber":93,"author":{"gitId":"gok99"},"content":"  done"},{"lineNumber":94,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":95,"author":{"gitId":"gok99"},"content":""},{"lineNumber":96,"author":{"gitId":"gok99"},"content":"# Get deployment data from Github"},{"lineNumber":97,"author":{"gitId":"gok99"},"content":"RES\u003d$(get_deployment_data)"},{"lineNumber":98,"author":{"gitId":"gok99"},"content":""},{"lineNumber":99,"author":{"gitId":"gok99"},"content":"# Extract deployment IDs"},{"lineNumber":100,"author":{"gitId":"gok99"},"content":"DASHBOARD_IDS\u003d($(get_ids_from_response \"$RES\" \"$ACTIONS_DASHBOARD_ENV\"))"},{"lineNumber":101,"author":{"gitId":"gok99"},"content":"DOCS_IDS\u003d($(get_ids_from_response \"$RES\" \"$ACTIONS_DOCS_ENV\"))"},{"lineNumber":102,"author":{"gitId":"gok99"},"content":""},{"lineNumber":103,"author":{"gitId":"gok99"},"content":"post_preview_links_comment"},{"lineNumber":104,"author":{"gitId":"gok99"},"content":"delete_all_deployments \"${DASHBOARD_IDS[@]}\""},{"lineNumber":105,"author":{"gitId":"gok99"},"content":"delete_all_deployments \"${DOCS_IDS[@]}\""}],"authorContributionMap":{"gok99":105}},{"path":"docs/dg/devOpsGuide.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"DevOps Guide\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"This page documents the various components that form part of the DevOps infrastructure that RepoSense uses."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## GitHub Actions"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"[GitHub Actions](https://docs.github.com/en/actions) is a platform that is used by RepoSense for running the test suite and is primarily used for continuous integration and testing. The test suite is is stored in `.github/workflows/` and comprises of:"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"- Unit tests (in `src/tests/`)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"- System tests (in `src/systemtest/`)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"- Frontend tests (in `frontend/cypress/tests/`)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"### Continuous integration"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"All three types of tests in the test suite are run in a single GitHub Actions workflow called \"Continuous Integration\". The steps are defined in [`integration.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/integration.yml) and are split into three types of jobs:"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Ubuntu JDK 8 (`ubuntu`): Runs both unit tests and system tests on JDK 1.8 running on supported Ubuntu versions. This job also produces a RepoSense report and the MarkBind documentation website for previewing."},{"lineNumber":32,"author":{"gitId":"-"},"content":"2. macOS JDK 8 (`macos`): Runs both unit tests and system tests on JDK 1.8 running on supported macOS versions."},{"lineNumber":33,"author":{"gitId":"-"},"content":"3. Cypress frontend tests (`cypress`): Runs only the frontend tests on JDK 1.8 running on Ubuntu 18.04 LTS."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"The list of supported OS versions are [available on the GitHub Docs website](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources). These jobs should be updated regularly whenever RepoSense supports newer versions of the Java Development Kit (JDK) as well as when new OS versions are made available (via the job OS matrix). Frontend tests are run separately to take advantage of parallel job execution."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"Some of the jobs execute some commands that are too complicated to be included in the workflow configuration files. Such commands are written in the form of a bash script and are located in the [`config/gh-actions`](https://github.com/reposense/RepoSense/tree/master/config/gh-actions) folder."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"This workflow is run for both incoming pull requests to any branch as well as direct commits to any branch in the repository."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"### Report and documentation previews"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"For each pull request to any branch in the repository, a RepoSense report and the MarkBind documentation website is generated based on the code submitted in the pull request. This is to facilitate pull request reviewers in being able to quickly preview how the RepoSense report and/or the documentation website will change after the pull request is merged."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Due to [security considerations in preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests), the deployment of the report and documentation previews were split across two workflows in [pull request #1411](https://github.com/reposense/RepoSense/pull/1411):"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Surge.sh pending build (defined in [`pending.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/pending.yml)): Used for gathering information about the pull request and update the pull request checklist to indicate that the previews are pending."},{"lineNumber":48,"author":{"gitId":"-"},"content":"2. Surge.sh build preview (defined in [`surge.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/surge.yml)): Used for actually deploying the RepoSense report and documentation website to Surge.sh and updating the pull request checklist to link to the preview websites."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"The previews are recognised as GitHub deployments and are named `dashboard-$PRNUMBER` and `docs-$PRNUMBER`, where `$PRNUMBER` is the pull request number. Once a preview is ready, the reviewer would be able to click on \"View deployment\" or \"Show environments\" in the pull request to open the preview websites."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Both the \"Surge.sh pending build\" and \"Continuous Integration\" workflows produce an artifact respectively, which is then downloaded by the \"Surge.sh build preview\" workflow to be deployed to Surge.sh. Due to limitations in GitHub Actions in determining the workflow execution order, the \"Surge.sh pending build\" workflow is assumed to have been completed before the \"Continuous Integration\" workflow is completed."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"This task is not performed on commits to the repository, as there is no need to do so."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"After the pull request is closed or merged, the Surge.sh deployments are retained, while the GitHub environments for them are cleared by another workflow \"Clear deployments for closed pull requests\" (defined in [`delete-deploy.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/delete-deploy.yml)). The workflow uses [`delete-deploy.sh`](https://github.com/reposense/RepoSense/blob/master/config/gh-actions/delete-deploy.sh) (found in the `config/gh-actions/` folder) to remove the environments on GitHub, and to leave a comment on the pull request with links to the Surge.sh previews for later reference."},{"lineNumber":57,"author":{"gitId":"gok99"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"### GitHub Pages"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"This task builds the MarkBind documentation website on every push to the `master` branch. The steps are defined in [`gh-pages.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/gh-pages.yml)."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Stale pull requests"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"This task automates the cleaning up of the pull requests by automatically marking inactive pull requests as stale and subsequently closing them. The steps and configurations are defined in [`stale.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/stale.yml) and the job is triggered automatically once per day."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"## Codecov"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"[Codecov](https://app.codecov.io/gh/reposense/RepoSense) is a platform for checking the code coverage status of the project and the pull request patch. It runs automatically on each pull request and the settings are located in [`codecov.yml`](https://github.com/reposense/RepoSense/blob/master/codecov.yml)."},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"## Appveyor"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"[Appveyor](https://ci.appveyor.com/project/eugenepeh/reposense) is another platform used for running continuous integration tasks on both commits and pull requests, primarily used for running the test suite on the Windows platform. The settings are located in [`appveyor.yml`](https://github.com/reposense/RepoSense/blob/master/appveyor.yml)."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"## Surge.sh"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"Surge.sh is a platform for hosting the RepoSense report and documentation preview builds. The deployment is automatically performed by the \"Surge.sh build preview\" job using the [`deploy.sh`](https://github.com/reposense/RepoSense/blob/master/config/gh-actions/deploy.sh) script in the `config/gh-actions/` folder."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"For authentication, two secrets are stored and used in GitHub Actions:"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. `SURGE_LOGIN` - Holds the email address to use for the Surge.sh account"},{"lineNumber":87,"author":{"gitId":"-"},"content":"2. `SURGE_TOKEN` - Holds the secret account token generated for the above account (generated using `surge token`)"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"The `surge` command automatically detects the existence of these two environment variables and use them for authentication when deploying the RepoSense report and documentation build previews."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"Currently, deployments are kept forever, even after the pull request is merged or closed. There is currently no existing functionality to automatically clean up deployments after they are no longer useful."}],"authorContributionMap":{"gok99":2,"-":89}},{"path":"docs/showcase.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Showcase\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-3\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### Case 1: Monitoring student programmers (**individual** projects)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"* **Scenario:** RepoSense is used to monitor a Software Engineering course in which students build a project over 8 weeks."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **Links:** [report](https://nus-cs2103-ay2021s1.github.io/ip-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026until\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse) | [repo containing the settings](https://github.com/nus-cs2103-AY2021S1/ip-dashboard)"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Example usages:**"},{"lineNumber":16,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * To compare students based on the amount of code written, we can sort by contribution, as done in [this view](https://nus-cs2103-ay2021s1.github.io/ip-dashboard/?search\u003d\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026until\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)."},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * [This view](https://nus-cs2103-ay2021s1.github.io/ip-dashboard/?search\u003dkeanecjy\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026until\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkeanecjy\u0026tabRepo\u003dkeanecjy%2Fip%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003djava~md~fxml~bat~gradle~txt) shows us code written by a specific student."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Case 2: Monitoring student programmers (**team** projects)"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"* **Scenario:** Similar to case 1 above, but this time students are doing team projects."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **Links:** [report](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026since\u003d2021-09-17\u0026until\u003d2021-11-19) | [settings](https://github.com/nus-cs2103-AY2122S1/tp-dashboard)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"* **Example usages:**"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * To find the breakdown of the work done, we can tick the `breakdown by file type` checkbox, as shown in [this view](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026until\u003d2021-11-19). After that, we can filter out certain file types by un-ticking the file type."},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * To find how teams compare in terms of total work done, we can tick the `merge all groups` check-box and sort groups by `Contribution`, as seen in [this view](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026timeframe\u003dweek\u0026mergegroup\u003dAY2122S1-CS2103-F09-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F09-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F09-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F10-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F10-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F10-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F10-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T14-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T14-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T14-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T14-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T16-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T16-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T16-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T16-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103-W14-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-W14-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-W14-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-W14-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F11-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F11-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F11-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F11-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F12-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F12-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F12-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F12-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F13-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F13-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F13-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F13-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T09-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T09-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T09-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T09-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T10-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T10-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T10-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T10-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T11-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T11-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T11-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T11-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T12-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T12-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T12-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T12-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T13-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T13-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T13-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T13-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T15-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T15-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T15-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T15-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T17-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T17-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T17-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T17-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W08-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W08-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W08-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W08-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W10-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W10-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W10-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W10-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W11-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W11-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W11-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W11-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W12-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W12-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W12-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W12-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W13-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W13-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W13-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W13-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W15-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W15-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W15-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W15-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W16-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W16-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W16-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W16-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W17-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W17-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W17-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W17-4%2Ftp%5Bmaster%5D\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026since\u003d2021-09-17\u0026until\u003d2021-11-19\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other). Also, note how \u003ctooltip content\u003d\"i.e., each ramp represents the work done by the entire team in the whole week\"\u003ethe `granularity` of the ramps is set to `Week`\u003c/tooltip\u003e to reduce clutter."},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * [This view](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-10-29\u0026until\u003d2021-11-11) shows the activities near the submission deadline of [8 November 2021](https://nus-cs2103-ay2122s1.github.io/website/admin/tp-w13.html) (note how some have overshot the deadline and some others show a frenzy of activities very near to the deadline)."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"### Case 3: Monitoring student programmers (**multiple** external projects)"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"* **Scenario:** Similar to cases 1 and 2 above, but this time, each student works on multiple projects. Furthermore, most projects are external OSS projects, not within the control of the teacher."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **Links:** [report](https://nus-cs3281.github.io/2020-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-12-01\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse) | [settings](https://github.com/nus-cs3281/2020-dashboard)"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"* **Example usages:**"},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * [This view](https://nus-cs3281.github.io/2020-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-12-01\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003danubh-v\u0026zR\u003dCATcher-org%2FCATcher%5Bmaster%5D\u0026zACS\u003d153.40466101694915\u0026zS\u003d2019-12-01\u0026zFS\u003d\u0026zU\u003d2021-06-15\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse) shows the commit messages written by a specific student."},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Note how we can use the `group by` drop-down to organize activities around projects or individual authors."},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Similarly, we can use the `merge all groups` check-box to see the sum of activities in a specific project or by a specific student."}],"authorContributionMap":{"yhtMinceraft1010X":9,"-":35}},{"path":"frontend/cypress/tests/chartView/chartView_percentage.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"describe(\u0027sort by contribution\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  it(\u0027percentage should only be displayed when sort by contribution\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":4,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":5,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↑ contribution\u0027);"},{"lineNumber":8,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":10,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":11,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":12,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ group title\u0027);"},{"lineNumber":14,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":15,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":16,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":17,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":18,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":19,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ contribution\u0027);"},{"lineNumber":20,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":21,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":22,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":24,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":25,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↑ variance\u0027);"},{"lineNumber":26,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":27,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":28,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":30,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":31,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ variance\u0027);"},{"lineNumber":32,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":33,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":34,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  });"},{"lineNumber":36,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":37,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  it(\u0027percentage is NOT shown even after changing other fields\u0027, () \u003d\u003e {"},{"lineNumber":38,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":39,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027None\u0027);"},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":41,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":42,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":43,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":44,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":45,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027Author\u0027);"},{"lineNumber":46,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":47,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":48,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":49,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":50,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":51,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ contribution\u0027);"},{"lineNumber":52,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":53,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":54,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":55,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":56,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":57,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↑ variance\u0027);"},{"lineNumber":58,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":59,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":60,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":61,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  });"},{"lineNumber":62,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":63,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  it(\u0027percentage is NOT hidden even after changing other fields\u0027, () \u003d\u003e {"},{"lineNumber":64,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":65,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ contribution\u0027);"},{"lineNumber":66,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":67,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":68,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":69,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":70,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":71,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027None\u0027);"},{"lineNumber":72,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":73,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":74,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":75,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":76,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":77,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027Author\u0027);"},{"lineNumber":78,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":79,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":80,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":81,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":82,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":83,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↑ contribution\u0027);"},{"lineNumber":84,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":85,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":86,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":87,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":88,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":89,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ title\u0027);"},{"lineNumber":90,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":91,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":92,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":93,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  });"},{"lineNumber":94,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"});"}],"authorContributionMap":{"Zhou-Jiahao-1998":94}},{"path":"frontend/src/utils/api.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"// utility functions //"},{"lineNumber":2,"author":{"gitId":"-"},"content":"window.$ \u003d (id) \u003d\u003e document.getElementById(id);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"window.enquery \u003d (key, val) \u003d\u003e `${key}\u003d${encodeURIComponent(val)}`;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"window.BASE_URL \u003d \u0027https://github.com\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"window.HOME_PAGE_URL \u003d \u0027https://reposense.org\u0027;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"window.DAY_IN_MS \u003d (1000 * 60 * 60 * 24);"},{"lineNumber":7,"author":{"gitId":"-"},"content":"window.HASH_DELIMITER \u003d \u0027~\u0027;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"window.REPOS \u003d {};"},{"lineNumber":9,"author":{"gitId":"-"},"content":"window.hashParams \u003d {};"},{"lineNumber":10,"author":{"gitId":"-"},"content":"window.isMacintosh \u003d navigator.platform.includes(\u0027Mac\u0027);"},{"lineNumber":11,"author":{"gitId":"-"},"content":"window.REPORT_ZIP \u003d null;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"const HASH_ANCHOR \u003d \u0027?\u0027;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"const REPORT_DIR \u003d \u0027.\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"window.deactivateAllOverlays \u003d function deactivateAllOverlays() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  document.querySelectorAll(\u0027.summary-chart__ramp .overlay\u0027)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      .forEach((x) \u003d\u003e {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        x.className \u003d \u0027overlay\u0027;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":21,"author":{"gitId":"-"},"content":"};"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"window.getDateStr \u003d function getDateStr(date) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  return (new Date(date)).toISOString().split(\u0027T\u0027)[0];"},{"lineNumber":25,"author":{"gitId":"-"},"content":"};"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"window.getHexToRGB \u003d function getHexToRGB(color) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  // to convert color from hex code to rgb format"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  const arr \u003d /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(color);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  return arr.slice(1).map((val) \u003d\u003e parseInt(val, 16));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"};"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"window.getFontColor \u003d function getFontColor(color) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  const result \u003d window.getHexToRGB(color);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  const red \u003d result[0];"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  const green \u003d result[1];"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  const blue \u003d result[2];"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  const luminosity \u003d 0.2126 * red + 0.7152 * green + 0.0722 * blue; // per ITU-R BT.709"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"  return luminosity \u003c 120 ? \u0027#ffffff\u0027 : \u0027#000000\u0027;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"};"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"window.addHash \u003d function addHash(newKey, newVal) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  window.hashParams[newKey] \u003d newVal;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"};"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"window.removeHash \u003d function removeHash(key) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  delete window.hashParams[key];"},{"lineNumber":50,"author":{"gitId":"-"},"content":"};"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"window.encodeHash \u003d function encodeHash() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  const { hashParams } \u003d window;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"  const hash \u003d Object.keys(hashParams)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      .map((key) \u003d\u003e `${key}\u003d${encodeURIComponent(hashParams[key])}`)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      .join(\u0027\u0026\u0027);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"  const newUrl \u003d `${window.location.protocol}//${window.location.host}${window.location.pathname}${HASH_ANCHOR}${hash}`;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  window.history.replaceState(null, \u0027\u0027, newUrl);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"};"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"window.decodeHash \u003d function decodeHash() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  const hashParams \u003d {};"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"  const hashIndex \u003d window.location.href.indexOf(HASH_ANCHOR);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  const parameterString \u003d hashIndex \u003d\u003d\u003d -1 ? \u0027\u0027 : window.location.href.slice(hashIndex + 1);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"  parameterString.split(\u0027\u0026\u0027)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"      .forEach((param) \u003d\u003e {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        const [key, val] \u003d param.split(\u0027\u003d\u0027);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (key) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"          try {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            hashParams[key] \u003d decodeURIComponent(val);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"          } catch (error) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            this.userUpdated \u003d false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            this.isLoading \u003d false;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  window.hashParams \u003d hashParams;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"};"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"window.comparator \u003d (fn, sortingOption \u003d \u0027\u0027) \u003d\u003e function compare(a, b) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  let a1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  let b1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  if (sortingOption) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    a1 \u003d fn(a, sortingOption).toLowerCase"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ? fn(a, sortingOption).toLowerCase()"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        : fn(a, sortingOption);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    b1 \u003d fn(b, sortingOption).toLowerCase"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        ? fn(b, sortingOption).toLowerCase()"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        : fn(b, sortingOption);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    a1 \u003d fn(a).toLowerCase ? fn(a).toLowerCase() : fn(a);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    b1 \u003d fn(b).toLowerCase ? fn(b).toLowerCase() : fn(b);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  if (a1 \u003d\u003d\u003d b1) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    return 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"  } if (a1 \u003c b1) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    return -1;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  return 1;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"};"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"window.toggleNext \u003d function toggleNext(ele) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"  // function for toggling unopened code"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  const targetClass \u003d \u0027active\u0027;"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"  const parent \u003d ele.parentNode;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"  const classes \u003d parent.className.split(\u0027 \u0027);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  const idx \u003d classes.indexOf(targetClass);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  if (idx \u003d\u003d\u003d -1) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    classes.push(targetClass);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    classes.splice(idx, 1);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"  parent.className \u003d classes.join(\u0027 \u0027);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"};"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"window.getBaseLink \u003d function getBaseLink(repoId) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"  return `${window.BASE_URL}/${"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    window.REPOS[repoId].location.organization}/${"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    window.REPOS[repoId].location.repoName}`;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"};"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"window.getGroupName \u003d function getGroupName(group, filterGroupSelection) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  switch (filterGroupSelection) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  case \u0027groupByRepos\u0027:"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    return group[0].repoName;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  case \u0027groupByAuthors\u0027:"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    return group[0].name;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  default:"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    return \u0027\u0027;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"};"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"window.getAuthorDisplayName \u003d function getAuthorDisplayName(authorRepos) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  return authorRepos.reduce((displayName, user) \u003d\u003e ("},{"lineNumber":142,"author":{"gitId":"-"},"content":"    user.displayName \u003e displayName ? user.displayName : displayName"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  ), authorRepos[0].displayName);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"};"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"window.api \u003d {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  async loadJSON(fname) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    if (window.REPORT_ZIP) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"      const zipObject \u003d window.REPORT_ZIP.file(fname);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"      if (zipObject) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"          return JSON.parse(await zipObject.async(\u0027text\u0027));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (e) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"          throw new Error(\u0027Uploaded JSON is invalid.\u0027);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        throw new Error(\u0027Uploaded zip file is invalid.\u0027);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"      const response \u003d await fetch(`${REPORT_DIR}/${fname}`);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"      // Not directly returned in case response is not actually json."},{"lineNumber":163,"author":{"gitId":"-"},"content":"      const json \u003d await response.json();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      return json;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    } catch (e) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      throw new Error(`Unable to read ${fname}.`);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":169,"author":{"gitId":"-"},"content":"  async loadSummary() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    window.REPOS \u003d {};"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    let data \u003d {};"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"      data \u003d await this.loadJSON(\u0027summary.json\u0027);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    } catch (error) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"      if (error.message \u003d\u003d\u003d \u0027Unable to read summary.json.\u0027) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      throw error;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    const { reportGeneratedTime, reportGenerationTime } \u003d data;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    window.sinceDate \u003d data.sinceDate;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    window.untilDate \u003d data.untilDate;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    window.repoSenseVersion \u003d data.repoSenseVersion;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    window.isSinceDateProvided \u003d data.isSinceDateProvided;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    window.isUntilDateProvided \u003d data.isUntilDateProvided;"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    const errorMessages \u003d {};"},{"lineNumber":188,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    Object.entries(data.errorSet).forEach(([repoName, message]) \u003d\u003e {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"      errorMessages[repoName] \u003d message;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    const names \u003d [];"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    data.repos.forEach((repo) \u003d\u003e {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      const repoName \u003d `${repo.displayName}`;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"      window.REPOS[repoName] \u003d repo;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"      names.push(repoName);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    return {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      creationDate: reportGeneratedTime,"},{"lineNumber":200,"author":{"gitId":"-"},"content":"      reportGenerationTime,"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      errorMessages,"},{"lineNumber":202,"author":{"gitId":"-"},"content":"      names,"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"  async loadCommits(repoName) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    const folderName \u003d window.REPOS[repoName].outputFolderName;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    const commits \u003d await this.loadJSON(`${folderName}/commits.json`);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    const res \u003d [];"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    const repo \u003d window.REPOS[repoName];"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    Object.keys(commits.authorDisplayNameMap).forEach((author) \u003d\u003e {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"      if (author) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        const obj \u003d {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"          name: author,"},{"lineNumber":216,"author":{"gitId":"-"},"content":"          repoId: repoName,"},{"lineNumber":217,"author":{"gitId":"-"},"content":"          variance: commits.authorContributionVariance[author],"},{"lineNumber":218,"author":{"gitId":"-"},"content":"          displayName: commits.authorDisplayNameMap[author],"},{"lineNumber":219,"author":{"gitId":"-"},"content":"          dailyCommits: commits.authorDailyContributionsMap[author],"},{"lineNumber":220,"author":{"gitId":"-"},"content":"          fileTypeContribution: commits.authorFileTypeContributionMap[author],"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"yhtMinceraft1010X"},"content":"        this.setContributionOfCommitResultsAndInsertRepoId(obj.dailyCommits, obj.repoId);"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        const searchParams \u003d ["},{"lineNumber":226,"author":{"gitId":"-"},"content":"            repo.displayName,"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            obj.displayName, author,"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        ];"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        obj.searchPath \u003d searchParams.join(\u0027_\u0027).toLowerCase();"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        obj.repoName \u003d `${repo.displayName}`;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        obj.location \u003d `${repo.location.location}`;"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        res.push(obj);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    repo.commits \u003d commits;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    repo.users \u003d res;"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    return res;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"  loadAuthorship(repoName) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    const folderName \u003d window.REPOS[repoName].outputFolderName;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    return this.loadJSON(`${folderName}/authorship.json`)"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        .then((files) \u003d\u003e {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"          window.REPOS[repoName].files \u003d files;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"          return files;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"yhtMinceraft1010X"},"content":"  // calculate and set the contribution of each commitResult and insert repoId into commitResult, since not provided in json file"},{"lineNumber":254,"author":{"gitId":"yhtMinceraft1010X"},"content":"  setContributionOfCommitResultsAndInsertRepoId(dailyCommits, repoId) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    dailyCommits.forEach((commit) \u003d\u003e {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"      commit.commitResults.forEach((result) \u003d\u003e {"},{"lineNumber":257,"author":{"gitId":"yhtMinceraft1010X"},"content":"        result.repoId \u003d repoId;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        result.insertions \u003d Object.values(result.fileTypesAndContributionMap)"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            .reduce((acc, fileType) \u003d\u003e acc + fileType.insertions, 0);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        result.deletions \u003d Object.values(result.fileTypesAndContributionMap)"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            .reduce((acc, fileType) \u003d\u003e acc + fileType.deletions, 0);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":265,"author":{"gitId":"-"},"content":"};"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"export default \u0027test\u0027;"}],"authorContributionMap":{"yhtMinceraft1010X":4,"Zhou-Jiahao-1998":1,"-":263}},{"path":"src/main/java/reposense/RepoSense.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.git.GitVersion;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.LocationsCliArguments;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.ViewCliArguments;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.parser.InvalidCsvException;"},{"lineNumber":28,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import reposense.parser.InvalidHeaderException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.parser.InvalidLocationException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.parser.ParseException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.system.ReportServer;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * The main RepoSense class."},{"lineNumber":40,"author":{"gitId":"-"},"content":" */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class RepoSense {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(RepoSense.class);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final int SERVER_PORT_NUMBER \u003d 9000;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E MMM d HH:mm:ss yyyy z\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String VERSION_UNSPECIFIED \u003d \"unspecified\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * The entry point of the program."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            TimeUtil.startTimer();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            CliArguments cliArguments \u003d ArgsParser.parse(args);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs \u003d null;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig \u003d new ReportConfiguration();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"            if (cliArguments instanceof ViewCliArguments) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                ReportServer.startServer(SERVER_PORT_NUMBER, (("},{"lineNumber":59,"author":{"gitId":"-"},"content":"                        ViewCliArguments) cliArguments).getReportDirectoryPath().toAbsolutePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            } else if (cliArguments instanceof ConfigCliArguments) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                configs \u003d getRepoConfigurations((ConfigCliArguments) cliArguments);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                reportConfig \u003d ((ConfigCliArguments) cliArguments).getReportConfiguration();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            } else if (cliArguments instanceof LocationsCliArguments) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                configs \u003d getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                throw new AssertionError(\"CliArguments\u0027s subclass type is unhandled.\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            RepoConfiguration.setFormatsToRepoConfigs(configs, cliArguments.getFormats());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            RepoConfiguration.setDatesToRepoConfigs(configs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            RepoConfiguration.setZoneIdToRepoConfigs(configs, cliArguments.getZoneId().toString());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(configs,"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                    cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsLastModifiedDateIncludedToRepoConfigs(configs,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                    cliArguments.isLastModifiedDateIncluded());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(configs,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                    cliArguments.isShallowCloningPerformed());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(configs,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"            if (RepoConfiguration.isAnyRepoFindingPreviousAuthors(configs)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                    \u0026\u0026 !GitVersion.isGitVersionSufficientForFindingPreviousAuthors()) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                logger.warning(GitVersion.FINDING_PREVIOUS_AUTHORS_INVALID_VERSION_WARNING_MESSAGE);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                RepoConfiguration.setToFalseIsFindingPreviousAuthorsPerformedToRepoConfigs(configs);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"            List\u003cPath\u003e reportFoldersAndFiles \u003d ReportGenerator.generateReposReport(configs,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    cliArguments.getOutputFilePath().toAbsolutePath().toString(),"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                    cliArguments.getAssetsFilePath().toAbsolutePath().toString(), reportConfig,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                    formatter.format(ZonedDateTime.now(cliArguments.getZoneId())),"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                    cliArguments.getSinceDate(), cliArguments.getUntilDate(),"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                    cliArguments.isSinceDateProvided(), cliArguments.isUntilDateProvided(),"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                    cliArguments.getNumCloningThreads(), cliArguments.getNumAnalysisThreads(),"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                    TimeUtil::getElapsedTime, cliArguments.getZoneId());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            FileUtil.zipFoldersAndFiles(reportFoldersAndFiles, cliArguments.getOutputFilePath().toAbsolutePath(),"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    \".json\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"            logger.info(TimeUtil.getElapsedTimeMessage());"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"            if (cliArguments.isAutomaticallyLaunching()) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                ReportServer.startServer(SERVER_PORT_NUMBER, cliArguments.getOutputFilePath().toAbsolutePath());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (IOException | ParseException | InvalidCsvException | InvalidHeaderException e) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        } catch (HelpScreenException e) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            // help message was printed by the ArgumentParser; it is safe to exit."},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Constructs a list of {@code RepoConfiguration} if {@code cliArguments} is a {@code ConfigCliArguments}."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @throws IOException if user-supplied csv file does not exists or is not readable."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if user-supplied repo-config csv is malformed."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(ConfigCliArguments cliArguments)"},{"lineNumber":118,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs;"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            authorConfigs \u003d new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            RepoConfiguration.merge(repoConfigs, authorConfigs);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            AuthorConfiguration.setHasAuthorConfigFile(true);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException fnfe) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            // FileNotFoundException thrown as author-config.csv is not found."},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // Ignore exception as the file is optional."},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException | InvalidCsvException e) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            // for all IO and invalid csv exceptions, log the error and continue"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            groupConfigs \u003d new GroupConfigCsvParser(cliArguments.getGroupConfigFilePath()).parse();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException fnfe) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            // FileNotFoundException thrown as groups-config.csv is not found."},{"lineNumber":140,"author":{"gitId":"-"},"content":"            // Ignore exception as the file is optional."},{"lineNumber":141,"author":{"gitId":"-"},"content":"        } catch (IOException | InvalidCsvException e) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            // for all other IO and invalid csv exceptions, log the error and continue"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return repoConfigs;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Constructs a list of {@code RepoConfiguration} if {@code cliArguments} is a {@code LocationsCliArguments}."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * @throws ParseException if all repo locations are invalid."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(LocationsCliArguments cliArguments)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throws ParseException {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        for (String locationString : cliArguments.getLocations()) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                configs.add(new RepoConfiguration(new RepoLocation(locationString)));"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            } catch (InvalidLocationException ile) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, ile.getMessage(), ile);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        if (configs.isEmpty()) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw new ParseException(\"All repository locations are invalid.\");"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return configs;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public static String getVersion() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        String version \u003d RepoSense.class.getPackage().getImplementationVersion();"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        if (version \u003d\u003d null || version.equals(VERSION_UNSPECIFIED)) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            version \u003d System.getProperty(\"version\");"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        return version;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":3,"-":178}},{"path":"src/main/java/reposense/parser/CsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.StringJoiner;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVFormat;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains CSV parsing related functionalities."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public abstract class CsvParser\u003cT\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    protected static final String COLUMN_VALUES_SEPARATOR \u003d \";\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    protected static final Logger logger \u003d LogsManager.getLogger(CsvParser.class);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String OVERRIDE_KEYWORD \u003d \"override:\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_EMPTY_LINE \u003d \"[EMPTY LINE]\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNABLE_TO_READ_CSV_FILE \u003d \"Unable to read the supplied CSV file.\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MALFORMED_LINE_FORMAT \u003d \"Line %d in CSV file, %s, is malformed.\\n\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Content: %s\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINE_PARSE_EXCEPTION_FORMAT \u003d \"Error parsing line %d in CSV file, %s.\\n\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Content: %s\\n\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Error: %s\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_EMPTY_CSV_FORMAT \u003d \"The CSV file, %s, is empty.\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MANDATORY_HEADER_MISSING \u003d \"Required column header, %s, not found in \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"CSV file, %s\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_DUPLICATE_COLUMN_HEADER \u003d \"Duplicate columns are present in CSV file, %s.\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COLUMNS_RECOGNIZED \u003d \"Parsed header of CSV file, %s, and recognized columns: \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"%s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ZERO_VALID_CONFIGS \u003d \"No valid configurations in the %s.\";"},{"lineNumber":52,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static final String MESSAGE_UNKNOWN_COLUMN \u003d \"Unknown column(s) found: %s (%s)\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Path csvFilePath;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Map\u003cString, Integer\u003e headerMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private int numOfLinesBeforeFirstRecord \u003d 0;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code csvFilePath} is an invalid path."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public CsvParser(Path csvFilePath) throws IOException {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (csvFilePath \u003d\u003d null || !Files.exists(csvFilePath)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new FileNotFoundException(\"Csv file does not exist at the given path.\\n\""},{"lineNumber":64,"author":{"gitId":"-"},"content":"                    + \"Use \u0027-help\u0027 to list all the available subcommands and some concept guides.\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.csvFilePath \u003d csvFilePath;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses the csv file associated with this instance of the {@code CsvParser} and returns a {@code List}"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * containing the records in this file."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws IOException if there are errors accessing the given csv file."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if the csv is malformed."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public List\u003cT\u003e parse() throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cT\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Iterable\u003cCSVRecord\u003e records;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try (BufferedReader csvReader \u003d new BufferedReader(new FileReader(csvFilePath.toFile()))) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            String[] header \u003d getHeader(csvReader);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                records \u003d CSVFormat.DEFAULT.withIgnoreEmptyLines(false).withHeader(header).withTrim()"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                        .withIgnoreHeaderCase().parse(csvReader);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            } catch (IllegalArgumentException iae) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                throw new InvalidCsvException("},{"lineNumber":88,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_DUPLICATE_COLUMN_HEADER, csvFilePath.getFileName()));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"            for (CSVRecord record : records) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                if (isLineMalformed(record)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    processLine(results, record);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                } catch (ParseException pe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    logger.warning(String.format(MESSAGE_LINE_PARSE_EXCEPTION_FORMAT, getLineNumber(record),"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                            csvFilePath.getFileName(), getRowContentAsRawString(record), pe.getMessage()));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                } catch (IllegalArgumentException iae) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                    logger.log(Level.WARNING, iae.getMessage(), iae);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new IOException(MESSAGE_UNABLE_TO_READ_CSV_FILE, ioe);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (results.isEmpty()) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new InvalidCsvException(String.format(MESSAGE_ZERO_VALID_CONFIGS, csvFilePath.getFileName()));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return results;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Returns the header of a CSV file, which is assumed to be the first non-empty / non-whitespace line in the file."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * The line is split into an array of Strings, using the comma symbol as delimiter."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @throws IOException if there is an error accessing the file."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if the file has only empty or blank lines."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private String[] getHeader(BufferedReader reader) throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String currentLine \u003d \"\";"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // read from file until we encounter a line that is neither blank nor empty"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        while (currentLine.isEmpty()) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            currentLine \u003d Optional.ofNullable(reader.readLine())"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                    .map(String::trim)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                    .orElseThrow(() -\u003e new InvalidCsvException(String.format("},{"lineNumber":129,"author":{"gitId":"-"},"content":"                            MESSAGE_EMPTY_CSV_FORMAT, csvFilePath.getFileName())));"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"            numOfLinesBeforeFirstRecord++;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        String[] header \u003d currentLine.split(\",\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        validateHeader(header);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return header;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Returns true if {@code record} does not contain the same number of columns as the header or contains missing"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * values at the mandatory columns in CSV format."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    private boolean isLineMalformed(CSVRecord record) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!record.isConsistent()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, getLineNumber(record),"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                    csvFilePath.getFileName(), getRowContentAsRawString(record)));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        for (String header : mandatoryHeaders()) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            if (get(record, header).isEmpty()) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, getLineNumber(record),"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                        csvFilePath.getFileName(), getRowContentAsRawString(record)));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column with the header {@code header}."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    protected String get(final CSVRecord record, String header) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        return headerMap.containsKey(header) ? record.get(headerMap.get(header)).trim() : EMPTY_STRING;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column with the header {@code header} if present, or"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * returns {@code defaultValue} otherwise."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    protected String getOrDefault(final CSVRecord record, String header, String defaultValue) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return get(record, header).isEmpty() ? defaultValue : get(record, header);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column with the header {@code header} as a {@code List},"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * delimited by {@code COLUMN_VALUES_SEPARATOR} if it is in {@code record} and not empty, or"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * returns an empty {@code List} otherwise."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e getAsList(final CSVRecord record, String header) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        if (get(record, header).isEmpty()) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        return Arrays.stream(get(record, header).split(COLUMN_VALUES_SEPARATOR))"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                .map(String::trim)"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Returns the values in {@code record} as a list with the {@link CsvParser#OVERRIDE_KEYWORD} prefix removed."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * Returns an empty list if {@code record} at the column with the header {@code header} is empty."},{"lineNumber":190,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e getAsListWithoutOverridePrefix(final CSVRecord record, String header) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        List\u003cString\u003e data \u003d getAsList(record, header);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        if (isElementOverridingStandaloneConfig(record, header)) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            data.set(0, data.get(0).replaceFirst(OVERRIDE_KEYWORD, \"\"));"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            data.removeIf(String::isEmpty);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return data;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private long getLineNumber(final CSVRecord record) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return  record.getRecordNumber() + numOfLinesBeforeFirstRecord;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * Returns true if the {@code record} at the column with the header {@code header} is prefixed with"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * the override keyword."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    protected boolean isElementOverridingStandaloneConfig(final CSVRecord record, String header) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return get(record, header).startsWith(OVERRIDE_KEYWORD);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Returns the contents of {@code record} as a raw string."},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    private String getRowContentAsRawString(final CSVRecord record) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        StringJoiner inputRowString \u003d new StringJoiner(\",\");"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        for (String value : record) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            inputRowString.add(value);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        String contentAsString \u003d inputRowString.toString();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        return (contentAsString.trim().isEmpty()) ? MESSAGE_EMPTY_LINE : contentAsString;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * Generates map of column header to position number for input {@code possibleHeader}."},{"lineNumber":227,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if {@code possibleHeader} does not contain all the mandatory headers."},{"lineNumber":228,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private void validateHeader(String[] possibleHeader) throws InvalidCsvException, InvalidHeaderException {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        int headerSize \u003d possibleHeader.length;"},{"lineNumber":231,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        Set\u003cString\u003e knownColumns \u003d new HashSet\u003c\u003e();"},{"lineNumber":232,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        ArrayList\u003cString\u003e unknownColumns \u003d new ArrayList\u003c\u003e();"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c headerSize; i++) {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            String possible \u003d possibleHeader[i].trim();"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            for (String parsedHeader : mandatoryAndOptionalHeaders()) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                if (possible.equalsIgnoreCase(parsedHeader)) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    headerMap.put(parsedHeader, i);"},{"lineNumber":238,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                    knownColumns.add(possible);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":242,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            if (!knownColumns.contains(possible)) {"},{"lineNumber":243,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                unknownColumns.add(possible);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":245,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":247,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        if (unknownColumns.size() \u003e 0) {"},{"lineNumber":248,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            String errorMessage \u003d String.join(\", \", unknownColumns);"},{"lineNumber":249,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            throw new InvalidHeaderException("},{"lineNumber":250,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                    String.format(MESSAGE_UNKNOWN_COLUMN, errorMessage, csvFilePath.toString()));"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"        for (String mandatory : mandatoryHeaders()) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            if (!headerMap.containsKey(mandatory)) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                throw new InvalidCsvException(String.format("},{"lineNumber":256,"author":{"gitId":"-"},"content":"                        MESSAGE_MANDATORY_HEADER_MISSING, mandatory, csvFilePath.getFileName()));"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_COLUMNS_RECOGNIZED, csvFilePath.getFileName(),"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                String.join(\",  \", headerMap.keySet())));"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":265,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    protected abstract String[] mandatoryHeaders();"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":270,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    protected abstract String[] optionalHeaders();"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * Gets the list of all mandatory and optional headers that can be parsed."},{"lineNumber":275,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e mandatoryAndOptionalHeaders() {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        return Stream.concat(Arrays.stream(mandatoryHeaders()), Arrays.stream(optionalHeaders()))"},{"lineNumber":278,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     * Processes the csv file line by line."},{"lineNumber":283,"author":{"gitId":"-"},"content":"     * All CsvParsers must use {@link CsvParser#get}, {@link CsvParser#getOrDefault},"},{"lineNumber":284,"author":{"gitId":"-"},"content":"     * {@link CsvParser#getAsList} or {@link CsvParser#getAsListWithoutOverridePrefix} to read contents in"},{"lineNumber":285,"author":{"gitId":"-"},"content":"     * {@code record} and add created objects into {@code results}."},{"lineNumber":286,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    protected abstract void processLine(List\u003cT\u003e results, final CSVRecord record) throws ParseException;"},{"lineNumber":288,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":18,"-":270}},{"path":"src/main/java/reposense/parser/InvalidHeaderException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":3,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Zhou-Jiahao-1998"},"content":" * Signals that there is a problem in the header of csv config file."},{"lineNumber":5,"author":{"gitId":"Zhou-Jiahao-1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"public class InvalidHeaderException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public InvalidHeaderException(String message) {"},{"lineNumber":8,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":10}},{"path":"src/main/java/reposense/report/ErrorSummary.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":" * Holds the data of set of repos that failed to analyze and the reasons for the failed operation."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ErrorSummary {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static ErrorSummary instance \u003d null;"},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static Set\u003cMap\u003cString, String\u003e\u003e errorSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static ErrorSummary getInstance() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            instance \u003d new ErrorSummary();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"     * Adds an error message for {@code repoName} with the reason {@code errorMessage} into a set of errors."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void addErrorMessage(String repoName, String errorMessage) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e errorDetails \u003d new HashMap\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        errorDetails.put(\"repoName\", repoName);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        errorDetails.put(\"errorMessage\", errorMessage);"},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        errorSet.add(errorDetails);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"     * Returns a compiled set of repos that failed to analyze and the corresponding reasons."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public Set\u003cMap\u003cString, String\u003e\u003e getErrorSet() {"},{"lineNumber":36,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        return errorSet;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"     * Clears all previously stored set of errors in {@link ErrorSummary#errorSet}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void clearErrorSet() {"},{"lineNumber":43,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        errorSet.clear();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":12,"-":33}},{"path":"src/main/java/reposense/report/ReportGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.commons.text.StringEscapeUtils.escapeHtml4;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.InputStream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.concurrent.ExecutorService;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.concurrent.Executors;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.authorship.AuthorshipReporter;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.authorship.model.AuthorshipSummary;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.commits.CommitsReporter;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitContributionSummary;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import reposense.git.GitBlame;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import reposense.git.GitClone;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import reposense.git.GitRevParse;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import reposense.git.GitShortlog;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import reposense.git.GitShow;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitCloneException;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import reposense.model.StandaloneConfig;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import reposense.parser.StandaloneConfigJsonParser;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import reposense.report.exception.NoAuthorsWithCommitsFoundException;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import reposense.util.ProgressTracker;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":60,"author":{"gitId":"-"},"content":" * Contains report generation related functionalities."},{"lineNumber":61,"author":{"gitId":"-"},"content":" */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"public class ReportGenerator {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final String REPOSENSE_CONFIG_FOLDER \u003d \"_reposense\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static final String REPOSENSE_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ReportGenerator.class);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    // zip file which contains all the report template files"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final String TEMPLATE_FILE \u003d \"/templateZip.zip\";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final String INDEX_PAGE_TEMPLATE \u003d \"index.html\";"},{"lineNumber":70,"author":{"gitId":"gok99"},"content":"    private static final String INDEX_PAGE_DEFAULT_TITLE \u003d \"\u003ctitle\u003ereposense\u003c/title\u003e\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the config provided by %s (%s).\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_CREATING_DIRECTORY \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \"Error has occurred while creating repo directory for %s (%s), will skip this repo.\";"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_STANDALONE_CONFIG \u003d \"%s (%s) does not contain a standalone config file.\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_IGNORING_STANDALONE_CONFIG \u003d \"Ignoring standalone config file in %s (%s).\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MALFORMED_STANDALONE_CONFIG \u003d \"%s/%s/%s is malformed for %s (%s).\";"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_AUTHORS_SPECIFIED \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            \"%s (%s) has no authors specified, using all authors by default.\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND \u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            \"No authors found with commits for %s (%s).\";"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_ANALYSIS \u003d \"Analyzing %s (%s)...\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COMPLETE_ANALYSIS \u003d \"Analysis of %s (%s) completed!\";"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_REPORT_GENERATED \u003d \"The report is generated at %s\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_BRANCH_DOES_NOT_EXIST \u003d \"Branch %s does not exist in %s! Analysis terminated.\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_CLONING \u003d \"Failed to clone from %s\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_EXPANDING_COMMIT \u003d \"Cannot expand %s, it shall remain unexpanded\";"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static final String LOG_BRANCH_DOES_NOT_EXIST \u003d \"Branch \\\"%s\\\" does not exist.\";"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static final String LOG_BRANCH_CONTAINS_ILLEGAL_FILE_PATH \u003d"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            \"Branch contains file paths with illegal characters and not analyzable.\";"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_CLONING_OR_BRANCHING \u003d \"Exception met while cloning or checking out.\";"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static final String LOG_UNEXPECTED_ERROR \u003d \"Unexpected error stack trace for %s:\\n\u003e%s\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static Date earliestSinceDate \u003d null;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static ProgressTracker progressTracker \u003d null;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e assetsFilesWhiteList \u003d"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            Collections.unmodifiableList(Arrays.asList(new String[] {\"favicon.ico\"}));"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static final boolean DEFAULT_SHOULD_FRESH_CLONE \u003d false;"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Generates the authorship and commits JSON file for each repo in {@code configs} at {@code outputPath}, as"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * well as the summary JSON file of all the repos."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @return the list of file paths that were generated."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws IOException if templateZip.zip does not exists in jar file."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static List\u003cPath\u003e generateReposReport(List\u003cRepoConfiguration\u003e configs, String outputPath, String assetsPath,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig, String generationDate, Date cliSinceDate, Date untilDate,"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            boolean isSinceDateProvided, boolean isUntilDateProvided, int numCloningThreads, int numAnalysisThreads,"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            Supplier\u003cString\u003e reportGenerationTimeProvider, ZoneId zoneId) throws IOException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return generateReposReport(configs, outputPath, assetsPath, reportConfig, generationDate,"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                cliSinceDate, untilDate, isSinceDateProvided, isUntilDateProvided, numCloningThreads,"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                numAnalysisThreads, reportGenerationTimeProvider, zoneId, DEFAULT_SHOULD_FRESH_CLONE);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Generates the authorship and commits JSON file for each repo in {@code configs} at {@code outputPath}, as"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * well as the summary JSON file of all the repos."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @return the list of file paths that were generated."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @throws IOException if templateZip.zip does not exists in jar file."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public static List\u003cPath\u003e generateReposReport(List\u003cRepoConfiguration\u003e configs, String outputPath, String assetsPath,"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig, String generationDate, Date cliSinceDate, Date untilDate,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            boolean isSinceDateProvided, boolean isUntilDateProvided, int numCloningThreads, int numAnalysisThreads,"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            Supplier\u003cString\u003e reportGenerationTimeProvider, ZoneId zoneId,"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            boolean shouldFreshClone) throws IOException {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        prepareTemplateFile(reportConfig, outputPath);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (Files.exists(Paths.get(assetsPath))) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            FileUtil.copyDirectoryContents(assetsPath, outputPath, assetsFilesWhiteList);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        earliestSinceDate \u003d null;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        progressTracker \u003d new ProgressTracker(configs.size());"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e reportFoldersAndFiles \u003d cloneAndAnalyzeRepos(configs, outputPath,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                numCloningThreads, numAnalysisThreads, shouldFreshClone);"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Date reportSinceDate \u003d (cliSinceDate.equals(SinceDateArgumentType.ARBITRARY_FIRST_COMMIT_DATE))"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                ? earliestSinceDate : cliSinceDate;"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Optional\u003cPath\u003e summaryPath \u003d FileUtil.writeJsonFile("},{"lineNumber":145,"author":{"gitId":"-"},"content":"                new SummaryJson(configs, reportConfig, generationDate,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                        TimeUtil.getZonedDateFromSystemDate(reportSinceDate, zoneId),"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                        TimeUtil.getZonedDateFromSystemDate(untilDate, zoneId), isSinceDateProvided,"},{"lineNumber":148,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                        isUntilDateProvided, RepoSense.getVersion(), ErrorSummary.getInstance().getErrorSet(),"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                        reportGenerationTimeProvider.get(), zoneId.toString()),"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                getSummaryResultPath(outputPath));"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        summaryPath.ifPresent(reportFoldersAndFiles::add);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_REPORT_GENERATED, outputPath));"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return reportFoldersAndFiles;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Copies the template file to the specified {@code outputPath} for the repo report to be generated."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * @throws IOException if template resource is not found."},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    private static void prepareTemplateFile(ReportConfiguration config, String outputPath) throws IOException {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        InputStream is \u003d RepoSense.class.getResourceAsStream(TEMPLATE_FILE);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        FileUtil.copyTemplate(is, outputPath);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        setReportConfiguration(config, outputPath);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    private static void setReportConfiguration(ReportConfiguration config, String outputPath) throws IOException {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        setLandingPageTitle(outputPath, config.getTitle());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Set title of template file located at {@code filePath} to {@code pageTitle}"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private static void setLandingPageTitle(String filePath, String pageTitle) throws IOException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Path indexPagePath \u003d Paths.get(filePath, INDEX_PAGE_TEMPLATE);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String line \u003d new String(Files.readAllBytes(indexPagePath));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        String newLine \u003d line.replaceAll(INDEX_PAGE_DEFAULT_TITLE, \"\u003ctitle\u003e\" + escapeHtml4(pageTitle) + \"\u003c/title\u003e\");"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Files.write(indexPagePath, newLine.getBytes());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * Groups {@code RepoConfiguration} with the same {@code RepoLocation} together so that they are only cloned once."},{"lineNumber":184,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    private static Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e groupConfigsByRepoLocation("},{"lineNumber":186,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            RepoLocation location \u003d config.getLocation();"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"            if (!repoLocationMap.containsKey(location)) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                repoLocationMap.put(location, new ArrayList\u003c\u003e());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            repoLocationMap.get(location).add(config);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return repoLocationMap;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * Clone, analyze and generate the report for repositories in {@code repoLocationMap}."},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Performs cloning and analysis of each repository in parallel, and generates the report."},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Also removes any configs that failed to clone or analyze from {@code configs}."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * By default, runs in multi-threaded mode with {@code numCloningThreads} threads for cloning"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * and {@code numAnalysisThreads} threads for analysis."},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * To turn off multi-threading, run the program with the flags"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * {@code --cloning-threads 1 --analysis-threads 1}."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for each repository."},{"lineNumber":210,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e cloneAndAnalyzeRepos(List\u003cRepoConfiguration\u003e configs, String outputPath,"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            int numCloningThreads, int numAnalysisThreads, boolean shouldFreshClone) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d groupConfigsByRepoLocation(configs);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        List\u003cRepoLocation\u003e repoLocationList \u003d new ArrayList\u003c\u003e(repoLocationMap.keySet());"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        // Fixed thread pools are used to limit the number of threads used by cloning and analysis jobs at any one time"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        ExecutorService cloneExecutor \u003d Executors.newFixedThreadPool(numCloningThreads);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        ExecutorService analyzeExecutor \u003d Executors.newFixedThreadPool(numAnalysisThreads);"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        List\u003cCompletableFuture\u003cAnalyzeJobOutput\u003e\u003e analyzeJobFutures \u003d new ArrayList\u003c\u003e();"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        for (RepoLocation location : repoLocationList) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configsToAnalyze \u003d repoLocationMap.get(location);"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"            // The `CompletableFuture.supplyAsync` method is used to clone the repo in parallel."},{"lineNumber":225,"author":{"gitId":"-"},"content":"            // Note that the `cloneExecutor` is passed as a parameter to ensure that the number of threads used"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            // for cloning is no more than `numCloningThreads`."},{"lineNumber":227,"author":{"gitId":"-"},"content":"            CompletableFuture\u003cCloneJobOutput\u003e cloneFuture \u003d CompletableFuture.supplyAsync(() -\u003e"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                    cloneRepo(configsToAnalyze.get(0), location, shouldFreshClone), cloneExecutor);"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"            // The `thenApplyAsync` method is used to analyze the cloned repo in parallel."},{"lineNumber":231,"author":{"gitId":"-"},"content":"            // This ensures that the analysis job for each repo will only be run after the repo has been cloned."},{"lineNumber":232,"author":{"gitId":"-"},"content":"            // Note that the `analyzeExecutor` is passed as a parameter to ensure that the number of threads used"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            // for analysis is no more than `numAnalysisThreads`."},{"lineNumber":234,"author":{"gitId":"-"},"content":"            CompletableFuture\u003cAnalyzeJobOutput\u003e analyzeFuture \u003d cloneFuture.thenApplyAsync("},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    cloneJobOutput -\u003e analyzeRepos(outputPath, configsToAnalyze, cloneJobOutput), analyzeExecutor);"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"            analyzeJobFutures.add(analyzeFuture);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"        // Next, we collect the list of outputs from all the analyze jobs"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        List\u003cAnalyzeJobOutput\u003e jobOutputs \u003d analyzeJobFutures.stream()"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                .map(CompletableFuture::join)"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        // Finally, the ExecutorService objects are shut down to prevent memory leaks"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        cloneExecutor.shutdown();"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        analyzeExecutor.shutdown();"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d jobOutputs.stream()"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                .flatMap(jobOutput -\u003e jobOutput.getFiles().stream())"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"        List\u003cRepoLocation\u003e cloneFailLocations \u003d jobOutputs"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                .filter(jobOutput -\u003e !jobOutput.isCloneSuccessful())"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                .map(jobOutput -\u003e jobOutput.getLocation())"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        cloneFailLocations.forEach(location -\u003e handleCloningFailed(configs, location));"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"        List\u003cAnalysisErrorInfo\u003e analysisErrors \u003d jobOutputs"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                .flatMap(jobOutput -\u003e jobOutput.getAnalyseErrors().stream())"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        analysisErrors.forEach(errorInfo -\u003e"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                handleAnalysisFailed(configs, errorInfo.getFailedConfig(), errorInfo.getErrorMessage()));"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        repoCloner.cleanup();"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitId":"-"},"content":"     * Clones repo at {@code location}."},{"lineNumber":274,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * @return A {@code CloneJobOutput} object comprising the {@code location} of the repo, whether the cloning was"},{"lineNumber":276,"author":{"gitId":"-"},"content":"     * successful, and the {@code defaultBranch} of the repo."},{"lineNumber":277,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    private static CloneJobOutput cloneRepo(RepoConfiguration config, RepoLocation location,"},{"lineNumber":279,"author":{"gitId":"-"},"content":"                                            boolean shouldFreshClone) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        repoCloner.cloneBare(config, shouldFreshClone);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        RepoLocation clonedRepoLocation \u003d repoCloner.getClonedRepoLocation();"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        if (clonedRepoLocation !\u003d null) {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            String defaultBranch \u003d repoCloner.getCurrentRepoDefaultBranch();"},{"lineNumber":285,"author":{"gitId":"-"},"content":"            return new CloneJobOutput(location, defaultBranch);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            return new CloneJobOutput(location);"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitId":"-"},"content":"     * Analyzes all repos in {@code configsToAnalyze} and generates their report."},{"lineNumber":293,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":294,"author":{"gitId":"-"},"content":"     * @return An {@code AnalyzeJobOutput} object comprising the {@code location} of the repo, whether the cloning was"},{"lineNumber":295,"author":{"gitId":"-"},"content":"     * successful, the list of {@code filesGenerated} by the analysis and a list of {@code analysisErrors} encountered."},{"lineNumber":296,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    private static AnalyzeJobOutput analyzeRepos(String outputPath, List\u003cRepoConfiguration\u003e configsToAnalyze,"},{"lineNumber":298,"author":{"gitId":"-"},"content":"            CloneJobOutput cloneJobOutput) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        RepoLocation location \u003d cloneJobOutput.getLocation();"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        boolean cloneSuccessful \u003d cloneJobOutput.isCloneSuccessful();"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        List\u003cAnalysisErrorInfo\u003e analysisErrors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        if (!cloneSuccessful) {"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            repoCloner.cleanupRepo(configsToAnalyze.get(0));"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            return new AnalyzeJobOutput(location, cloneSuccessful, generatedFiles, analysisErrors);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        Iterator\u003cRepoConfiguration\u003e itr \u003d configsToAnalyze.iterator();"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        while (itr.hasNext()) {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"            progressTracker.incrementProgress();"},{"lineNumber":312,"author":{"gitId":"-"},"content":"            RepoConfiguration configToAnalyze \u003d itr.next();"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            configToAnalyze.updateBranch(cloneJobOutput.getDefaultBranch());"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"            Path repoReportDirectory \u003d Paths.get(outputPath, configToAnalyze.getOutputFolderName());"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            logger.info("},{"lineNumber":317,"author":{"gitId":"-"},"content":"                    String.format(progressTracker.getProgress() + \" \""},{"lineNumber":318,"author":{"gitId":"-"},"content":"                            + MESSAGE_START_ANALYSIS, configToAnalyze.getLocation(), configToAnalyze.getBranch()));"},{"lineNumber":319,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"                GitRevParse.assertBranchExists(configToAnalyze, FileUtil.getBareRepoPath(configToAnalyze));"},{"lineNumber":321,"author":{"gitId":"-"},"content":"                GitClone.cloneFromBareAndUpdateBranch(Paths.get(FileUtil.REPOS_ADDRESS), configToAnalyze);"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"                FileUtil.createDirectory(repoReportDirectory);"},{"lineNumber":324,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(analyzeRepo(configToAnalyze, repoReportDirectory.toString()));"},{"lineNumber":325,"author":{"gitId":"-"},"content":"            } catch (IOException ioe) {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"                String logMessage \u003d String.format(MESSAGE_ERROR_CREATING_DIRECTORY,"},{"lineNumber":327,"author":{"gitId":"-"},"content":"                        configToAnalyze.getLocation(), configToAnalyze.getBranch());"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, logMessage, ioe);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            } catch (GitBranchException gbe) {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"                logger.log(Level.SEVERE, String.format(MESSAGE_BRANCH_DOES_NOT_EXIST,"},{"lineNumber":331,"author":{"gitId":"-"},"content":"                        configToAnalyze.getBranch(), configToAnalyze.getLocation()), gbe);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze,"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                        String.format(LOG_BRANCH_DOES_NOT_EXIST, configToAnalyze.getBranch())));"},{"lineNumber":334,"author":{"gitId":"-"},"content":"            } catch (GitCloneException gce) {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze, LOG_ERROR_CLONING_OR_BRANCHING));"},{"lineNumber":336,"author":{"gitId":"-"},"content":"            } catch (NoAuthorsWithCommitsFoundException nafe) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, String.format(MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND,"},{"lineNumber":338,"author":{"gitId":"-"},"content":"                        configToAnalyze.getLocation(), configToAnalyze.getBranch()));"},{"lineNumber":339,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(generateEmptyRepoReport(repoReportDirectory.toString(),"},{"lineNumber":340,"author":{"gitId":"-"},"content":"                        Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND));"},{"lineNumber":341,"author":{"gitId":"-"},"content":"                generateEmptyRepoReport(repoReportDirectory.toString(), Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND);"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            } catch (Exception e) {"},{"lineNumber":343,"author":{"gitId":"-"},"content":"                StringWriter sw \u003d new StringWriter();"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                e.printStackTrace(new PrintWriter(sw));"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                logger.log(Level.SEVERE, sw.toString());"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze,"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                        String.format(LOG_UNEXPECTED_ERROR, configToAnalyze.getLocation(), sw.toString())));"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        repoCloner.cleanupRepo(configsToAnalyze.get(0));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        return new AnalyzeJobOutput(location, cloneSuccessful, generatedFiles, analysisErrors);"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * Analyzes repo specified by {@code config} and generates the report."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for the repo specified by {@code config}."},{"lineNumber":357,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e analyzeRepo("},{"lineNumber":359,"author":{"gitId":"-"},"content":"            RepoConfiguration config, String repoReportDirectory) throws NoAuthorsWithCommitsFoundException {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        // preprocess the config and repo"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        updateRepoConfig(config);"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        updateAuthorList(config);"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        updateIgnoreCommitList(config);"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"        if (config.isFindingPreviousAuthorsPerformed()) {"},{"lineNumber":366,"author":{"gitId":"-"},"content":"            generateIgnoreRevsFile(config);"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"        AuthorshipSummary authorshipSummary \u003d AuthorshipReporter.generateAuthorshipSummary(config);"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        CommitContributionSummary commitSummary \u003d CommitsReporter.generateCommitSummary(config);"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d generateIndividualRepoReport(repoReportDirectory, commitSummary, authorshipSummary);"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_COMPLETE_ANALYSIS, config.getLocation(), config.getBranch()));"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":377,"author":{"gitId":"-"},"content":"     * Updates {@code config} with configuration provided by repository if exists."},{"lineNumber":378,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    public static void updateRepoConfig(RepoConfiguration config) {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        Path configJsonPath \u003d"},{"lineNumber":381,"author":{"gitId":"-"},"content":"                Paths.get(config.getRepoRoot(), REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE).toAbsolutePath();"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"        if (!Files.exists(configJsonPath)) {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_NO_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"},{"lineNumber":385,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"        if (config.isStandaloneConfigIgnored()) {"},{"lineNumber":389,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_IGNORING_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"},{"lineNumber":390,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":391,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"            StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(configJsonPath);"},{"lineNumber":395,"author":{"gitId":"-"},"content":"            config.update(standaloneConfig);"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        } catch (JsonSyntaxException jse) {"},{"lineNumber":397,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_MALFORMED_STANDALONE_CONFIG, config.getDisplayName(),"},{"lineNumber":398,"author":{"gitId":"-"},"content":"                    REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE, config.getLocation(), config.getBranch()));"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        } catch (IllegalArgumentException iae) {"},{"lineNumber":400,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON,"},{"lineNumber":401,"author":{"gitId":"-"},"content":"                    iae.getMessage(), config.getLocation(), config.getBranch()));"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            throw new AssertionError("},{"lineNumber":404,"author":{"gitId":"-"},"content":"                    \"This exception should not happen as we have performed the file existence check.\");"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":409,"author":{"gitId":"-"},"content":"     * Find and update {@code config} with all the author identities if author list is empty."},{"lineNumber":410,"author":{"gitId":"-"},"content":"     * Also removes ignored authors from author list."},{"lineNumber":411,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    private static void updateAuthorList(RepoConfiguration config) throws NoAuthorsWithCommitsFoundException {"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        if (config.getAuthorList().isEmpty()) {"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_NO_AUTHORS_SPECIFIED, config.getLocation(), config.getBranch()));"},{"lineNumber":415,"author":{"gitId":"-"},"content":"            List\u003cAuthor\u003e authorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"            if (authorList.isEmpty()) {"},{"lineNumber":418,"author":{"gitId":"-"},"content":"                throw new NoAuthorsWithCommitsFoundException();"},{"lineNumber":419,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"            config.setAuthorList(authorList);"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        config.removeIgnoredAuthors();"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":427,"author":{"gitId":"-"},"content":"     * Updates {@code config} with the exact list of commits if commit ranges are provided."},{"lineNumber":428,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":429,"author":{"gitId":"-"},"content":"    private static void updateIgnoreCommitList(RepoConfiguration config) {"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e updatedIgnoreCommitList \u003d config.getIgnoreCommitList().stream()"},{"lineNumber":431,"author":{"gitId":"-"},"content":"                .flatMap(x -\u003e CommitHash.getHashes(config.getRepoRoot(), config.getBranch(), x))"},{"lineNumber":432,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":433,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(updatedIgnoreCommitList);"},{"lineNumber":434,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":437,"author":{"gitId":"-"},"content":"     * Adds {@code configs} that were not successfully cloned from {@code failedRepoLocation}"},{"lineNumber":438,"author":{"gitId":"-"},"content":"     * into the list of errors in the summary report and removes them from the list of {@code configs}."},{"lineNumber":439,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    private static void handleCloningFailed(List\u003cRepoConfiguration\u003e configs, RepoLocation failedRepoLocation) {"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e failedConfigs \u003d configs.stream()"},{"lineNumber":442,"author":{"gitId":"-"},"content":"                .filter(config -\u003e config.getLocation().equals(failedRepoLocation))"},{"lineNumber":443,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        handleFailedConfigs(configs, failedConfigs, String.format(LOG_ERROR_CLONING, failedRepoLocation));"},{"lineNumber":445,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":448,"author":{"gitId":"-"},"content":"     * Adds {@code failedConfig} that failed analysis into the list of errors in the summary report and"},{"lineNumber":449,"author":{"gitId":"-"},"content":"     * removes {@code failedConfig} from the list of {@code configs}."},{"lineNumber":450,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":451,"author":{"gitId":"-"},"content":"    private static void handleAnalysisFailed(List\u003cRepoConfiguration\u003e configs, RepoConfiguration failedConfig,"},{"lineNumber":452,"author":{"gitId":"-"},"content":"            String errorMessage) {"},{"lineNumber":453,"author":{"gitId":"-"},"content":"        handleFailedConfigs(configs, Collections.singletonList(failedConfig), errorMessage);"},{"lineNumber":454,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":455,"author":{"gitId":"-"},"content":""},{"lineNumber":456,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":457,"author":{"gitId":"-"},"content":"     * Adds {@code failedConfigs} that failed cloning/analysis into the list of errors in the summary report and"},{"lineNumber":458,"author":{"gitId":"-"},"content":"     * removes {@code failedConfigs} from the list of {@code configs}."},{"lineNumber":459,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    private static void handleFailedConfigs("},{"lineNumber":461,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs, List\u003cRepoConfiguration\u003e failedConfigs, String errorMessage) {"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        Iterator\u003cRepoConfiguration\u003e itr \u003d configs.iterator();"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        while (itr.hasNext()) {"},{"lineNumber":464,"author":{"gitId":"-"},"content":"            RepoConfiguration config \u003d itr.next();"},{"lineNumber":465,"author":{"gitId":"-"},"content":"            if (failedConfigs.contains(config)) {"},{"lineNumber":466,"author":{"gitId":"-"},"content":"                ErrorSummary.getInstance().addErrorMessage(config.getDisplayName(), errorMessage);"},{"lineNumber":467,"author":{"gitId":"-"},"content":"                itr.remove();"},{"lineNumber":468,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":473,"author":{"gitId":"-"},"content":"     * Generates a report at the {@code repoReportDirectory}."},{"lineNumber":474,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for this empty report."},{"lineNumber":475,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":476,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e generateEmptyRepoReport(String repoReportDirectory, String displayName) {"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        CommitReportJson emptyCommitReportJson \u003d new CommitReportJson(displayName);"},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(emptyCommitReportJson, getIndividualCommitsPath(repoReportDirectory))"},{"lineNumber":481,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(Collections.emptyList(), getIndividualAuthorshipPath(repoReportDirectory))"},{"lineNumber":483,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":486,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":489,"author":{"gitId":"-"},"content":"     * Generates a report for a single repository at {@code repoReportDirectory}."},{"lineNumber":490,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for this report."},{"lineNumber":491,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":492,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e generateIndividualRepoReport("},{"lineNumber":493,"author":{"gitId":"-"},"content":"            String repoReportDirectory, CommitContributionSummary commitSummary, AuthorshipSummary authorshipSummary) {"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        CommitReportJson commitReportJson \u003d new CommitReportJson(commitSummary, authorshipSummary);"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":497,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(commitReportJson, getIndividualCommitsPath(repoReportDirectory))"},{"lineNumber":498,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(authorshipSummary.getFileResults(), getIndividualAuthorshipPath(repoReportDirectory))"},{"lineNumber":500,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":502,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":503,"author":{"gitId":"-"},"content":""},{"lineNumber":504,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":505,"author":{"gitId":"-"},"content":"     * Creates the .git-blame-ignore-revs file containing the contents of {@code IgnoreCommitList}"},{"lineNumber":506,"author":{"gitId":"-"},"content":"     * in the config\u0027s repo root directory."},{"lineNumber":507,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":508,"author":{"gitId":"-"},"content":"    private static void generateIgnoreRevsFile(RepoConfiguration config) {"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e expandedIgnoreCommitList \u003d config.getIgnoreCommitList().stream()"},{"lineNumber":510,"author":{"gitId":"-"},"content":"                .map(CommitHash::toString)"},{"lineNumber":511,"author":{"gitId":"-"},"content":"                .map(commitHash -\u003e {"},{"lineNumber":512,"author":{"gitId":"-"},"content":"                    try {"},{"lineNumber":513,"author":{"gitId":"-"},"content":"                        return GitShow.getExpandedCommitHash(config.getRepoRoot(), commitHash);"},{"lineNumber":514,"author":{"gitId":"-"},"content":"                    } catch (CommitNotFoundException e) {"},{"lineNumber":515,"author":{"gitId":"-"},"content":"                        logger.warning(String.format(LOG_ERROR_EXPANDING_COMMIT, commitHash));"},{"lineNumber":516,"author":{"gitId":"-"},"content":"                        return new CommitHash(commitHash);"},{"lineNumber":517,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":518,"author":{"gitId":"-"},"content":"                })"},{"lineNumber":519,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(expandedIgnoreCommitList);"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        FileUtil.writeIgnoreRevsFile(getIgnoreRevsFilePath(config.getRepoRoot()), config.getIgnoreCommitList());"},{"lineNumber":523,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":524,"author":{"gitId":"-"},"content":""},{"lineNumber":525,"author":{"gitId":"-"},"content":"    private static String getSummaryResultPath(String targetFileLocation) {"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        return targetFileLocation + \"/\" + SummaryJson.SUMMARY_JSON_FILE_NAME;"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"    private static String getIgnoreRevsFilePath(String targetFileLocation) {"},{"lineNumber":530,"author":{"gitId":"-"},"content":"        return targetFileLocation + GitBlame.IGNORE_COMMIT_LIST_FILE_NAME;"},{"lineNumber":531,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":532,"author":{"gitId":"-"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"    private static String getIndividualAuthorshipPath(String repoReportDirectory) {"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        return repoReportDirectory + \"/authorship.json\";"},{"lineNumber":535,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":536,"author":{"gitId":"-"},"content":""},{"lineNumber":537,"author":{"gitId":"-"},"content":"    private static String getIndividualCommitsPath(String repoReportDirectory) {"},{"lineNumber":538,"author":{"gitId":"-"},"content":"        return repoReportDirectory + \"/commits.json\";"},{"lineNumber":539,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":540,"author":{"gitId":"-"},"content":""},{"lineNumber":541,"author":{"gitId":"-"},"content":"    public static void setEarliestSinceDate(Date newEarliestSinceDate) {"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        if (earliestSinceDate \u003d\u003d null || newEarliestSinceDate.before(earliestSinceDate)) {"},{"lineNumber":543,"author":{"gitId":"-"},"content":"            earliestSinceDate \u003d newEarliestSinceDate;"},{"lineNumber":544,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":545,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":546,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":1,"gok99":1,"-":544}},{"path":"src/main/java/reposense/report/SummaryJson.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents the structure of summary.json file in reposense-report folder."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class SummaryJson {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SUMMARY_JSON_FILE_NAME \u003d \"summary.json\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final String repoSenseVersion;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final String reportGeneratedTime;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final String reportGenerationTime;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final String zoneId;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final String reportTitle;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final List\u003cRepoConfiguration\u003e repos;"},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private final Set\u003cMap\u003cString, String\u003e\u003e errorSet;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Date sinceDate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Date untilDate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final boolean isSinceDateProvided;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final boolean isUntilDateProvided;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public SummaryJson(List\u003cRepoConfiguration\u003e repos, ReportConfiguration reportConfig, String reportGeneratedTime,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Date sinceDate, Date untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided,"},{"lineNumber":31,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            String repoSenseVersion, Set\u003cMap\u003cString, String\u003e\u003e errorSet, String reportGenerationTime, String zoneId) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.repos \u003d repos;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.reportGeneratedTime \u003d reportGeneratedTime;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.reportGenerationTime \u003d reportGenerationTime;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.reportTitle \u003d reportConfig.getTitle();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.isSinceDateProvided \u003d isSinceDateProvided;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.isUntilDateProvided \u003d isUntilDateProvided;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.repoSenseVersion \u003d repoSenseVersion;"},{"lineNumber":41,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        this.errorSet \u003d errorSet;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":4,"-":40}},{"path":"src/systemtest/java/reposense/ConfigSystemTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.After;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.git.GitVersion;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.parser.ReportConfigJsonParser;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class ConfigSystemTest {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String FT_TEMP_DIR \u003d \"ft_temp\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String DUMMY_ASSETS_DIR \u003d \"dummy\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String EXPECTED_FOLDER \u003d \"expected\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e TESTING_FILE_FORMATS \u003d Arrays.asList(\"java\", \"adoc\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String TEST_REPORT_GENERATED_TIME \u003d \"Tue Jul 24 17:45:15 SGT 2018\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String TEST_REPORT_GENERATION_TIME \u003d \"15 second(s)\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String TEST_TIME_ZONE \u003d \"Asia/Singapore\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static boolean haveNormallyClonedRepo \u003d false;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(FT_TEMP_DIR);"},{"lineNumber":54,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        ErrorSummary.getInstance().clearErrorSet();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AuthorConfiguration.setHasAuthorConfigFile(AuthorConfiguration.DEFAULT_HAS_AUTHOR_CONFIG_FILE);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @After"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(FT_TEMP_DIR);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRange() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        runTest(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"),"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                false, false, false, false,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \"sinceBeginningDateRange/expected\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDate() throws Exception {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        runTest(getInputWithUntilDate(\"1/11/2017\"), false,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                false, false, false,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \"30daysFromUntilDate/expected\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * System test with a specified since date and until date, with the last modified date time in each"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * line of code."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void testDateRangeWithModifiedDateTimeInLines() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        runTest(getInputWithDates(\"1/9/2017\", \"30/10/2017\"),"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                true, false, false, false,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                \"dateRangeWithModifiedDateTimeInLines/expected\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit, using shallow cloning."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRangeWithShallowCloning() throws Exception {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        runTest(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"),"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                false, true, true, false,"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                \"sinceBeginningDateRangeWithShallowCloning/expected\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDateWithShallowCloning() throws Exception {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        runTest(getInputWithUntilDate(\"1/11/2017\"), false,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                true, true, false,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                \"30daysFromUntilDateWithShallowCloning/expected\");"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit, using find previous authors."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRangeWithFindPreviousAuthors() throws Exception {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        runTest(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"),"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                false, false, true, true,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                \"sinceBeginningDateRangeFindPreviousAuthors/expected\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDateWithFindPreviousAuthors() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        runTest(getInputWithUntilDate(\"1/11/2017\"), false, false, true,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                true, \"30daysFromUntilDateFindPreviousAuthors/expected\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private String getInputWithUntilDate(String untilDate) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return String.format(\"--until %s\", untilDate);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private String getInputWithDates(String sinceDate, String untilDate) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return String.format(\"--since %s --until %s\", sinceDate, untilDate);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Generates the testing report and then compared it with the expected report"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Re-generates a normal report after the testing finished if the first report is shallow-cloned"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void runTest(String inputDates, boolean shouldIncludeModifiedDateInLines,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                        boolean shallowCloning, boolean shouldFreshClone, boolean findPreviousAuthors,"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                        String pathToResource) throws Exception {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        generateReport(inputDates, shouldIncludeModifiedDateInLines, shallowCloning,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                shouldFreshClone || !haveNormallyClonedRepo, findPreviousAuthors);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Path actualFiles \u003d loadResource(getClass(), pathToResource);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        verifyAllJson(actualFiles, FT_TEMP_DIR);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        haveNormallyClonedRepo \u003d !shallowCloning;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Generates the testing report to be compared with expected report."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private void generateReport(String inputDates, boolean shouldIncludeModifiedDateInLines,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                                boolean shallowCloning, boolean shouldFreshClone,"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                                boolean findPreviousAuthors) throws Exception {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Path configFolder \u003d loadResource(getClass(), \"repo-config.csv\").getParent();"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", TESTING_FILE_FORMATS);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d new InputBuilder().addConfig(configFolder)"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                .addTimezone(TEST_TIME_ZONE)"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                .add(inputDates);"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        if (shallowCloning) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            inputBuilder \u003d inputBuilder.addShallowCloning();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        if (findPreviousAuthors) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            inputBuilder \u003d inputBuilder.addFindPreviousAuthors();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String input \u003d inputBuilder.build();"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        repoConfigs.forEach(repoConfig -\u003e repoConfig.setIsShallowCloningPerformed(shallowCloning));"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                new GroupConfigCsvParser(((ConfigCliArguments) cliArguments).getGroupConfigFilePath()).parse();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        ReportConfiguration reportConfig \u003d new ReportConfigJsonParser().parse(("},{"lineNumber":185,"author":{"gitId":"-"},"content":"                (ConfigCliArguments) cliArguments).getReportConfigFilePath());"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(repoConfigs, authorConfigs);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(repoConfigs, cliArguments.getFormats());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        RepoConfiguration.setDatesToRepoConfigs("},{"lineNumber":192,"author":{"gitId":"-"},"content":"                repoConfigs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        RepoConfiguration.setZoneIdToRepoConfigs(repoConfigs, cliArguments.getZoneId().toString());"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsLastModifiedDateIncludedToRepoConfigs(repoConfigs, shouldIncludeModifiedDateInLines);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(repoConfigs,"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        boolean isGitVersionInsufficient \u003d RepoConfiguration.isAnyRepoFindingPreviousAuthors(repoConfigs)"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                \u0026\u0026 !GitVersion.isGitVersionSufficientForFindingPreviousAuthors();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Assert.assertFalse(\"Git version 2.23.0 and above necessary to run test\", isGitVersionInsufficient);"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        ReportGenerator.generateReposReport(repoConfigs, FT_TEMP_DIR, DUMMY_ASSETS_DIR, reportConfig,"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                TEST_REPORT_GENERATED_TIME, cliArguments.getSinceDate(), cliArguments.getUntilDate(),"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                cliArguments.isSinceDateProvided(), cliArguments.isUntilDateProvided(),"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                cliArguments.getNumCloningThreads(), cliArguments.getNumAnalysisThreads(), () -\u003e"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                TEST_REPORT_GENERATION_TIME, cliArguments.getZoneId(), shouldFreshClone);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Verifies all JSON files in {@code actualDirectory} with {@code expectedDirectory}"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    private void verifyAllJson(Path expectedDirectory, String actualRelative) {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        try (Stream\u003cPath\u003e pathStream \u003d Files.list(expectedDirectory)) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            for (Path filePath : pathStream.collect(Collectors.toList())) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                if (Files.isDirectory(filePath)) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                    verifyAllJson(filePath, actualRelative);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                if (filePath.toString().endsWith(\".json\")) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                    String relativeDirectory \u003d filePath.toAbsolutePath().toString().split(EXPECTED_FOLDER)[1];"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                    assertJson(filePath, relativeDirectory, actualRelative);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            ioe.printStackTrace();"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Asserts the correctness of given JSON file."},{"lineNumber":230,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    private void assertJson(Path expectedJson, String expectedPosition, String actualRelative) {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        Path actualJson \u003d Paths.get(actualRelative, expectedPosition);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.exists(actualJson));"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            Assert.assertTrue(TestUtil.compareFileContents(expectedJson, actualJson));"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            Assert.fail(e.getMessage());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":1,"-":239}},{"path":"src/test/java/reposense/parser/AuthorConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.AbstractMap.SimpleEntry;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AuthorConfigParserTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_EMPTY_LOCATION_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_emptyLocation_test.csv\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_EMPTY_CONFIG_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/require_trailing_whitespaces/authorconfig_emptyConfig_test.csv\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_noSpecialCharacter_test.csv\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_specialCharacter_test.csv\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_COMMAS_AND_DOUBLEQUOTES_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_commasAndDoubleQuotes_test.csv\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_multipleEmails_test.csv\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_INVALID_LOCATION \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_invalidLocation_test.csv\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_DIFFERENT_COLUMN_ORDER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_differentColumnOrder_test.csv\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MISSING_OPTIONAL_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MISSING_MANDATORY_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":42,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static final Path AUTHOR_CONFIG_UNKNOWN_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":43,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            \"AuthorConfigParserTest/authorconfig_unknownHeaders_test.csv\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_MASTER_BRANCH \u003d \"master\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Arrays.asList(FIRST_AUTHOR, SECOND_AUTHOR);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final Author FIRST_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"‘Processed�‘Cooked�\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final Author SECOND_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"(codeeong)\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final Author THIRD_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"^:jordancjq;$\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS \u003d Arrays.asList("},{"lineNumber":57,"author":{"gitId":"-"},"content":"            FIRST_SPECIAL_CHARACTER_AUTHOR, SECOND_SPECIAL_CHARACTER_AUTHOR, THIRD_SPECIAL_CHARACTER_AUTHOR);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final Author FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"ProcessedCooked\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final Author SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"codeeong\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final Author THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"jordancjq\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static final String FIRST_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"Tay Fan Gao, Douya\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final String SECOND_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"\\\"\\\"Tora, S/O,\\\" Doyua, T.\\\"\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static final String THIRD_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"jordancjq\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Collections.singletonList(\"Tay Fan Gao, Douya \\\"SOC, Y2S1\\\"\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d Collections.emptyList();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e THIRD_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            Arrays.asList(\"Borex T\\\"ony Tong\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static final Map\u003cAuthor, List\u003cString\u003e\u003e AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP \u003d"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            Stream.of(new SimpleEntry\u003c\u003e(FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR, FIRST_COMMAS_AND_DOUBLEQUOTES_ALIAS),"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR, SECOND_COMMAS_AND_DOUBLEQUOTES_ALIAS),"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR, THIRD_COMMAS_AND_DOUBLEQUOTES_ALIAS))"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toMap(entry -\u003e entry.getKey(), entry -\u003e entry.getValue()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final Map\u003cAuthor, String\u003e AUTHOR_DISPLAY_NAME_COMMAS_AND_DOUBLE_QUOTES_MAP \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            Stream.of(new SimpleEntry\u003c\u003e(FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                            FIRST_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME),"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                            SECOND_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME),"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR, THIRD_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME))"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toMap(entry -\u003e entry.getKey(), entry -\u003e entry.getValue()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_EMAIL_LIST \u003d"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            Arrays.asList(\"nbr@example.com\", \"nbriannl@test.net\", \"nbriannl@users.noreply.github.com\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void authorConfig_noSpecialCharacter_success() throws Exception {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Assert.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void authorConfig_emptyLocation_success() throws Exception {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        AuthorConfiguration expectedConfig \u003d new AuthorConfiguration(new RepoLocation(\"\"));"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_LOCATION_FILE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d authorConfigCsvParser.parse();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        AuthorConfiguration authorConfig \u003d authorConfigs.get(0);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, authorConfigs.size());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedConfig.getLocation(), authorConfig.getLocation());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedConfig.getBranch(), authorConfig.getBranch());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Assert.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, authorConfig.getAuthorList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test (expected \u003d InvalidCsvException.class)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void authorConfig_emptyConfig_throwsInvalidCsvException() throws Exception {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_CONFIG_FILE);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        authorConfigCsvParser.parse();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void authorConfig_specialCharacter_success() throws Exception {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Assert.assertEquals(AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void authorConfig_multipleEmails_success() throws Exception {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Author actualAuthor \u003d config.getAuthorList().get(0);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Assert.assertEquals(FIRST_AUTHOR_EMAIL_LIST.size(), actualAuthor.getEmails().size());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Assert.assertTrue(actualAuthor.getEmails().containsAll(FIRST_AUTHOR_EMAIL_LIST));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void authorConfig_invalidLocation_success() throws Exception {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_INVALID_LOCATION);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Assert.assertEquals(3, config.getAuthorList().size());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void authorConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_DIFFERENT_COLUMN_ORDER);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Assert.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void authorConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MISSING_OPTIONAL_HEADER);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Assert.assertEquals(4, config.getAuthorList().size());"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test (expected \u003d InvalidCsvException.class)"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void authorConfig_missingMandatoryHeader_throwsInvalidCsvException() throws Exception {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MISSING_MANDATORY_HEADER);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        authorConfigCsvParser.parse();"},{"lineNumber":195,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":197,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    @Test (expected \u003d InvalidHeaderException.class)"},{"lineNumber":198,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void authorConfig_unknownHeaders_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":199,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_UNKNOWN_HEADER);"},{"lineNumber":200,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        authorConfigCsvParser.parse();"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public void parse_multipleColumnsWithCommasAndDoubleQuotes_success() throws Exception {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_COMMAS_AND_DOUBLEQUOTES_FILE);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        Assert.assertEquals(AUTHOR_DISPLAY_NAME_COMMAS_AND_DOUBLE_QUOTES_MAP, config.getAuthorDisplayNameMap());"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        Assert.assertEquals(AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP.size(), config.getAuthorList().size());"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        config.getAuthorList().forEach(author -\u003e {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            Assert.assertEquals(AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP.get(author), author.getAuthorAliases());"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":8,"-":214}},{"path":"src/test/java/reposense/parser/GroupConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class GroupConfigParserTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MULTI_LOCATION_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_multipleLocation_test.csv\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_EMPTY_LOCATION_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_emptyLocation_test.csv\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_INVALID_LOCATION_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_invalidLocation_test.csv\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_DIFFERENT_COLUMN_ORDER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_differentColumnOrder_test.csv\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MISSING_OPTIONAL_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MISSING_MANDATORY_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static final Path GROUP_CONFIG_UNKNOWN_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":30,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            \"GroupConfigParserTest/groupconfig_unknownHeader_test.csv\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_BETA_GROUPS \u003d Arrays.asList("},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new FileType(\"Code\", Arrays.asList(\"**/*.java\", \"**/*.py\")),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new FileType(\"Docs\", Collections.singletonList(\"docs/**\")));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_DELTA_GROUPS \u003d Arrays.asList("},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new FileType(\"Main\", Collections.singletonList(\"src/main/**\")),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new FileType(\"Test\", Arrays.asList(\"src/test/**\", \"src/systest/**\")));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void groupConfig_invalidLocation_success() throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_INVALID_LOCATION_FILE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, groupConfigs.size());"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        GroupConfiguration actualConfig \u003d groupConfigs.get(0);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, actualConfig.getGroupsList().size());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void groupConfig_emptyLocation_success() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_EMPTY_LOCATION_FILE);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, groupConfigs.size());"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        GroupConfiguration actualReposenseConfig \u003d groupConfigs.get(0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, actualReposenseConfig.getGroupsList().size());"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        GroupConfiguration actualEmptyLocationConfig \u003d groupConfigs.get(1);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, actualEmptyLocationConfig.getGroupsList().size());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void groupConfig_multipleLocations_success() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_MULTI_LOCATION_FILE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, groupConfigs.size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        GroupConfiguration actualBetaConfig \u003d groupConfigs.get(0);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_LOCATION, actualBetaConfig.getLocation().toString());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_GROUPS, actualBetaConfig.getGroupsList());"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        GroupConfiguration actualDeltaConfig \u003d groupConfigs.get(1);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_DELTA_LOCATION, actualDeltaConfig.getLocation().toString());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_DELTA_GROUPS, actualDeltaConfig.getGroupsList());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void groupConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_DIFFERENT_COLUMN_ORDER_FILE);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, groupConfigs.size());"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        GroupConfiguration actualBetaConfig \u003d groupConfigs.get(0);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_LOCATION, actualBetaConfig.getLocation().toString());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_GROUPS, actualBetaConfig.getGroupsList());"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        GroupConfiguration actualDeltaConfig \u003d groupConfigs.get(1);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_DELTA_LOCATION, actualDeltaConfig.getLocation().toString());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_DELTA_GROUPS, actualDeltaConfig.getGroupsList());"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void groupConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_MISSING_OPTIONAL_HEADER_FILE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, groupConfigs.size());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Assert.assertEquals(3, groupConfigs.get(0).getGroupsList().size());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test (expected \u003d InvalidCsvException.class)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void groupConfig_missingMandatoryHeader_throwsInvalidCsvException() throws Exception {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser("},{"lineNumber":112,"author":{"gitId":"-"},"content":"                GROUP_CONFIG_MISSING_MANDATORY_HEADER_FILE);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        groupConfigCsvParser.parse();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":116,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    @Test (expected \u003d InvalidHeaderException.class)"},{"lineNumber":117,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void groupConfig_unknownHeader_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":118,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser("},{"lineNumber":119,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                GROUP_CONFIG_UNKNOWN_HEADER_FILE);"},{"lineNumber":120,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        groupConfigCsvParser.parse();"},{"lineNumber":121,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":9,"-":113}},{"path":"src/test/java/reposense/parser/RepoConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class RepoConfigParserTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Path TEST_CONFIG_FOLDER \u003d loadResource(RepoConfigParserTest.class, \"repoconfig_merge_test\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path TEST_EMPTY_BRANCH_CONFIG_FOLDER \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"repoconfig_empty_branch_test\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_noSpecialCharacter_test.csv\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_OVERRIDE_KEYWORD_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_overrideKeyword_test.csv\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_REDUNDANT_LINES_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/require_trailing_whitespaces/repoconfig_redundantLines_test.csv\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_INVALID_LOCATION_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_invalidLocation_test.csv\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_UNRECOGNIZED_VALUES_FOR_YES_KEYWORD_HEADERS_FILE \u003d"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_unrecognizedValuesForYesKeywordHeaders_test.csv\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DUPLICATE_HEADERS_CASE_SENSITIVE_FILE \u003d"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_duplicateHeadersCaseSensitive_test.csv\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DUPLICATE_HEADERS_CASE_INSENSITIVE_FILE \u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_duplicateHeadersCaseInsensitive_test.csv\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DIFFERENT_COLUMN_ORDER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_differentColumnOrder_test.csv\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_OPTIONAL_HEADER_MISSING_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_MANDATORY_HEADER_MISSING_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final Path MERGE_EMPTY_LOCATION_FOLDER \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_merge_empty_location_test\");"},{"lineNumber":55,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static final Path REPO_CONFIG_UNKNOWN_HEADER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":56,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            \"RepoConfigParserTest/repoconfig_unknownHeaders_test.csv\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_ZERO_VALID_RECORDS \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            \"CsvParserTest/repoconfig_zeroValidRecords_test.csv\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_MASTER_BRANCH \u003d \"master\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_ADD_CONFIG_JSON_BRANCH \u003d \"add-config-json\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_BRANCH \u003d \"HEAD\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_DELTA_FORMATS \u003d"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            FileType.convertFormatStringsToFileTypes(Arrays.asList(\"java\", \"fxml\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_BETA_CONFIG_FORMATS \u003d"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            FileType.convertFormatStringsToFileTypes(Arrays.asList(\"java\", \"adoc\", \"md\"));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e TEST_REPO_BETA_CONFIG_IGNORED_COMMITS \u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            Arrays.asList(\"abcde12345\", \"67890fdecba\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE_LOCATION \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE_BRANCH \u003d \"HEAD\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Arrays.asList(\"Zachary Tang\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Arrays.asList(\"collated**\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.java\", \"collated**\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.doc\", \"collated**\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void repoConfig_noSpecialCharacter_success() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Assert.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Assert.assertEquals(config.getIgnoreCommitList(),"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS));"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Assert.assertTrue(config.isShallowCloningPerformed());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isFormatsOverriding());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void merge_twoRepoConfigs_success() throws Exception {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setIgnoreGlobList(SECOND_AUTHOR_GLOB_LIST);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        expectedAuthors.add(FIRST_AUTHOR);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        expectedAuthors.add(SECOND_AUTHOR);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        RepoConfiguration firstRepo \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                TEST_REPO_BETA_MASTER_BRANCH);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorList(expectedAuthors);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        firstRepo.addAuthorDetailsToAuthorMapEntry(SECOND_AUTHOR,  Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        firstRepo.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RepoConfiguration secondRepo \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                TEST_REPO_BETA_ADD_CONFIG_JSON_BRANCH);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        secondRepo.setAuthorList(Arrays.asList(SECOND_AUTHOR));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        secondRepo.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        secondRepo.addAuthorDetailsToAuthorMapEntry(SECOND_AUTHOR,  Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        secondRepo.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(TEST_CONFIG_FOLDER).build();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, actualConfigs.size());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(firstRepo, actualConfigs.get(0));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(secondRepo, actualConfigs.get(1));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void merge_emptyLocation_success() throws Exception {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedBetaAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        expectedBetaAuthors.add(FIRST_AUTHOR);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedBetaAuthors.add(SECOND_AUTHOR);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedDeltaAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        expectedDeltaAuthors.add(FIRST_AUTHOR);"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedBetaConfig \u003d"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION), TEST_REPO_BETA_MASTER_BRANCH);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorList(expectedBetaAuthors);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        expectedBetaConfig.addAuthorDetailsToAuthorMapEntry(SECOND_AUTHOR,  Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedDeltaConfig \u003d"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA_LOCATION), TEST_REPO_DELTA_BRANCH);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setAuthorList(expectedDeltaAuthors);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setFormats(TEST_REPO_DELTA_FORMATS);"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e expectedConfigs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        expectedConfigs.add(expectedBetaConfig);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        expectedConfigs.add(expectedDeltaConfig);"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(MERGE_EMPTY_LOCATION_FOLDER).build();"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, actualConfigs.size());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedConfigs, actualConfigs);"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfigs.get(0), actualConfigs.get(0));"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfigs.get(1), actualConfigs.get(1));"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void repoConfig_defaultBranch_success() throws Exception {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                RepoConfiguration.DEFAULT_BRANCH);"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(TEST_EMPTY_BRANCH_CONFIG_FOLDER).build();"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, actualConfigs.size());"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedConfig.getBranch(), actualConfigs.get(0).getBranch());"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedConfig.getBranch(), authorConfigs.get(0).getBranch());"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public void repoConfig_overrideKeyword_success() throws Exception {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_OVERRIDE_KEYWORD_FILE);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isStandaloneConfigIgnored());"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        Assert.assertEquals(CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS),"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                config.getIgnoreCommitList());"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        Assert.assertTrue(config.isFormatsOverriding());"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Assert.assertTrue(config.isIgnoreGlobListOverriding());"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        Assert.assertTrue(config.isIgnoreCommitListOverriding());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    public void repoConfig_redundantLines_success() throws Exception {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_REDUNDANT_LINES_FILE);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"        Assert.assertEquals(3, configs.size());"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        RepoConfiguration betaConfig \u003d configs.get(0);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        RepoConfiguration charlieConfig \u003d configs.get(1);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        RepoConfiguration deltaConfig \u003d configs.get(2);"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), betaConfig.getLocation());"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, betaConfig.getBranch());"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_CHARLIE_LOCATION), charlieConfig.getLocation());"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_CHARLIE_BRANCH, charlieConfig.getBranch());"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_DELTA_LOCATION), deltaConfig.getLocation());"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_DELTA_BRANCH, deltaConfig.getBranch());"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        Assert.assertTrue(deltaConfig.isStandaloneConfigIgnored());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    public void repoConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_DIFFERENT_COLUMN_ORDER_FILE);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"        Assert.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"        Assert.assertEquals(config.getIgnoreCommitList(),"},{"lineNumber":273,"author":{"gitId":"-"},"content":"                CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS));"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isFormatsOverriding());"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    public void repoConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_OPTIONAL_HEADER_MISSING_FILE);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, configs.size());"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"        Assert.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"        Assert.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isFormatsOverriding());"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        Assert.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    public void repoConfig_withInvalidLocation_success() throws Exception {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_INVALID_LOCATION_FILE);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, configs.size());"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    public void repoConfig_withUnrecognizedValuesForYesKeywordHeaders_valuesIgnored() throws Exception {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":312,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_UNRECOGNIZED_VALUES_FOR_YES_KEYWORD_HEADERS_FILE);"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"        Assert.assertFalse(configs.get(0).isStandaloneConfigIgnored());"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        Assert.assertFalse(configs.get(0).isShallowCloningPerformed());"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        Assert.assertFalse(configs.get(0).isFindingPreviousAuthorsPerformed());"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"    @Test (expected \u003d InvalidCsvException.class)"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    public void repoConfig_mandatoryHeaderMissing_throwsInvalidCsvException() throws Exception {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_MANDATORY_HEADER_MISSING_FILE);"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        repoConfigCsvParser.parse();"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    @Test (expected \u003d InvalidCsvException.class)"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    public void repoConfig_zeroValidRecords_throwsInvalidCsvException() throws Exception {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_ZERO_VALID_RECORDS);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        repoConfigCsvParser.parse();"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"    @Test (expected \u003d InvalidCsvException.class)"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public void repoConfig_duplicateHeadersCaseSensitive_throwsInvalidCsvException() throws Exception {"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":335,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_DUPLICATE_HEADERS_CASE_SENSITIVE_FILE);"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        repoConfigCsvParser.parse();"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"    @Test (expected \u003d InvalidCsvException.class)"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    public void repoConfig_duplicateHeadersCaseInsensitive_throwsInvalidCsvException() throws Exception {"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":342,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_DUPLICATE_HEADERS_CASE_INSENSITIVE_FILE);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        repoConfigCsvParser.parse();"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":346,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    @Test (expected \u003d InvalidHeaderException.class)"},{"lineNumber":347,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void repoConfig_unknownHeaders_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":348,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":349,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_UNKNOWN_HEADER_FILE);"},{"lineNumber":350,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        repoConfigCsvParser.parse();"},{"lineNumber":351,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":9,"-":343}},{"path":"src/test/java/reposense/report/ErrorSummaryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":3,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import org.junit.Assert;"},{"lineNumber":4,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import reposense.parser.InvalidLocationException;"},{"lineNumber":8,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"public class ErrorSummaryTest {"},{"lineNumber":10,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void errorSummary_addRepeatedErrorMessage_containsNoDuplicates() {"},{"lineNumber":12,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        ErrorSummary.getInstance().clearErrorSet();"},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        String invalidLocation1 \u003d \"ftp://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":14,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        String invalidLocation2 \u003d \"tp://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":15,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        String validLocation \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":16,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":17,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            RepoLocation repoLocation1 \u003d new RepoLocation(invalidLocation1);"},{"lineNumber":19,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":20,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            // Ignore as it is not the purpose of this test"},{"lineNumber":21,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        Assert.assertEquals(1, ErrorSummary.getInstance().getErrorSet().size());"},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":24,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            RepoLocation repoLocation2 \u003d new RepoLocation(validLocation);"},{"lineNumber":26,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":27,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            // Ignore as it is not the purpose of this test"},{"lineNumber":28,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        Assert.assertEquals(1, ErrorSummary.getInstance().getErrorSet().size());"},{"lineNumber":30,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":31,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            RepoLocation repoLocation3 \u003d new RepoLocation(invalidLocation1);"},{"lineNumber":33,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":34,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            // Ignore as it is not the purpose of this test"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        Assert.assertEquals(1, ErrorSummary.getInstance().getErrorSet().size());"},{"lineNumber":37,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":38,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            RepoLocation repoLocation4 \u003d new RepoLocation(invalidLocation2);"},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":41,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            // Ignore as it is not the purpose of this test"},{"lineNumber":42,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        Assert.assertEquals(2, ErrorSummary.getInstance().getErrorSet().size());"},{"lineNumber":44,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":45,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            RepoLocation repoLocation5 \u003d new RepoLocation(invalidLocation2);"},{"lineNumber":47,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":48,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            // Ignore as it is not the purpose of this test"},{"lineNumber":49,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        Assert.assertEquals(2, ErrorSummary.getInstance().getErrorSet().size());"},{"lineNumber":51,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":52,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            RepoLocation repoLocation6 \u003d new RepoLocation(invalidLocation1);"},{"lineNumber":54,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":55,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            // Ignore as it is not the purpose of this test"},{"lineNumber":56,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        Assert.assertEquals(2, ErrorSummary.getInstance().getErrorSet().size());"},{"lineNumber":58,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":59}},{"path":"src/test/java/reposense/util/TestUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.net.URISyntaxException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Calendar;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.TimeZone;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.git.GitLog;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains testing related functionalities."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final int[] END_OF_DAY_TIME \u003d {23, 59, 59};"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final int[] START_OF_DAY_TIME \u003d {0, 0, 0};"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final ZoneId TIME_ZONE_ID \u003d getZoneId(\"Asia/Singapore\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COMPARING_FILES \u003d \"Comparing files %s \u0026 %s\\n\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINE_CONTENT_DIFFERENT \u003d \"Content different at line number %d:\\n\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"\u003c\u003c %s\\n\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"\u003e\u003e %s\\n\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINES_LENGTH_DIFFERENT \u003d \"The files\u0027 lines count do not match.\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String TAB_SPLITTER \u003d \"\\t\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String MOVED_FILE_INDICATION \u003d \"\u003d\u003e \";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final int STAT_FILE_PATH_INDEX \u003d 2;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns true if the files\u0027 contents are the same."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Also prints out error message if the lines count are different,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * else prints out the first line of content difference (if any)."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static boolean compareFileContents(Path expected, Path actual) throws Exception {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return compareFileContents(expected, actual, 1);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns true if the files\u0027 contents are the same."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Also prints out error message if the lines count are different,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * else prints out maximum {@code maxTraceCounts} lines of content difference (if any)."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static boolean compareFileContents(Path expected, Path actual, int maxTraceCounts) throws Exception {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        int traceCounts \u003d 0;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        System.out.println(String.format(MESSAGE_COMPARING_FILES, expected, actual));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String[] expectedContent \u003d new String(Files.readAllBytes(expected))"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .replace(\"\\r\", \"\").split(\"\\n\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String[] actualContent \u003d new String(Files.readAllBytes(actual))"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .replace(\"\\r\", \"\").split(\"\\n\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c Math.min(expectedContent.length, actualContent.length); i++) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            if (!expectedContent[i].equals(actualContent[i])) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                System.out.println("},{"lineNumber":68,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_LINE_CONTENT_DIFFERENT, i + 1, expectedContent[i], actualContent[i]));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                if (++traceCounts \u003e\u003d maxTraceCounts) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (expectedContent.length !\u003d actualContent.length) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            System.out.println(MESSAGE_LINES_LENGTH_DIFFERENT);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        } else if (traceCounts \u003e\u003d maxTraceCounts) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns true if {@code expected} directory has all files with same content as {@code actual} directory."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static boolean compareDirectories(Path expected, Path actual) throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e expectedPaths \u003d Files.walk(expected)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .sorted()"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e actualPaths \u003d Files.walk(actual)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .sorted()"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (expectedPaths.size() !\u003d actualPaths.size()) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedPaths.size(); i++) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            if (!(Files.isDirectory(expectedPaths.get(i)) || Files.isDirectory(actualPaths.get(i)))"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    \u0026\u0026 !TestUtil.compareFileContents(expectedPaths.get(i), actualPaths.get(i))) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Date} object with the specified {@code year}, {@code month}, {@code day}."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static Date getDate(int year, int month, int date, int[] time) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        cal.setTimeZone(TimeZone.getTimeZone(TIME_ZONE_ID));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        cal.set(Calendar.YEAR, year);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MONTH, month);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        cal.set(Calendar.DAY_OF_MONTH, date);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        cal.set(Calendar.HOUR_OF_DAY, time[0]);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MINUTE, time[1]);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        cal.set(Calendar.SECOND, time[2]);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MILLISECOND, 0);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Wrapper for {@code getDate} method to get since date with time 00:00:00"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public static Date getSinceDate(int year, int month, int date) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return getDate(year, month, date, START_OF_DAY_TIME);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Wrapper for {@code getDate} method to get until date with time 23:59:59"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static Date getUntilDate(int year, int month, int date) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return getDate(year, month, date, END_OF_DAY_TIME);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Date} object with the specified {@code year}, {@code month}, {@code day} that is not"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * dependent on the time zone of the current system, in cases where adjusting for the time zone is not necessary."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static Date getLocalDate(int year, int month, int date, int[] time) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        cal.set(Calendar.YEAR, year);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MONTH, month);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        cal.set(Calendar.DAY_OF_MONTH, date);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        cal.set(Calendar.HOUR_OF_DAY, time[0]);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MINUTE, time[1]);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        cal.set(Calendar.SECOND, time[2]);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MILLISECOND, 0);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Wrapper for {@code getLocalDate} method to get since date with time 00:00:00"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public static Date getLocalSinceDate(int year, int month, int date) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return getLocalDate(year, month, date, START_OF_DAY_TIME);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Wrapper for {@code getLocalDate} method to get until date with time 23:59:59"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public static Date getLocalUntilDate(int year, int month, int date) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return getLocalDate(year, month, date, END_OF_DAY_TIME);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Returns a {@code ZoneId} object for the specified {@code timezone}."},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public static ZoneId getZoneId(String timezone) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return ZoneId.of(timezone);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Compares attributes of {@code expectedRepoConfig} and {@code actualRepoConfig}."},{"lineNumber":176,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * @throws AssertionError if any attributes fail equality check."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public static void compareRepoConfig(RepoConfiguration expectedRepoConfig, RepoConfiguration actualRepoConfig) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedRepoConfig, actualRepoConfig);"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedRepoConfig.getAuthorList().size(); i++) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            compareAuthor(expectedRepoConfig.getAuthorList().get(i), actualRepoConfig.getAuthorList().get(i));"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Compares attributes of {@code expectedAuthor} and {@code actualAuthor}, with exception of it\u0027s display name."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * The display name is not compared as it varies with object construction."},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * It is a transient value and it is not needed for object matching."},{"lineNumber":192,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * @throws AssertionError if any attributes fail equality check."},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public static void compareAuthor(Author expectedAuthor, Author actualAuthor) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedAuthor.getGitId(), actualAuthor.getGitId());"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedAuthor.getIgnoreGlobList(), actualAuthor.getIgnoreGlobList());"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedAuthor.getAuthorAliases(), actualAuthor.getAuthorAliases());"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Returns true if the {@code expectedNumberCommits} is equal to the expected number of commits captured in"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * {@code gitLogResult}."},{"lineNumber":204,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public static boolean compareNumberExpectedCommitsToGitLogLines(int expectedNumberCommits, String gitLogResult) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // if git log result is empty, then there are no commits"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        if (gitLogResult.isEmpty()) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return expectedNumberCommits \u003d\u003d 0;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        // (actualSplitGitLogResilt - 1) as the 1st token is always empty."},{"lineNumber":212,"author":{"gitId":"-"},"content":"        return expectedNumberCommits \u003d\u003d (gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER).length - 1);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * Returns true if the {@code expectedNumberFilesChanged} is equal to the actual number of files changed in"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * {@code gitLogResult}."},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public static boolean compareNumberFilesChanged(int expectedNumberFilesChanged, String gitLogResult) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // if git log result is empty, then there are no files changed"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (gitLogResult.isEmpty()) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return expectedNumberFilesChanged \u003d\u003d 0;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        String[] changesLogged \u003d gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        HashSet\u003cString\u003e filesChanged \u003d new HashSet\u003c\u003e();"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        // start from index 1 as index 0 is always empty."},{"lineNumber":228,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c changesLogged.length; i++) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            filesChanged.addAll(getFilesChangedInCommit(changesLogged[i]));"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        return filesChanged.size() \u003d\u003d expectedNumberFilesChanged;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * Returns the {@code set} of files changed in the commit {@code rawCommitInfo}."},{"lineNumber":236,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    private static Set\u003cString\u003e getFilesChangedInCommit(String rawCommitInfo) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e filesChanged \u003d new HashSet\u003c\u003e();"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        String[] commitInfo \u003d rawCommitInfo.replaceAll(\"\\n+$\", \"\").split(\"\\n\");"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        int fileChangedNum \u003d Integer.parseInt(commitInfo[commitInfo.length - 1].trim().split(\" \")[0]);"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        for (int fileNum \u003d 0; fileNum \u003c fileChangedNum; fileNum++) {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            filesChanged.add(getFileChanged(commitInfo[commitInfo.length - 2 - fileNum]));"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        return filesChanged;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * Returns the file changed given a {@code rawFileChangedString}."},{"lineNumber":249,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    private static String getFileChanged(String rawFileChangedString) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        String fileChanged \u003d rawFileChangedString.split(TAB_SPLITTER)[STAT_FILE_PATH_INDEX].trim();"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        if (fileChanged.contains(MOVED_FILE_INDICATION)) {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            fileChanged \u003d fileChanged.substring(fileChanged.indexOf(MOVED_FILE_INDICATION)"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                    + MOVED_FILE_INDICATION.length());"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        return fileChanged;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * Returns true if the test environment is on Windows OS."},{"lineNumber":261,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    public static boolean isWindows() {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * Returns the path to a resource"},{"lineNumber":268,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static Path loadResource(Class\u003c?\u003e classForLoading, String pathToResource) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        ClassLoader classLoader \u003d classForLoading.getClassLoader();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        URL url \u003d classLoader.getResource(pathToResource);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        Path path \u003d null;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            path \u003d Paths.get(url.toURI());"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        } catch (URISyntaxException e) {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            System.out.println(\"URL format does not follow required standard\");"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":279}}]
