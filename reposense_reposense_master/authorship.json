[{"path":".github/workflows/delete-deploy.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"name: Delete deployments for closed pull requests"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":""},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"on:"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"  pull_request_target:"},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"    branches-ignore:"},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"      - gh-pages"},{"lineNumber":7,"author":{"gitId":"gok99"},"content":"    types: [closed]"},{"lineNumber":8,"author":{"gitId":"gok99"},"content":""},{"lineNumber":9,"author":{"gitId":"gok99"},"content":"jobs:"},{"lineNumber":10,"author":{"gitId":"gok99"},"content":"  delete:"},{"lineNumber":11,"author":{"gitId":"gok99"},"content":"    name: Delete pull request deployments"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":"    runs-on: ubuntu-latest"},{"lineNumber":13,"author":{"gitId":"gok99"},"content":"    env:"},{"lineNumber":14,"author":{"gitId":"gok99"},"content":"      ACTIONS_PULL_REQUEST_HEAD: ${{ github.event.pull_request.head.sha }}"},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"      ACTIONS_PULL_REQUEST_NUMBER: ${{ github.event.number }}"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":"      GITHUB_TOKEN: ${{ github.token }}"},{"lineNumber":17,"author":{"gitId":"gok99"},"content":""},{"lineNumber":18,"author":{"gitId":"gok99"},"content":"    steps:"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":"    - name: Checkout repository"},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/checkout@v3"},{"lineNumber":21,"author":{"gitId":"gok99"},"content":""},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"    - name: Delete deployments"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"      run: ./config/gh-actions/delete-deploy.sh"}],"authorContributionMap":{"yhtMinceraft1010X":1,"gok99":22}},{"path":".github/workflows/gh-pages.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# This workflow executes the various RepoSense tests"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"name: GitHub Pages"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"on:"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  push:"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    branches:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      - master"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"jobs:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  deploy-gh-pages:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    name: Deploy MarkBind to GitHub Pages"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    runs-on: ubuntu-latest"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    env:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      NODE_VERSION: \"lts/*\""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/checkout@v3"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"        node-version: \u002714.x\u0027"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    - name: Set up Node caching"},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        path: ~/.npm"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        key: ${{ runner.os }}-node-${{ hashFiles(\u0027**/package-lock.json\u0027) }}"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          ${{ runner.os }}-node-"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    - name: Install MarkBind CLI"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      run: npm i -g markbind-cli"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    - name: Build MarkBind website"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      run: cd docs \u0026\u0026 markbind build --baseUrl /RepoSense"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    - name: Deploy to GitHub Pages"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      if: success()"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      uses: crazy-max/ghaction-github-pages@v2"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        target_branch: gh-pages"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        build_dir: docs/_site"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        keep_history: true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      env:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}"}],"authorContributionMap":{"yhtMinceraft1010X":4,"-":44}},{"path":".github/workflows/integration.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# This workflow executes the various RepoSense tests"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"name: Continuous Integration"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"on:"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  push:"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    branches-ignore:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      - gh-pages"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  pull_request:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    branches-ignore:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"      - gh-pages"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"jobs:"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  ubuntu:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    name: ${{ matrix.os }} JDK 8"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    strategy:"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      matrix:"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        os: [ubuntu-18.04, ubuntu-20.04]"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    runs-on: ${{ matrix.os }}"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    env:"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      NODE_VERSION: \"lts/*\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/checkout@v3"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        fetch-depth: 0"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    - name: Set up JDK 1.8"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-java@v3"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"        distribution: \u0027zulu\u0027"},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"        java-version: 8"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    - name: Verify Java version"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      run: echo -e \"Actual JDK in use -- \"; java -version"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"        node-version: \u002714.x\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    - name: Set up Gradle caching"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        path: |"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          ~/.gradle/caches"},{"lineNumber":48,"author":{"gitId":"-"},"content":"          ~/.gradle/wrapper"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        key: ${{ matrix.os }}-gradle-${{ hashFiles(\u0027**/*.gradle*\u0027) }}"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          ${{ matrix.os }}-gradle-"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    - name: Set up Node caching"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        path: ~/.npm"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        key: ${{ matrix.os }}-node-${{ hashFiles(\u0027**/package-lock.json\u0027) }}"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":59,"author":{"gitId":"-"},"content":"          ${{ matrix.os }}-node-"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    - name: Grant execute permission for gradlew"},{"lineNumber":62,"author":{"gitId":"-"},"content":"      run: chmod +x gradlew"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    - name: Run environmental checks"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/run-checks.sh"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    - name: Run linter"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      run: ./gradlew lintFrontend"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    - name: Build with Gradle"},{"lineNumber":71,"author":{"gitId":"gok99"},"content":"      run: ./gradlew clean checkstyleAll test systemTest coverage"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    - name: Run code coverage"},{"lineNumber":74,"author":{"gitId":"-"},"content":"      if: ${{ success() \u0026\u0026 matrix.os \u003d\u003d \u0027ubuntu-20.04\u0027 }}"},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: codecov/codecov-action@v3"},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"      with:"},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":"        directory: ${{ github.workspace }}/build/reports/jacoco/coverage"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"        files: coverage.xml"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"        fail_ci_if_error: true"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    - name: Build preview website (pull request)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"      if: ${{ success() \u0026\u0026 github.event_name \u003d\u003d \u0027pull_request\u0027 \u0026\u0026 matrix.os \u003d\u003d \u0027ubuntu-20.04\u0027 }}"},{"lineNumber":83,"author":{"gitId":"-"},"content":"      run: |"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        git fetch --all \u0026\u0026 git config --global user.email \"-\" \u0026\u0026 git config --global user.name \"-\" \u0026\u0026 ./gradlew run -Dargs\u003d\"--since d1\""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        npm install -g markbind-cli"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        (cd docs \u0026\u0026 markbind build)"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    - name: Save PR number and HEAD commit (pull request)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"      if: ${{ success() \u0026\u0026 github.event_name \u003d\u003d \u0027pull_request\u0027 \u0026\u0026 matrix.os \u003d\u003d \u0027ubuntu-20.04\u0027 }}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"      run: |"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        mkdir -p ./pr"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        echo ${{ github.event.number }} \u003e ./pr/NUMBER"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        echo ${{ github.event.pull_request.head.sha }} \u003e ./pr/SHA"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    - name: Upload artifacts (pull request)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"      if: ${{ success() \u0026\u0026 github.event_name \u003d\u003d \u0027pull_request\u0027 \u0026\u0026 matrix.os \u003d\u003d \u0027ubuntu-20.04\u0027 }}"},{"lineNumber":97,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/upload-artifact@v3"},{"lineNumber":98,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        name: reposense-deployment"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        path: |"},{"lineNumber":101,"author":{"gitId":"-"},"content":"          ./reposense-report"},{"lineNumber":102,"author":{"gitId":"-"},"content":"          ./docs/_site"},{"lineNumber":103,"author":{"gitId":"-"},"content":"          ./pr"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"  macos:"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    name: ${{ matrix.os }} JDK 8"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    strategy:"},{"lineNumber":108,"author":{"gitId":"-"},"content":"      matrix:"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        os: [macos-10.15, macos-11]"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    runs-on: ${{ matrix.os }}"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    env:"},{"lineNumber":112,"author":{"gitId":"-"},"content":"      HOMEBREW_NO_AUTO_UPDATE: 1 # Prevent time-consuming brew update"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/checkout@v3"},{"lineNumber":117,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        fetch-depth: 0"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    - name: Set up JDK 1.8"},{"lineNumber":121,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-java@v3"},{"lineNumber":122,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":123,"author":{"gitId":"yhtMinceraft1010X"},"content":"        distribution: \u0027zulu\u0027"},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":"        java-version: 8"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    - name: Verify Java version"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      run: echo -e \"Actual JDK in use -- \"; java -version"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":130,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":132,"author":{"gitId":"yhtMinceraft1010X"},"content":"        node-version: \u002714.x\u0027"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    - name: Set up Gradle caching"},{"lineNumber":135,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        path: |"},{"lineNumber":138,"author":{"gitId":"-"},"content":"          ~/.gradle/caches"},{"lineNumber":139,"author":{"gitId":"-"},"content":"          ~/.gradle/wrapper"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        key: ${{ matrix.os }}-gradle-${{ hashFiles(\u0027**/*.gradle*\u0027) }}"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":142,"author":{"gitId":"-"},"content":"          ${{ matrix.os }}-gradle-"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    - name: Set up Node caching"},{"lineNumber":145,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":146,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        path: ~/.npm"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        key: ${{ matrix.os }}-node-${{ hashFiles(\u0027**/package-lock.json\u0027) }}"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":150,"author":{"gitId":"-"},"content":"          ${{ matrix.os }}-node-"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    - name: Grant execute permission for gradlew"},{"lineNumber":153,"author":{"gitId":"-"},"content":"      run: chmod +x gradlew"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    - name: Run environmental checks"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/run-checks.sh"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    - name: Run linter"},{"lineNumber":159,"author":{"gitId":"-"},"content":"      run: ./gradlew lintFrontend"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    - name: Build with Gradle"},{"lineNumber":162,"author":{"gitId":"gok99"},"content":"      run: ./gradlew clean checkstyleAll test systemTest coverage"},{"lineNumber":163,"author":{"gitId":"gok99"},"content":""},{"lineNumber":164,"author":{"gitId":"yhtMinceraft1010X"},"content":"    - name: Run code coverage"},{"lineNumber":165,"author":{"gitId":"yhtMinceraft1010X"},"content":"      if: ${{ success() \u0026\u0026 matrix.os \u003d\u003d \u0027macos-11\u0027 }}"},{"lineNumber":166,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: codecov/codecov-action@v3"},{"lineNumber":167,"author":{"gitId":"yhtMinceraft1010X"},"content":"      with:"},{"lineNumber":168,"author":{"gitId":"yhtMinceraft1010X"},"content":"        directory: ${{ github.workspace }}/build/reports/jacoco/coverage"},{"lineNumber":169,"author":{"gitId":"yhtMinceraft1010X"},"content":"        files: coverage.xml"},{"lineNumber":170,"author":{"gitId":"yhtMinceraft1010X"},"content":"        fail_ci_if_error: true"},{"lineNumber":171,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":172,"author":{"gitId":"gok99"},"content":"  windows:"},{"lineNumber":173,"author":{"gitId":"gok99"},"content":"    name: ${{ matrix.os }} JDK 8"},{"lineNumber":174,"author":{"gitId":"gok99"},"content":"    strategy:"},{"lineNumber":175,"author":{"gitId":"gok99"},"content":"      matrix:"},{"lineNumber":176,"author":{"gitId":"gok99"},"content":"        os: [windows-2022, windows-2019]"},{"lineNumber":177,"author":{"gitId":"gok99"},"content":"    runs-on: ${{ matrix.os }}"},{"lineNumber":178,"author":{"gitId":"gok99"},"content":"    steps:"},{"lineNumber":179,"author":{"gitId":"gok99"},"content":"    - name: Checkout repository"},{"lineNumber":180,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/checkout@v3"},{"lineNumber":181,"author":{"gitId":"gok99"},"content":"      with:"},{"lineNumber":182,"author":{"gitId":"gok99"},"content":"        fetch-depth: 0"},{"lineNumber":183,"author":{"gitId":"gok99"},"content":""},{"lineNumber":184,"author":{"gitId":"gok99"},"content":"    - name: Set up JDK 1.8"},{"lineNumber":185,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-java@v3"},{"lineNumber":186,"author":{"gitId":"gok99"},"content":"      with:"},{"lineNumber":187,"author":{"gitId":"yhtMinceraft1010X"},"content":"        distribution: \u0027zulu\u0027"},{"lineNumber":188,"author":{"gitId":"yhtMinceraft1010X"},"content":"        java-version: 8"},{"lineNumber":189,"author":{"gitId":"gok99"},"content":""},{"lineNumber":190,"author":{"gitId":"gok99"},"content":"    - name: Verify Java version"},{"lineNumber":191,"author":{"gitId":"gok99"},"content":"      run: Write-Output \"Actual JDK in use -- \"; java -version"},{"lineNumber":192,"author":{"gitId":"gok99"},"content":""},{"lineNumber":193,"author":{"gitId":"gok99"},"content":"    - name: Set up Node.js"},{"lineNumber":194,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":195,"author":{"gitId":"gok99"},"content":"      with:"},{"lineNumber":196,"author":{"gitId":"gok99"},"content":"        node-version: \u002714.x\u0027"},{"lineNumber":197,"author":{"gitId":"gok99"},"content":""},{"lineNumber":198,"author":{"gitId":"gok99"},"content":"    - name: Set up Gradle caching"},{"lineNumber":199,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":200,"author":{"gitId":"gok99"},"content":"      with:"},{"lineNumber":201,"author":{"gitId":"gok99"},"content":"        path: |"},{"lineNumber":202,"author":{"gitId":"gok99"},"content":"          $HOME/.gradle/caches"},{"lineNumber":203,"author":{"gitId":"gok99"},"content":"          $HOME/.gradle/wrapper"},{"lineNumber":204,"author":{"gitId":"gok99"},"content":"        key: ${{ matrix.os }}-gradle-${{ hashFiles(\u0027**/*.gradle*\u0027) }}"},{"lineNumber":205,"author":{"gitId":"gok99"},"content":"        restore-keys: |"},{"lineNumber":206,"author":{"gitId":"gok99"},"content":"          ${{ matrix.os }}-gradle-"},{"lineNumber":207,"author":{"gitId":"gok99"},"content":""},{"lineNumber":208,"author":{"gitId":"gok99"},"content":"    - name: Set up Node caching"},{"lineNumber":209,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":210,"author":{"gitId":"gok99"},"content":"      with:"},{"lineNumber":211,"author":{"gitId":"gok99"},"content":"        path: $HOME/.npm"},{"lineNumber":212,"author":{"gitId":"gok99"},"content":"        key: ${{ matrix.os }}-node-${{ hashFiles(\u0027**/package-lock.json\u0027) }}"},{"lineNumber":213,"author":{"gitId":"gok99"},"content":"        restore-keys: |"},{"lineNumber":214,"author":{"gitId":"gok99"},"content":"          ${{ matrix.os }}-node-"},{"lineNumber":215,"author":{"gitId":"gok99"},"content":""},{"lineNumber":216,"author":{"gitId":"gok99"},"content":"    - name: Run linter"},{"lineNumber":217,"author":{"gitId":"gok99"},"content":"      run: ./gradlew lintFrontend"},{"lineNumber":218,"author":{"gitId":"gok99"},"content":""},{"lineNumber":219,"author":{"gitId":"gok99"},"content":"    - name: Build with Gradle"},{"lineNumber":220,"author":{"gitId":"gok99"},"content":"      run: ./gradlew clean checkstyleAll test systemTest coverage"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"yhtMinceraft1010X"},"content":"    - name: Run code coverage"},{"lineNumber":223,"author":{"gitId":"yhtMinceraft1010X"},"content":"      if: ${{ success() \u0026\u0026 matrix.os \u003d\u003d \u0027windows-2022\u0027 }}"},{"lineNumber":224,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: codecov/codecov-action@v3"},{"lineNumber":225,"author":{"gitId":"yhtMinceraft1010X"},"content":"      with:"},{"lineNumber":226,"author":{"gitId":"yhtMinceraft1010X"},"content":"        directory: ${{ github.workspace }}/build/reports/jacoco/coverage"},{"lineNumber":227,"author":{"gitId":"yhtMinceraft1010X"},"content":"        files: coverage.xml"},{"lineNumber":228,"author":{"gitId":"yhtMinceraft1010X"},"content":"        fail_ci_if_error: true"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"  cypress:"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    name: Cypress frontend tests"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    runs-on: ubuntu-18.04"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":236,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/checkout@v3"},{"lineNumber":237,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        fetch-depth: 0"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    - name: Set up JDK 1.8"},{"lineNumber":241,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-java@v3"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":243,"author":{"gitId":"yhtMinceraft1010X"},"content":"        distribution: \u0027zulu\u0027"},{"lineNumber":244,"author":{"gitId":"yhtMinceraft1010X"},"content":"        java-version: 8"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    - name: Verify Java version"},{"lineNumber":247,"author":{"gitId":"-"},"content":"      run: echo -e \"Actual JDK in use -- \"; java -version"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":250,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":251,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":252,"author":{"gitId":"yhtMinceraft1010X"},"content":"        node-version: \u002714.x\u0027"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"    - name: Set up Gradle caching"},{"lineNumber":255,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":256,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        path: |"},{"lineNumber":258,"author":{"gitId":"-"},"content":"          ~/.gradle/caches"},{"lineNumber":259,"author":{"gitId":"-"},"content":"          ~/.gradle/wrapper"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        key: ${{ runner.os }}-gradle-${{ hashFiles(\u0027**/*.gradle*\u0027) }}"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":262,"author":{"gitId":"-"},"content":"          ${{ runner.os }}-gradle-"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"    - name: Set up Node caching"},{"lineNumber":265,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/cache@v3"},{"lineNumber":266,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        path: ~/.npm"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        key: ${{ runner.os }}-node-${{ hashFiles(\u0027**/package-lock.json\u0027) }}"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        restore-keys: |"},{"lineNumber":270,"author":{"gitId":"-"},"content":"          ${{ runner.os }}-node-"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"    - name: Grant execute permission for gradlew"},{"lineNumber":273,"author":{"gitId":"-"},"content":"      run: chmod +x gradlew"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    - name: Set up environment"},{"lineNumber":276,"author":{"gitId":"-"},"content":"      run: sudo apt-get install -y libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"    - name: Run frontend tests"},{"lineNumber":279,"author":{"gitId":"-"},"content":"      run: ./gradlew frontendTest -Pci"}],"authorContributionMap":{"yhtMinceraft1010X":52,"gok99":45,"-":182}},{"path":".github/workflows/pending.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# This workflow marks a deployment to surge.sh as pending"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"name: Surge.sh pending build"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"on:"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  pull_request_target:"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    branches-ignore:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      - gh-pages"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"jobs:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  deploy:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    name: Deployment status"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    runs-on: ubuntu-latest"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    env:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      ACTIONS_PULL_REQUEST_HEAD: ${{ github.event.pull_request.head.sha }}"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      ACTIONS_PULL_REQUEST_NUMBER: ${{ github.event.number }}"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      GITHUB_TOKEN: ${{ github.token }}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/checkout@v3"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    - name: Update PR checklist for surge.sh as pending"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      run: |"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        mkdir -p ./pr"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        ./config/gh-actions/deploy.sh pending"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    - name: Upload artifacts"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      if: ${{ success() }}"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/upload-artifact@v3"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        name: reposense-deployment-id"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        path: ./pr"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    - name: Update PR checklist for surge.sh as failure"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      if: ${{ failure() }}"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/deploy.sh failure"}],"authorContributionMap":{"yhtMinceraft1010X":2,"-":35}},{"path":".github/workflows/stale.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"name: Close Stale Pull Requests"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"on:"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  schedule:"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  # Runs every day at 00:00 UTC"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  - cron: \u00270 0 * * *\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"jobs:"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  stale:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    runs-on: ubuntu-latest"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"    - uses: actions/stale@v5"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        repo-token: ${{ secrets.GITHUB_TOKEN }}"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        days-before-stale: -1"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        days-before-close: -1"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        days-before-pr-stale: 30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        days-before-pr-close: 7"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        exempt-pr-labels: \u0027s.DoNotMerge\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        remove-stale-when-updated: true"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        stale-pr-label: \u0027Stale\u0027"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        stale-pr-message: |"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          Hi,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          We are going to mark this PR as stale because it has been inactive for the past 30 days."},{"lineNumber":26,"author":{"gitId":"-"},"content":"          If no further activity occurs within the following 7 days, it will be automatically closed so that others can take up the issue."},{"lineNumber":27,"author":{"gitId":"-"},"content":"          If you are still working on this PR, please make a follow-up commit within 7 days and leave a comment to remove the stale label."},{"lineNumber":28,"author":{"gitId":"-"},"content":"          Do let us know if you are stuck so that we can help you!\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        close-pr-message: |"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          This PR was closed because it has been marked as stale for 7 days with no activity."},{"lineNumber":31,"author":{"gitId":"-"},"content":"          Feel free to reopen this PR if you would like to continue working on it."}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":30}},{"path":".github/workflows/surge.yml","fileType":"yml","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# This workflow deploys a RepoSense report and the MarkBind documentation"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# website to surge.sh in a secure manner for pull requests"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"name: Surge.sh build preview"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"on:"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  workflow_run:"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    workflows: [\"Continuous Integration\"]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    types:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      - completed"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"jobs:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  deploy:"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    name: Deploy to surge.sh"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    runs-on: ubuntu-latest"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    if: ${{ github.event.workflow_run.event \u003d\u003d \u0027pull_request\u0027 \u0026\u0026 github.event.workflow_run.conclusion \u003d\u003d \u0027success\u0027 }}"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    env:"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      NODE_VERSION: \"lts/*\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"      GITHUB_TOKEN: ${{ github.token }}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    steps:"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    - name: Checkout repository"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/checkout@v3"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    - name: Set up Node.js"},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"      uses: actions/setup-node@v3"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"        node-version: \u002714.x\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    - name: Download deployment artifacts"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      uses: dawidd6/action-download-artifact@v2"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        workflow: integration.yml"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        run_id: ${{ github.event.workflow_run.id }}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        name: reposense-deployment"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        path: ."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    - name: Extract PR number"},{"lineNumber":39,"author":{"gitId":"-"},"content":"      id: pr-number"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      run: echo \u0027::set-output name\u003dACTIONS_PR_NUMBER::\u0027$(cat ./pr/NUMBER)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    - name: Download deployment status artifacts"},{"lineNumber":43,"author":{"gitId":"-"},"content":"      uses: dawidd6/action-download-artifact@v2"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      with:"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        workflow: pending.yml"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        pr: ${{ steps.pr-number.outputs.ACTIONS_PR_NUMBER }}"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        workflow_conclusion: success"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        name: reposense-deployment-id"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        path: ./pr"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    - name: Update PR checklist for surge.sh as in progress"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      if: ${{ success() }}"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/deploy.sh in_progress"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    - name: Install surge"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      if: ${{ success() }}"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      run: npm install -g surge"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    - name: Deploy to surge.sh"},{"lineNumber":60,"author":{"gitId":"-"},"content":"      if: ${{ success() }}"},{"lineNumber":61,"author":{"gitId":"-"},"content":"      env:"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/deploy.sh success"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    - name: Update PR checklist for surge.sh as failure"},{"lineNumber":67,"author":{"gitId":"-"},"content":"      if: ${{ failure() }}"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      run: ./config/gh-actions/deploy.sh failure"}],"authorContributionMap":{"yhtMinceraft1010X":3,"-":65}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027idea\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027"},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"    id \u0027com.liferay.node\u0027 version \u00277.2.18\u0027"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"    id \u0027com.github.psxpaul.execfork\u0027 version \u00270.2.0\u0027"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"    id \u0027com.palantir.git-version\u0027 version \u00270.13.0\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"OperatingSystem os \u003d DefaultNativePlatform.currentOperatingSystem;"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027reposense.RepoSense\u0027"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"node.nodeVersion \u003d \u002714.19.0\u0027"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_1_8"},{"lineNumber":22,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_1_8"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"configurations {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    systemtestImplementation.extendsFrom testImplementation"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    systemtestRuntime.extendsFrom testRuntime"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"    String jUnitVersion \u003d \u00275.8.2\u0027"},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"    implementation  group: \u0027com.google.code.gson\u0027 ,name: \u0027gson\u0027, version:\u00272.9.0\u0027"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"    implementation  group: \u0027net.freeutils\u0027, name: \u0027jlhttp\u0027, version: \u00272.6\u0027"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"    implementation  group: \u0027net.sourceforge.argparse4j\u0027, name: \u0027argparse4j\u0027, version: \u00270.9.0\u0027"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"    implementation  group: \u0027org.apache.ant\u0027, name: \u0027ant\u0027, version: \u00271.10.12\u0027"},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"    implementation  group: \u0027org.apache.commons\u0027, name: \u0027commons-csv\u0027, version: \u00271.9.0\u0027"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    implementation  group: \u0027org.apache.commons\u0027, name: \u0027commons-text\u0027, version: \u00271.9\u0027"},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"    implementation  group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00272.4.0\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"sourceSets {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    systemtest {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        compileClasspath +\u003d main.output + test.output"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        runtimeClasspath +\u003d main.output + test.output"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        java.srcDir file(\u0027src/systemtest/java\u0027)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        resources.srcDir file(\u0027src/systemtest/resources\u0027)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"wrapper {"},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"    gradleVersion \u003d \u00277.4.2\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"def installFrontend \u003d tasks.register(\u0027installFrontend\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"    args \u003d [\u0027install\u0027]"},{"lineNumber":63,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":64,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":65,"author":{"gitId":"yhtMinceraft1010X"},"content":"def buildFrontend \u003d tasks.register(\u0027buildFrontend\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn installFrontend"},{"lineNumber":67,"author":{"gitId":"yhtMinceraft1010X"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":68,"author":{"gitId":"yhtMinceraft1010X"},"content":"    args \u003d [\u0027run\u0027, \u0027devbuild\u0027]"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"def zipReport \u003d tasks.register(\u0027zipReport\u0027, Zip) {"},{"lineNumber":72,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn buildFrontend"},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":"    from \u0027frontend/build/\u0027"},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":"    archiveBaseName \u003d \u0027templateZip\u0027"},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"    destinationDirectory \u003d file(\u0027src/main/resources\u0027)"},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"def compileJava \u003d tasks.compileJava"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"def classes \u003d tasks.classes"},{"lineNumber":80,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":81,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.named(\"processSystemtestResources\").configure {"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"    duplicatesStrategy \u003d DuplicatesStrategy.INCLUDE"},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":84,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.run.dependsOn(zipReport);"},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    //the second arguments indicates the default value associated with the property."},{"lineNumber":89,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.compileJava.mustRunAfter(zipReport)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    args System.getProperty(\u0027args\u0027, \u0027\u0027).split()"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    systemProperty \"version\", getRepoSenseVersion()"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":95,"author":{"gitId":"yhtMinceraft1010X"},"content":"    toolVersion \u003d \u00279.3\u0027"},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"    getConfigDirectory().set(file(\"$rootProject.projectDir/config/checkstyle\"))"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"idea {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    module {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        sourceSets.systemtest.allSource.srcDirs.each { srcDir -\u003e module.testSourceDirs +\u003d srcDir }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    environment(\"REPOSENSE_ENVIRONMENT\", \"TEST\")"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d true"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    doFirst {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"yhtMinceraft1010X"},"content":"    useJUnitPlatform()"},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    doLast {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.shadowJar.dependsOn(zipReport);"},{"lineNumber":125,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":127,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.compileJava.mustRunAfter(zipReport)"},{"lineNumber":128,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.processResources.mustRunAfter(zipReport)"},{"lineNumber":129,"author":{"gitId":"yhtMinceraft1010X"},"content":"    archiveFileName \u003d \u0027RepoSense.jar\u0027"},{"lineNumber":130,"author":{"gitId":"yhtMinceraft1010X"},"content":"    destinationDirectory \u003d file(\"${buildDir}/jar/\")"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    manifest {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        attributes \u0027Implementation-Version\u0027: getRepoSenseVersion()"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.register(\u0027lintFrontend\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn installFrontend"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    args \u003d [\u0027run\u0027, \u0027lint\u0027]"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"yhtMinceraft1010X"},"content":"def checkstyleMain \u003d tasks.checkstyleMain"},{"lineNumber":144,"author":{"gitId":"yhtMinceraft1010X"},"content":"def checkstyleTest \u003d tasks.checkstyleTest"},{"lineNumber":145,"author":{"gitId":"yhtMinceraft1010X"},"content":"def checkstyleSystemtest \u003d tasks.checkstyleSystemtest"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.register(\u0027checkstyleAll\u0027, Checkstyle) {"},{"lineNumber":148,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn checkstyleMain, checkstyleTest, checkstyleSystemtest"},{"lineNumber":149,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.checkstyleTest.mustRunAfter(\u0027checkstyleMain\u0027)"},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.checkstyleSystemtest.mustRunAfter(\u0027checkstyleTest\u0027)"},{"lineNumber":151,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.register(\u0027systemtest\u0027, Test) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    testClassesDirs \u003d sourceSets.systemtest.output.classesDirs"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    classpath \u003d sourceSets.systemtest.runtimeClasspath"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    environment(\"REPOSENSE_ENVIRONMENT\", \"TEST\")"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d true"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    doFirst {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"yhtMinceraft1010X"},"content":"    useJUnitPlatform()"},{"lineNumber":168,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    doLast {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        deleteReposAddressDirectory()"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"yhtMinceraft1010X"},"content":"def serveTestReportInBackground \u003d tasks.register(\u0027serveTestReportInBackground\u0027, com.github.psxpaul.task.JavaExecFork) {"},{"lineNumber":175,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn zipReport, compileJava, processResources, classes"},{"lineNumber":176,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.compileJava.mustRunAfter(zipReport)"},{"lineNumber":177,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.processResources.mustRunAfter(zipReport)"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    main \u003d mainClassName"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    classpath \u003d sourceSets.main.runtimeClasspath"},{"lineNumber":180,"author":{"gitId":"gok99"},"content":"    args \u003d [\u0027--config\u0027, \u0027./frontend/cypress/config\u0027, \u0027--since\u0027, \u0027d1\u0027, \u0027--view\u0027]"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    String versionJvmArgs \u003d \u0027-Dversion\u003d\u0027 + getRepoSenseVersion()"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    jvmArgs \u003d [ versionJvmArgs ]"},{"lineNumber":183,"author":{"gitId":"yhtMinceraft1010X"},"content":"    killDescendants \u003d false // Kills descendants of started process using methods only found in Java 9 and beyond."},{"lineNumber":184,"author":{"gitId":"yhtMinceraft1010X"},"content":"    // Above flag is set to true by default but is incompatible with Java 8. It should be removed from this file if we fully migrate to Java 11."},{"lineNumber":185,"author":{"gitId":"-"},"content":"    waitForPort \u003d 9000"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"yhtMinceraft1010X"},"content":"def installCypress \u003d tasks.register(\u0027installCypress\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/cypress/\u0027"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    args \u003d [\u0027install\u0027]"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.register(\u0027cypress\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":194,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn installCypress, serveTestReportInBackground"},{"lineNumber":195,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.serveTestReportInBackground.mustRunAfter(installCypress)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    workingDir \u003d file(\u0027frontend/cypress/\u0027)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    args \u003d [\"run-script\", \"debug\"]"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.register(\u0027frontendTest\u0027, com.liferay.gradle.plugins.node.tasks.ExecutePackageManagerTask) {"},{"lineNumber":202,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn installCypress, serveTestReportInBackground"},{"lineNumber":203,"author":{"gitId":"yhtMinceraft1010X"},"content":"    tasks.serveTestReportInBackground.mustRunAfter(installCypress)"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    workingDir \u003d file(\u0027frontend/cypress/\u0027)"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    args \u003d [\"run-script\", \"tests\"]"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    // Run tests in CI without slow motion"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    if (project.hasProperty(\u0027ci\u0027)) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        args \u003d [\"run-script\", \"ci\"]"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"tasks.withType(Copy) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    includeEmptyDirs \u003d true"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"yhtMinceraft1010X"},"content":"jacoco {"},{"lineNumber":219,"author":{"gitId":"yhtMinceraft1010X"},"content":"    toolVersion \u003d \"0.8.7\""},{"lineNumber":220,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":221,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":222,"author":{"gitId":"yhtMinceraft1010X"},"content":"jacocoTestReport {"},{"lineNumber":223,"author":{"gitId":"yhtMinceraft1010X"},"content":"    reports {"},{"lineNumber":224,"author":{"gitId":"yhtMinceraft1010X"},"content":"        html.required \u003d true"},{"lineNumber":225,"author":{"gitId":"yhtMinceraft1010X"},"content":"        xml.required \u003d true"},{"lineNumber":226,"author":{"gitId":"yhtMinceraft1010X"},"content":"        csv.required \u003d false"},{"lineNumber":227,"author":{"gitId":"yhtMinceraft1010X"},"content":"        html.destination file(\"${buildDir}/jacocoHtml\")"},{"lineNumber":228,"author":{"gitId":"yhtMinceraft1010X"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":230,"author":{"gitId":"yhtMinceraft1010X"},"content":"    executionData systemtest, frontendTest"},{"lineNumber":231,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":232,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":233,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.register(\u0027coverage\u0027, JacocoReport)"},{"lineNumber":234,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":235,"author":{"gitId":"yhtMinceraft1010X"},"content":"coverage.configure {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":247,"author":{"gitId":"yhtMinceraft1010X"},"content":"        html.required \u003d true"},{"lineNumber":248,"author":{"gitId":"yhtMinceraft1010X"},"content":"        xml.required \u003d true"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":"}"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"String getRepoSenseVersion() {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    String repoSenseVersion \u003d project.property(\"version\")"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    if (repoSenseVersion.equals(\"unspecified\")) {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        repoSenseVersion \u003d versionDetails().commitDistance \u003d\u003d 0 ? versionDetails().lastTag : versionDetails().gitHash"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    return repoSenseVersion"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"yhtMinceraft1010X"},"content":"def syncFrontendPublic \u003d tasks.register(\u0027syncFrontendPublic\u0027, Sync) {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    from \u0027reposense-report\u0027"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    into \u0027frontend/public/\u0027"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    include \u0027**/*.json\u0027"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    includeEmptyDirs \u003d false"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    preserve {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        include \u0027index.html\u0027"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        include \u0027favicon.ico\u0027"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"-"},"content":"}"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"yhtMinceraft1010X"},"content":"def macHotReloadFrontend \u003d tasks.register(\u0027macHotReloadFrontend\u0027, Exec) {"},{"lineNumber":272,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn installFrontend"},{"lineNumber":273,"author":{"gitId":"gok99"},"content":"    onlyIf {os.isMacOsX()}"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":275,"author":{"gitId":"gok99"},"content":"    commandLine \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":276,"author":{"gitId":"-"},"content":"}"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"yhtMinceraft1010X"},"content":"def windowsHotReloadFrontend \u003d tasks.register(\u0027windowsHotReloadFrontend\u0027, Exec) {"},{"lineNumber":279,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn installFrontend"},{"lineNumber":280,"author":{"gitId":"gok99"},"content":"    onlyIf {os.isWindows()}"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    commandLine \u0027cmd\u0027,\u0027/c\u0027, \u0027START\u0027, \u0027\"hotreload RepoSense frontend\"\u0027, \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"yhtMinceraft1010X"},"content":"def linuxHotReloadFrontend \u003d tasks.register(\u0027linuxHotReloadFrontend\u0027, Exec) {"},{"lineNumber":286,"author":{"gitId":"yhtMinceraft1010X"},"content":"    dependsOn installFrontend"},{"lineNumber":287,"author":{"gitId":"gok99"},"content":"    onlyIf {os.isLinux()}"},{"lineNumber":288,"author":{"gitId":"gok99"},"content":"    workingDir \u0027frontend/\u0027"},{"lineNumber":289,"author":{"gitId":"gok99"},"content":"    commandLine \u0027npm\u0027, \u0027run\u0027, \u0027serveOpen\u0027"},{"lineNumber":290,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":291,"author":{"gitId":"gok99"},"content":""},{"lineNumber":292,"author":{"gitId":"yhtMinceraft1010X"},"content":"tasks.register(\u0027hotReloadFrontend\u0027) {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    dependsOn syncFrontendPublic"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    finalizedBy windowsHotReloadFrontend"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    finalizedBy macHotReloadFrontend"},{"lineNumber":296,"author":{"gitId":"gok99"},"content":"    finalizedBy linuxHotReloadFrontend"},{"lineNumber":297,"author":{"gitId":"-"},"content":"}"},{"lineNumber":298,"author":{"gitId":"-"},"content":"// End of hot reload Tasks"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"void deleteReposAddressDirectory() {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    final String REPOS_ADDRESS \u003d \"repos\""},{"lineNumber":302,"author":{"gitId":"-"},"content":"    def reposDirectory \u003d new File(REPOS_ADDRESS)"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    reposDirectory.deleteDir()"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027build\u0027, \u0027systemtest\u0027, \u0027frontendTest\u0027, \u0027coverage\u0027"}],"authorContributionMap":{"yhtMinceraft1010X":105,"gok99":13,"-":188}},{"path":"config/gh-actions/delete-deploy.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"#!/bin/bash"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":"# This script automatically deletes RepoSense and documentation deployments on closed PRs"},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"# This is intended to be run for the pull_request_target workflow"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":""},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"# Set to false if unset, ref: http://stackoverflow.com/a/39296583/1320290"},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"CI\u003d${CI:-false}"},{"lineNumber":7,"author":{"gitId":"gok99"},"content":""},{"lineNumber":8,"author":{"gitId":"gok99"},"content":"if [ \"$CI\" \u003d\u003d \"false\" ]"},{"lineNumber":9,"author":{"gitId":"gok99"},"content":"then"},{"lineNumber":10,"author":{"gitId":"gok99"},"content":"  echo \"ERROR: This script is intended to be run on GitHub Actions only!\""},{"lineNumber":11,"author":{"gitId":"gok99"},"content":"  exit 1"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":"fi"},{"lineNumber":13,"author":{"gitId":"gok99"},"content":""},{"lineNumber":14,"author":{"gitId":"gok99"},"content":"if [ \"$GITHUB_EVENT_NAME\" !\u003d \"pull_request_target\" ]"},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"then"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":"  echo \"ERROR: This script is intended to be run for pull_request workflows only!\""},{"lineNumber":17,"author":{"gitId":"gok99"},"content":"  exit 1"},{"lineNumber":18,"author":{"gitId":"gok99"},"content":"fi"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":""},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"REPO_SLUG_ARRAY\u003d(${GITHUB_REPOSITORY//\\// })"},{"lineNumber":21,"author":{"gitId":"gok99"},"content":"REPO_OWNER\u003d${REPO_SLUG_ARRAY[0]}"},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"REPO_NAME\u003d${REPO_SLUG_ARRAY[1]}"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"ACTIONS_DASHBOARD_ENV\u003d\"dashboard-${ACTIONS_PULL_REQUEST_NUMBER}\""},{"lineNumber":24,"author":{"gitId":"gok99"},"content":"ACTIONS_DOCS_ENV\u003d\"docs-${ACTIONS_PULL_REQUEST_NUMBER}\""},{"lineNumber":25,"author":{"gitId":"gok99"},"content":"DASHBOARD_DEPLOY_DOMAIN\u003dhttps://${ACTIONS_DASHBOARD_ENV}-pr-${REPO_NAME,,}-${REPO_OWNER,,}.surge.sh"},{"lineNumber":26,"author":{"gitId":"gok99"},"content":"DOCS_DEPLOY_DOMAIN\u003dhttps://${ACTIONS_DOCS_ENV}-pr-${REPO_NAME,,}-${REPO_OWNER,,}.surge.sh"},{"lineNumber":27,"author":{"gitId":"gok99"},"content":""},{"lineNumber":28,"author":{"gitId":"gok99"},"content":"# Function to get deployment ID for environment name from Github response"},{"lineNumber":29,"author":{"gitId":"gok99"},"content":"# $1: Response from Github"},{"lineNumber":30,"author":{"gitId":"gok99"},"content":"get_ids_from_response() {"},{"lineNumber":31,"author":{"gitId":"gok99"},"content":"  echo \"$1\" | python3 -c \"import sys, json; \\"},{"lineNumber":32,"author":{"gitId":"gok99"},"content":"    print(\u0027 \u0027.join( \\"},{"lineNumber":33,"author":{"gitId":"gok99"},"content":"      map(lambda j: str(j[\u0027id\u0027]), \\"},{"lineNumber":34,"author":{"gitId":"gok99"},"content":"          json.load(sys.stdin) \\"},{"lineNumber":35,"author":{"gitId":"gok99"},"content":"          )))\""},{"lineNumber":36,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":37,"author":{"gitId":"gok99"},"content":""},{"lineNumber":38,"author":{"gitId":"gok99"},"content":"# Function to delete GitHub deployment via a cURL command"},{"lineNumber":39,"author":{"gitId":"gok99"},"content":"# NOTE: deployment must be set inactive before it can be deleted"},{"lineNumber":40,"author":{"gitId":"gok99"},"content":"# $1: The deployment ID"},{"lineNumber":41,"author":{"gitId":"gok99"},"content":"delete_deployment() {"},{"lineNumber":42,"author":{"gitId":"gok99"},"content":"  echo \"Deleting Deployment: ${1}\""},{"lineNumber":43,"author":{"gitId":"gok99"},"content":"  curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/deployments/$1\" \\"},{"lineNumber":44,"author":{"gitId":"gok99"},"content":"  -X DELETE \\"},{"lineNumber":45,"author":{"gitId":"gok99"},"content":"  -H \"Accept: application/vnd.github.v3+json\" \\"},{"lineNumber":46,"author":{"gitId":"gok99"},"content":"  -H \"Authorization: token ${GITHUB_TOKEN}\""},{"lineNumber":47,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":48,"author":{"gitId":"gok99"},"content":""},{"lineNumber":49,"author":{"gitId":"gok99"},"content":"# Function to update GitHub deployment status to inactive via a cURL command"},{"lineNumber":50,"author":{"gitId":"gok99"},"content":"# $1: The deployment ID to update the status for"},{"lineNumber":51,"author":{"gitId":"gok99"},"content":"mark_deployment_inactive() {"},{"lineNumber":52,"author":{"gitId":"gok99"},"content":"  echo \"Marking Deployment Inactive: ${1}\""},{"lineNumber":53,"author":{"gitId":"gok99"},"content":"  curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/deployments/$1/statuses\" \\"},{"lineNumber":54,"author":{"gitId":"gok99"},"content":"  -X POST \\"},{"lineNumber":55,"author":{"gitId":"gok99"},"content":"  -H \"Content-Type: application/json\" \\"},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"  -H \"Accept: application/vnd.github.v3+json\" \\"},{"lineNumber":57,"author":{"gitId":"gok99"},"content":"  -H \"Authorization: token ${GITHUB_TOKEN}\" \\"},{"lineNumber":58,"author":{"gitId":"gok99"},"content":"  -d \"{\\\"state\\\": \\\"inactive\\\"}\""},{"lineNumber":59,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":60,"author":{"gitId":"gok99"},"content":""},{"lineNumber":61,"author":{"gitId":"gok99"},"content":"# Function to get deployment data about repo via a cURL command"},{"lineNumber":62,"author":{"gitId":"gok99"},"content":"# $1: Deployment environment name"},{"lineNumber":63,"author":{"gitId":"gok99"},"content":"# $2: Page number"},{"lineNumber":64,"author":{"gitId":"gok99"},"content":"get_deployment_data() {"},{"lineNumber":65,"author":{"gitId":"gok99"},"content":"  curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/deployments?per_page\u003d100\u0026page\u003d${2}\u0026environment\u003d${1}\" \\"},{"lineNumber":66,"author":{"gitId":"gok99"},"content":"  -X GET \\"},{"lineNumber":67,"author":{"gitId":"gok99"},"content":"  -H \"Accept: application/vnd.github.v3+json\" \\"},{"lineNumber":68,"author":{"gitId":"gok99"},"content":"  -H \"Authorization: token ${GITHUB_TOKEN}\""},{"lineNumber":69,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":70,"author":{"gitId":"gok99"},"content":""},{"lineNumber":71,"author":{"gitId":"gok99"},"content":"# Function to get deployment ids iterating through deployment pages"},{"lineNumber":72,"author":{"gitId":"gok99"},"content":"# $1: Deployment environment name"},{"lineNumber":73,"author":{"gitId":"gok99"},"content":"get_all_deployment_ids() {"},{"lineNumber":74,"author":{"gitId":"gok99"},"content":"  curr_page\u003d1"},{"lineNumber":75,"author":{"gitId":"gok99"},"content":"  deploy_ids\u003d()"},{"lineNumber":76,"author":{"gitId":"gok99"},"content":"  res_ids\u003d(\"TEMP\")"},{"lineNumber":77,"author":{"gitId":"gok99"},"content":"  while [ ${#res_ids[@]} -ne 0 ]"},{"lineNumber":78,"author":{"gitId":"gok99"},"content":"  do"},{"lineNumber":79,"author":{"gitId":"gok99"},"content":"    # Get deployment data for curr_page"},{"lineNumber":80,"author":{"gitId":"gok99"},"content":"    res\u003d$(get_deployment_data \"${1}\" ${curr_page})"},{"lineNumber":81,"author":{"gitId":"gok99"},"content":"    # Get deployment ids from res"},{"lineNumber":82,"author":{"gitId":"gok99"},"content":"    res_ids\u003d($(get_ids_from_response \"$res\"))"},{"lineNumber":83,"author":{"gitId":"gok99"},"content":"    # Append ids to deploy_ids"},{"lineNumber":84,"author":{"gitId":"gok99"},"content":"    deploy_ids\u003d(\"${deploy_ids[@]}\" \"${res_ids[@]}\")"},{"lineNumber":85,"author":{"gitId":"gok99"},"content":"    curr_page\u003d$((curr_page+1))"},{"lineNumber":86,"author":{"gitId":"gok99"},"content":"  done"},{"lineNumber":87,"author":{"gitId":"gok99"},"content":"  echo \"${deploy_ids[*]}\""},{"lineNumber":88,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":89,"author":{"gitId":"gok99"},"content":""},{"lineNumber":90,"author":{"gitId":"gok99"},"content":"# Function to post surge deployment links as a comment on PR via a cURL command"},{"lineNumber":91,"author":{"gitId":"gok99"},"content":"post_preview_links_comment() {"},{"lineNumber":92,"author":{"gitId":"gok99"},"content":"  curl \"https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/${ACTIONS_PULL_REQUEST_NUMBER}/comments\" \\"},{"lineNumber":93,"author":{"gitId":"gok99"},"content":"  -X POST \\"},{"lineNumber":94,"author":{"gitId":"gok99"},"content":"  -H \"Accept: application/vnd.github.v3+json\" \\"},{"lineNumber":95,"author":{"gitId":"gok99"},"content":"  -H \"Authorization: token ${GITHUB_TOKEN}\" \\"},{"lineNumber":96,"author":{"gitId":"gok99"},"content":"  -d \"{\\\"body\\\": \\\"The following links are for previewing this pull request:\\n- **Dashboard Preview**: ${DASHBOARD_DEPLOY_DOMAIN}\\n- **Docs Preview**: ${DOCS_DEPLOY_DOMAIN}\\\"}\""},{"lineNumber":97,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":98,"author":{"gitId":"gok99"},"content":""},{"lineNumber":99,"author":{"gitId":"gok99"},"content":"# Function to mark inactive and delete deployments for given array"},{"lineNumber":100,"author":{"gitId":"gok99"},"content":"# of deployment IDs"},{"lineNumber":101,"author":{"gitId":"gok99"},"content":"# $@: Array of deployment IDs"},{"lineNumber":102,"author":{"gitId":"gok99"},"content":"delete_all_deployments() {"},{"lineNumber":103,"author":{"gitId":"gok99"},"content":"  for ID in \"$@\""},{"lineNumber":104,"author":{"gitId":"gok99"},"content":"  do"},{"lineNumber":105,"author":{"gitId":"gok99"},"content":"    if [ -z \"${ID}\" ] # empty IDs, skip deployment"},{"lineNumber":106,"author":{"gitId":"gok99"},"content":"    then"},{"lineNumber":107,"author":{"gitId":"gok99"},"content":"      continue"},{"lineNumber":108,"author":{"gitId":"gok99"},"content":"    fi"},{"lineNumber":109,"author":{"gitId":"gok99"},"content":"    mark_deployment_inactive \"$ID\""},{"lineNumber":110,"author":{"gitId":"gok99"},"content":"    delete_deployment \"$ID\""},{"lineNumber":111,"author":{"gitId":"gok99"},"content":"  done"},{"lineNumber":112,"author":{"gitId":"gok99"},"content":"}"},{"lineNumber":113,"author":{"gitId":"gok99"},"content":""},{"lineNumber":114,"author":{"gitId":"gok99"},"content":"DASHBOARD_IDS\u003d($(get_all_deployment_ids \"$ACTIONS_DASHBOARD_ENV\"))"},{"lineNumber":115,"author":{"gitId":"gok99"},"content":"DOCS_IDS\u003d($(get_all_deployment_ids \"$ACTIONS_DOCS_ENV\"))"},{"lineNumber":116,"author":{"gitId":"gok99"},"content":""},{"lineNumber":117,"author":{"gitId":"gok99"},"content":"post_preview_links_comment"},{"lineNumber":118,"author":{"gitId":"gok99"},"content":"delete_all_deployments \"${DASHBOARD_IDS[@]}\""},{"lineNumber":119,"author":{"gitId":"gok99"},"content":"delete_all_deployments \"${DOCS_IDS[@]}\""}],"authorContributionMap":{"gok99":119}},{"path":"docs/about.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"About us\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-3\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"RepoSense is a project based in the [National University of Singapore, School of Computing](http://www.comp.nus.edu.sg/), funded by a _Teaching Enhancement Grant_ from the [NUS Center for Development of Teaching and Learning](https://nus.edu.sg/cdtl)."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Current team"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"### [Damith C. Rajapakse](http://www.comp.nus.edu.sg/~damithch)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"![](https://avatars.githubusercontent.com/u/1673303?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"**Role**: Project Advisor"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"### [Wang Chao](https://github.com/fzdy1914)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"![](https://avatars3.githubusercontent.com/u/35621726?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"**Role**: Project Lead [2021 Jan - ]\u003cbr/\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Maintainer [2020 May - 2021 Jan]\u003cbr/\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"Committer [2019 May - 2020 May]\u003cbr/\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Contributor [2018 Dec - 2019 May]\u003cbr/\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"### [Hsu Zhong Jun](https://github.com/dcshzj)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"![](https://avatars.githubusercontent.com/u/27919917?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"**Role**: Committer [2021 June - ]\u003cbr/\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Contributor [2020 August - 2021 May]\u003cbr/\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"### [Chan Ger Hean](https://github.com/gerhean)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Role**: Committer [2022 January - ]\u003cbr/\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Contributor [2021 January - 2021 December]\u003cbr/\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"### [Huang Chengyu](https://github.com/HCY123902)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"**Role**: Committer [2022 January - ]\u003cbr/\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Contributor [2021 January - ]\u003cbr/\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"### [Chan Jun Da](https://github.com/chan-j-d)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"**Role**: Contributor [2021 July - ]\u003cbr/\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### [Tay Yi Hsuen](https://github.com/yhtMinceraft1010X)"},{"lineNumber":54,"author":{"gitId":"-"},"content":"**Role**: Contributor [2021 July - ]\u003cbr/\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"### [Gokul Rajiv](https://github.com/gok99)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"**Role**: Contributor [2022 January - ]\u003cbr/\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"### [Zhou Jiahao](https://github.com/Zhou-Jiahao-1998)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**Role**: Contributor [2022 January - ]\u003cbr/\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"## Past Members"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"### [Ma Tanghao](https://github.com/harryggg)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"Main developer for the initial version [2017 May - 2018 May]"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"### [Ong Shu Peng](https://github.com/ongspxm)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/1430854?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"**Role**: Area Lead for UI [2018 Dec - 2019 May]\u003cbr/\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"Committer [2018 Aug - 2018 Dec]\u003cbr/\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"Contributor [2018 May - 2018 Aug]\u003cbr/\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"### [Tan Jun An](https://github.com/yamidark)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"![](https://avatars3.githubusercontent.com/u/18352498?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"**Role**: Area Lead for Code Quality [2018 Aug - 2019 April]\u003cbr/\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":"Committer [2018 May - 2018 Aug]\u003cbr/\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"### [Teng Yong Hao](https://github.com/yong24s)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"![](https://avatars2.githubusercontent.com/u/2003406?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"**Role**: "},{"lineNumber":93,"author":{"gitId":"-"},"content":"Mentor [2018 Dec - 2020 May]\u003cbr/\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"Committer [2018 Aug - 2018 Dec]\u003cbr/\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Contributor [2018 May - 2018 Aug]\u003cbr/\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"### [Peh Xian Bin, Eugene](https://github.com/eugenepeh)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"![](https://avatars.githubusercontent.com/u/19277206?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"**Role**: Maintainer [2020 May - 2021 Jan]\u003cbr/\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"Project Lead [2018 May - 2020 May]\u003cbr/\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"### [Aditya Agarwal](https://github.com/adityaa1998)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"Contributor [2018 May - 2018 Aug]"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"### [Apoorva Ullas](https://github.com/apoorva17)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Contributor [2018 Aug - 2019 May]"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":"### [Chelsey Ong Hee](https://github.com/chel-seyy)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"Contributor [2018 Dec - 2019 May]"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"### [Gilbert Emerson](https://github.com/emer7)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"Contributor [2018 Dec - 2019 May]"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### [Teo Ming Yi](https://github.com/myteo)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"Contributor [2018 Dec - 2019 May]"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"### [Jin Minjia](https://github.com/bluein-green)"},{"lineNumber":132,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 May - 2019 Aug]\u003cbr/\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### [James Pang Mun Wai](https://github.com/jamessspanggg)"},{"lineNumber":137,"author":{"gitId":"-"},"content":"![](https://avatars1.githubusercontent.com/u/32864116?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**Role**: Committer [2020 May - 2021 Jan]\u003cbr/\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Contributor [2019 May - 2020 May]\u003cbr/\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"### [Lee Jin Yao](https://github.com/jylee-git)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"![](https://avatars3.githubusercontent.com/u/35756209?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 May - 2020 May]\u003cbr/\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"### [Chong Chee Yuan](https://github.com/ccyccyccy)"},{"lineNumber":150,"author":{"gitId":"-"},"content":"**Role**: Contributor [2020 January - 2020 May]\u003cbr/\u003e"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"### [Ni Tianzhen](https://github.com/niqiukun)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"**Role**: Contributor [2020 January - 2020 May]\u003cbr/\u003e"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"### [Yash Chowdhary](https://github.com/yash-chowdhary)"},{"lineNumber":160,"author":{"gitId":"-"},"content":"![](https://avatars2.githubusercontent.com/u/21968718?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":"**Role**: Contributor [2020 January - 2020 May]\u003cbr/\u003e"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"### [Liu Yiwen](https://github.com/0blivious)"},{"lineNumber":166,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 August - 2021 May]\u003cbr/\u003e"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"### [Tejas Bhuwania](https://github.com/Tejas2805)"},{"lineNumber":171,"author":{"gitId":"-"},"content":"![](https://avatars2.githubusercontent.com/u/35946746?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":172,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 August - 2021 August]\u003cbr/\u003e"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"### [Anubhav](https://github.com/anubh-v)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 September - 2020 August]\u003cbr/\u003e"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"### [Ang Ze Yu](https://github.com/ang-zeyu)"},{"lineNumber":182,"author":{"gitId":"-"},"content":"**Role**: Contributor [2020 January - 2021 May]\u003cbr/\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"### [Roland Yu Wenyang](https://github.com/rolandyuwy)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"**Role**: Contributor [2021 January - 2021 March]\u003cbr/\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yhtMinceraft1010X":2,"-":186}},{"path":"docs/dg/architecture.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Architecture\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":" ![architecture](../images/architecture.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"*Figure 1. Overall architecture of RepoSense*"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Parser(ConfigParser)"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"[`Parser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser) contains three components:"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * [`ArgsParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/ArgsParser.java): Parses the user-supplied command line arguments into a `CliArguments` object."},{"lineNumber":18,"author":{"gitId":"-"},"content":" * [`CsvParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/CsvParser.java): Abstract generic class for CSV parsing functionality. The following three classes extend `CsvParser`."},{"lineNumber":19,"author":{"gitId":"-"},"content":"   * [`AuthorConfigCsvParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/AuthorConfigCsvParser.java): Parses the `author-config.csv` config file into a list of `AuthorConfiguration` for each repository to analyze."},{"lineNumber":20,"author":{"gitId":"-"},"content":"   * [`GroupConfigCsvParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/GroupConfigCsvParser.java): Parses the `group-config.csv` config file into a list of `GroupConfiguration` for each repository to analyze."},{"lineNumber":21,"author":{"gitId":"-"},"content":"   * [`RepoConfigCsvParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/RepoConfigCsvParser.java): Parses the `repo-config.csv` config file into a list of `RepoConfiguration` for each repository to analyze."},{"lineNumber":22,"author":{"gitId":"-"},"content":" * [`JsonParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/JsonParser.java): Abstract generic class for JSON parsing functionality. The following class extends `JsonParser` class:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   * [`StandaloneConfigJsonParser`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/parser/StandaloneConfigJsonParser.java): Parses the `_reposense/config.json` config file into a `StandaloneConfig`."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Git"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"[`Git`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git) package contains the wrapper classes for respective *git* commands."},{"lineNumber":30,"author":{"gitId":"-"},"content":" * [`GitBlame`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitBlame.java): Wrapper class for `git blame` functionality. Traces the revision and author last modified each line of a file."},{"lineNumber":31,"author":{"gitId":"-"},"content":" * [`GitBranch`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitBranch.java): Wrapper class for `git branch` functionality. Gets the name of the working branch of the target repo."},{"lineNumber":32,"author":{"gitId":"-"},"content":" * [`GitCatFile`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitCatFile.java): Wrapper class for `git cat-file` functionality. Obtains the parent commit hash with the given commit indicated by the commit hash."},{"lineNumber":33,"author":{"gitId":"-"},"content":" * [`GitCheckout`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitCheckout.java): Wrapper class for `git checkout` functionality. Checks out the repository by branch name or commit hash."},{"lineNumber":34,"author":{"gitId":"-"},"content":" * [`GitClone`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitClone.java): Wrapper class for `git clone` functionality. Clones the repository from *GitHub* into a temporary folder in order to run the analysis."},{"lineNumber":35,"author":{"gitId":"-"},"content":" * [`GitDiff`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitDiff.java): Wrapper class for `git diff` functionality. Obtains the changes between commits."},{"lineNumber":36,"author":{"gitId":"-"},"content":" * [`GitLog`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitLog.java): Wrapper class for `git log` functionality. Obtains the commit logs and the authors\u0027 info."},{"lineNumber":37,"author":{"gitId":"-"},"content":" * [`GitRevList`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitRevList.java): Wrapper class for `git rev-list` functionality. Retrieves the commit objects in reverse chronological order."},{"lineNumber":38,"author":{"gitId":"-"},"content":" * [`GitRevParse`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitRevParse.java): Wrapper class for `git rev-parse` functionality. Ensures that the branch of the repo is to be analyzed exists."},{"lineNumber":39,"author":{"gitId":"-"},"content":" * [`GitShortlog`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitShortlog.java): Wrapper class for `git shortlog` functionality. Obtains the list of authors who have contributed to the target repo."},{"lineNumber":40,"author":{"gitId":"-"},"content":" * [`GitShow`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitShow.java): Wrapper class for `git show` functionality. Gets the date of the commit with the commit hash."},{"lineNumber":41,"author":{"gitId":"-"},"content":" * [`GitUtil`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitUtil.java): Contains helper functions used by the other Git classes above."},{"lineNumber":42,"author":{"gitId":"-"},"content":" * [`GitVersion`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/git/GitVersion.java): Wrapper class for `git --version` functionality. Obtains the current git version of the environment that RepoSense is being run on."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"  "},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"Note that when constructing new commands containing path arguments, use the `StringsUtil::addQuotesForFilePath` method to safely convert a Java string into an equivalent Bash/CMD argument."},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"\u003c/box\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"## CommitsReporter"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"[`CommitsReporter`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/CommitsReporter.java) is responsible for analyzing the **commit** history and generating a [`CommitContributionSummary`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/model/CommitContributionSummary.java) for each repository. `CommitContributionSummary` contains information such as each author\u0027s daily and weekly contribution and the variance of their contribution. `CommitsReporter`"},{"lineNumber":53,"author":{"gitId":"-"},"content":" 1. uses [`CommitInfoExtractor`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/CommitInfoExtractor.java) to run the `git log` command, which generates each commit\u0027s statistics within the date range."},{"lineNumber":54,"author":{"gitId":"-"},"content":" 1. generates a [`CommitInfo`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/model/CommitInfo.java) for each commit, which contains the `infoLine` and `statLine`."},{"lineNumber":55,"author":{"gitId":"-"},"content":" 1. uses [`CommitInfoAnalyzer`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/CommitInfoAnalyzer.java) to extract the relevant data from `CommitInfo` into a [`CommitResult`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/model/CommitResult.java), such as the number of line insertions and deletions in the commit and the author of the commit."},{"lineNumber":56,"author":{"gitId":"-"},"content":" 1. uses [`CommitResultAggregator`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/CommitResultAggregator.java) to aggregate all `CommitResult` into a [`CommitContributionSummary`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/commits/model/CommitContributionSummary.java)."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"## AuthorshipReporter"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"[`AuthorshipReporter`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/AuthorshipReporter.java) is responsible for analyzing the whitelisted **files**, traces the original author for each line of text/code, and generating an [`AuthorshipSummary`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/model/AuthorshipSummary.java) for each repository. `AuthorshipSummary` contains the analysis results of the whitelisted files and the number of line contributions each author made. `AuthorshipReporter`"},{"lineNumber":63,"author":{"gitId":"-"},"content":" 1. uses [`FileInfoExtractor`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/FileInfoExtractor.java) to traverse the repository to find all relevant files."},{"lineNumber":64,"author":{"gitId":"-"},"content":" 1. generates a [`FileInfo`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/model/FileInfo.java) for each relevant file, which contains the path to the file and a list of [`LineInfo`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/model/LineInfo.java) representing each line of the file."},{"lineNumber":65,"author":{"gitId":"-"},"content":" 1. uses [`FileInfoAnalyzer`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/FileInfoAnalyzer.java) to analyze each file, using `git blame` or annotations, and finds the `Author` for each `LineInfo`."},{"lineNumber":66,"author":{"gitId":"-"},"content":" 1. generates a [`FileResult`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/model/FileResult.java) for each file, which consolidates the authorship results into a *Map* of each author\u0027s line contribution to the file."},{"lineNumber":67,"author":{"gitId":"-"},"content":" 1. uses [`FileResultAggregator`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/authorship/FileResultAggregator.java) to aggregate all `FileResult` into an `AuthorshipSummary`."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"## ReportGenerator(Main)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"[`ReportGenerator`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/ReportGenerator.java)"},{"lineNumber":74,"author":{"gitId":"-"},"content":" 1. clones repositories using the `GitClone` API in a multi-threaded fashion."},{"lineNumber":75,"author":{"gitId":"-"},"content":"    * By default, 4 threads are used for cloning; the number of threads can be specified using the CLI argument `--cloning-threads \u003cthreads\u003e`."},{"lineNumber":76,"author":{"gitId":"-"},"content":" 1. analyzes the repositories using the `CommitReporter` and `AuthorshipReporter` in a multi-threaded fashion."},{"lineNumber":77,"author":{"gitId":"-"},"content":"    * First, copies the template files into the designated output directory."},{"lineNumber":78,"author":{"gitId":"-"},"content":"    * Then, uses `CommitReporter` and `AuthorshipReporter` to produce the commit and authorship summary, respectively."},{"lineNumber":79,"author":{"gitId":"-"},"content":"    * By default, the number of threads used for analysis is equal to the number of CPU cores available; the number of threads can be specified using the CLI argument `--analysis-threads \u003cthreads\u003e`."},{"lineNumber":80,"author":{"gitId":"-"},"content":" 1. generates the `JSON` files needed to generate the `HTML` report."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## System"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"[`System`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/system) contains the classes that interact with the Operating System and external processes."},{"lineNumber":87,"author":{"gitId":"-"},"content":" * [`CommandRunner`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/system/CommandRunner.java) creates processes that execute commands on the terminal. It consists of many *git* commands."},{"lineNumber":88,"author":{"gitId":"-"},"content":" * [`LogsManager`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/system/LogsManager.java) uses the `java.util.logging` package for logging. The `LogsManager` class is used to manage the logging levels and logging destinations. Log messages are output through: `Console` and to a `.log` file."},{"lineNumber":89,"author":{"gitId":"-"},"content":" * [`ReportServer`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/system/ReportServer.java) starts a server to display the report on the browser. It depends on the `net.freeutils.httpserver` package."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Model"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"[`Model`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model) holds the data structures that are commonly used by the different aspects of *RepoSense*."},{"lineNumber":96,"author":{"gitId":"-"},"content":" * [`Author`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model/Author.java) stores the `GitHub ID` of an author. Any contributions or commits made by the author, using his/her `GitHub ID` or aliases, will be attributed to the same `Author` object. `AuthorshipReporter` and `CommitsReporter` use it to attribute the commit and file contributions to the respective authors."},{"lineNumber":97,"author":{"gitId":"-"},"content":" * [`CliArguments`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model/CliArguments.java) stores the parsed command-line arguments supplied by the user. It contains the configuration settings such as the CSV config file to read from, the directory to output the report to, and the date range of commits to analyze. These configuration settings are passed into `RepoConfiguration`."},{"lineNumber":98,"author":{"gitId":"-"},"content":" * [`FileTypeManager`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model/FileTypeManager.java) stores the file format to be analyzed and the custom groups specified by the user for any repository."},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":" * [`RepoConfiguration`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/model/RepoConfiguration.java) stores the configuration information from the CSV config file for a single repository: the repository\u0027s organization, name, branch, list of authors to analyze, date range to analyze commits, and files from `CliArguments`."},{"lineNumber":100,"author":{"gitId":"-"},"content":" This configuration information is used by:"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    - `GitClone` to determine the location to clone the repository from and which branch to check out to."},{"lineNumber":102,"author":{"gitId":"-"},"content":"    - `AuthorshipReporter` and `CommitsReporter` to determine the range of commits and files to analyze."},{"lineNumber":103,"author":{"gitId":"-"},"content":"    - `ReportGenerator` to determine the directory to output the report."}],"authorContributionMap":{"chan-j-d":4,"yhtMinceraft1010X":1,"-":98}},{"path":"docs/dg/devOpsGuide.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"DevOps Guide\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"This page documents the various components that form part of the DevOps infrastructure that RepoSense uses."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## GitHub Actions"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":"[GitHub Actions](https://docs.github.com/en/actions) is a platform that is used by RepoSense for running the test suite and is primarily used for continuous integration and testing. The test suite is stored in `.github/workflows/` and comprises of:"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"- Unit tests (in `src/tests/`)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"- System tests (in `src/systemtest/`)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"- Frontend tests (in `frontend/cypress/tests/`)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"### Continuous integration"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"gok99"},"content":"All three types of tests in the test suite are run in a single GitHub Actions workflow called \"Continuous Integration\". The steps are defined in [`integration.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/integration.yml) and are split into four types of jobs:"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Ubuntu JDK 8 (`ubuntu`): Runs both unit tests and system tests on JDK 1.8 running on supported Ubuntu versions. This job also produces a RepoSense report and the MarkBind documentation website for previewing."},{"lineNumber":32,"author":{"gitId":"-"},"content":"2. macOS JDK 8 (`macos`): Runs both unit tests and system tests on JDK 1.8 running on supported macOS versions."},{"lineNumber":33,"author":{"gitId":"gok99"},"content":"3. Windows JDK 8 (`windows`): Runs both unit tests and system tests on JDK 1.8 running on supported Windows versions."},{"lineNumber":34,"author":{"gitId":"gok99"},"content":"4. Cypress frontend tests (`cypress`): Runs only the frontend tests on JDK 1.8 running on Ubuntu 18.04 LTS."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The list of supported OS versions are [available on the GitHub Docs website](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources). These jobs should be updated regularly whenever RepoSense supports newer versions of the Java Development Kit (JDK) as well as when new OS versions are made available (via the job OS matrix). Frontend tests are run separately to take advantage of parallel job execution."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"Some of the jobs execute some commands that are too complicated to be included in the workflow configuration files. Such commands are written in the form of a bash script and are located in the [`config/gh-actions`](https://github.com/reposense/RepoSense/tree/master/config/gh-actions) folder."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"This workflow is run for both incoming pull requests to any branch as well as direct commits to any branch in the repository."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"gok99"},"content":"Cypress frontend tests are run against reports generated from config files in `frontend/cypress/config`. It uses the `cypress` branch of the RepoSense repository which is kept independent of `master` and should be updated only when there are new frontend tests that need to be accommodated."},{"lineNumber":43,"author":{"gitId":"gok99"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Report and documentation previews"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"For each pull request to any branch in the repository, a RepoSense report and the MarkBind documentation website is generated based on the code submitted in the pull request. This is to facilitate pull request reviewers in being able to quickly preview how the RepoSense report and/or the documentation website will change after the pull request is merged."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"Due to [security considerations in preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests), the deployment of the report and documentation previews were split across two workflows in [pull request #1411](https://github.com/reposense/RepoSense/pull/1411):"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. Surge.sh pending build (defined in [`pending.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/pending.yml)): Used for gathering information about the pull request and update the pull request checklist to indicate that the previews are pending."},{"lineNumber":51,"author":{"gitId":"-"},"content":"2. Surge.sh build preview (defined in [`surge.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/surge.yml)): Used for actually deploying the RepoSense report and documentation website to Surge.sh and updating the pull request checklist to link to the preview websites."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"The previews are recognised as GitHub deployments and are named `dashboard-$PRNUMBER` and `docs-$PRNUMBER`, where `$PRNUMBER` is the pull request number. Once a preview is ready, the reviewer would be able to click on \"View deployment\" or \"Show environments\" in the pull request to open the preview websites."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Both the \"Surge.sh pending build\" and \"Continuous Integration\" workflows produce an artifact respectively, which is then downloaded by the \"Surge.sh build preview\" workflow to be deployed to Surge.sh. Due to limitations in GitHub Actions in determining the workflow execution order, the \"Surge.sh pending build\" workflow is assumed to have been completed before the \"Continuous Integration\" workflow is completed."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"This task is not performed on commits to the repository, as there is no need to do so."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"gok99"},"content":"After the pull request is closed or merged, the Surge.sh deployments are retained, while the GitHub environments for them are cleared by another workflow \"Clear deployments for closed pull requests\" (defined in [`delete-deploy.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/delete-deploy.yml)). The workflow uses [`delete-deploy.sh`](https://github.com/reposense/RepoSense/blob/master/config/gh-actions/delete-deploy.sh) (found in the `config/gh-actions/` folder) to remove the environments on GitHub, and to leave a comment on the pull request with links to the Surge.sh previews for later reference."},{"lineNumber":60,"author":{"gitId":"gok99"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"### GitHub Pages"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"This task builds the MarkBind documentation website on every push to the `master` branch. The steps are defined in [`gh-pages.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/gh-pages.yml)."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"### Stale pull requests"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"This task automates the cleaning up of the pull requests by automatically marking inactive pull requests as stale and subsequently closing them. The steps and configurations are defined in [`stale.yml`](https://github.com/reposense/RepoSense/blob/master/.github/workflows/stale.yml) and the job is triggered automatically once per day."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"## Codecov"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"[Codecov](https://app.codecov.io/gh/reposense/RepoSense) is a platform for checking the code coverage status of the project and the pull request patch. It runs automatically on each pull request and the settings are located in [`codecov.yml`](https://github.com/reposense/RepoSense/blob/master/codecov.yml)."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"## Surge.sh"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"Surge.sh is a platform for hosting the RepoSense report and documentation preview builds. The deployment is automatically performed by the \"Surge.sh build preview\" job using the [`deploy.sh`](https://github.com/reposense/RepoSense/blob/master/config/gh-actions/deploy.sh) script in the `config/gh-actions/` folder."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"For authentication, two secrets are stored and used in GitHub Actions:"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `SURGE_LOGIN` - Holds the email address to use for the Surge.sh account"},{"lineNumber":84,"author":{"gitId":"-"},"content":"2. `SURGE_TOKEN` - Holds the secret account token generated for the above account (generated using `surge token`)"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"The `surge` command automatically detects the existence of these two environment variables and use them for authentication when deploying the RepoSense report and documentation build previews."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"Currently, deployments are kept forever, even after the pull request is merged or closed. There is currently no existing functionality to automatically clean up deployments after they are no longer useful."}],"authorContributionMap":{"yhtMinceraft1010X":1,"gok99":7,"-":80}},{"path":"docs/dg/learningBasics.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Learning the Basics\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed, step with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"This is a learning guide for developers who are new to RepoSense."},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"Depending on what you know already and what you would like to work on (i.e., backend or frontend), you may find certain sections irrelevant to you and you can skip them accordingly."},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Backend"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"This section is for developers who want to contribute to the backend of RepoSense. You may skip this section if you want to contribute as a pure frontend developer. Before you get started, you should have set up the project on your computer according to [the _Setting up_ page](settingUp.html)."},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"The backend implementation of RepoSense is located in `src/main`."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"{{ step(1) }} **Know Java**"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"The RepoSense backend is mostly written in `Java 8`. "},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. You need to have a basic knowledge of Java before getting started, including its syntax, [API](https://docs.oracle.com/javase/8/docs/api/), and certain frameworks such as [JUnit](https://se-education.org/learningresources/contents/java/JUnit.html)."},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"1. Once you are familiar with the basic syntax, you may wish to learn more advanced topics such as [concurrency](https://se-education.org/learningresources/contents/java/JavaConcurrency.html), [synchronization](https://se-education.org/learningresources/contents/java/JavaSynchronization.html), and [streams](https://se-education.org/learningresources/contents/java/streams-an-introduction.html). These topics can help you to understand certain part of the backend implementation (concurrent cloning and analysis of multiple repositories, etc.). They are optional but you may find them useful when working on certain issues."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"{{ step(2) }} **Learn the RepoSense backend architecture**"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"You may want to refer to the [backend architecture](architecture.html) to understand the RepoSense backend implementation logic."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"To gain a more concrete idea of how the backend works, you can use the IDE Debugger and run RepoSense under the debugging mode to trace through the steps of how arguments from command line and CSV files are parsed, how repositories are cloned and analyzed, and how the JSON files are generated."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"The information below is for **Intellij**. If you are using a different IDE, you may need to check the documentation of how to use the debugger separately."},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Check the [debugging guide](https://www.jetbrains.com/help/idea/debugging-your-first-java-application.html) if you are not familiar with debugging in **Intelij**."},{"lineNumber":51,"author":{"gitId":"-"},"content":"* In `RepoSense.java`, the main class, set appropriate break points. Here are some relevant method calls in the `main` method at which you can set the breakpoints:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  * `ArgsParser.parse(args)`: RepoSense parses the CLI arguments from the command given by the user."},{"lineNumber":53,"author":{"gitId":"-"},"content":"  * `getRepoConfigurations(cliArguments)`: RepoSense gets the configuration for each repository by parsing the CSV files."},{"lineNumber":54,"author":{"gitId":"-"},"content":"  * `getReportConfigurations(cliArguments)`: RepoSense gets the report configuration (report title) by parsing the JSON files."},{"lineNumber":55,"author":{"gitId":"-"},"content":"  * `ReportGenerator.generateReposReport(...)` This is where the bulk of the work is conducted, including cloning repositories, analyzing repositories, and generating the JSON files to be used by the report."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"When tracing through the program execution, you can cross reference the architecture diagram and Javadoc of the class and method to check your understanding of the procedure."},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"{{ step(3) }} **Gain some hands-on experience**"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"Here are some small tasks for you to gain some basic knowledge of the code related to the RepoSense backend. You can do each in a separate branch in your local copy of the code."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 1: Add a flag to pretty-print the JSON file**\" type\u003d\"primary\"\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"  **Task 1: Add a flag to pretty-print the JSON file**"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  1. [Generate a report locally](../ug/generatingReports.html#generating-reports-locally)."},{"lineNumber":71,"author":{"gitId":"-"},"content":"  2. Open a generated JSON file. For example, you can open `summary.json` of the generated report."},{"lineNumber":72,"author":{"gitId":"-"},"content":"  3. You should see that the content in the JSON is compactly organized in 1 single line. This may affect readability for developer who wants to investigate the content in the JSON file."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"  **Your Task**"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"  Add a new CLI argument `--use-json-pretty-printing`, such that when a user runs the command `java -jar RepoSense.jar --repos LIST_OF_REPO_URLS --view --use-json-pretty-printing`, the JSON files `summary.json`, `authorship.json`, and `commits.json` will be printed in a more readable way."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"  Try to understand the parsing process of the Command Line Arguments, which starts from `ArgsParser.parse(args)` in `RepoSense.java` and uses `ArgumentParser` to capture the arguments in the command string."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"  Therefore, the first step you can take is to add the following to `ArgsParser`."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  public static final String[] JSON_PRINT_MODE_FLAGS \u003d new String[]{\"--use-json-pretty-printing\", \"-j\"};"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  In `getArgumentParser` method, add the following content to make `ArgumentParser` capture the new argument."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":91,"author":{"gitId":"-"},"content":"  parser.addArgument(JSON_PRINT_MODE_FLAGS)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"      .dest(JSON_PRINT_MODE_FLAGS[0])"},{"lineNumber":93,"author":{"gitId":"-"},"content":"      .action(Arguments.storeTrue())"},{"lineNumber":94,"author":{"gitId":"-"},"content":"      .help(\"A flag to use json pretty printing when generating the json files.\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":96,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"  After the step in hint 1, the argument is captured by `ArgumentParser`. Now make corresponding changes to `CliArguments.java`, `ConfigCliArguments.java`, and the `parse` method in `ArgsParser.java` to make the return result of `parse` include the new argument. "},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"  1. Add the following content to `CliArguments` to include `isPrettyPrintingUsed` as a new attribute to the class."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":105,"author":{"gitId":"-"},"content":"  protected boolean isPrettyPrintingUsed;"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"  public boolean isPrettyPrintingUsed() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"          return isPrettyPrintingUsed;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"  2. In the constructor of `ConfigCliArguments`, add `isPrettyPrintingUsed` as a new parameter of the method, and add the following instruction to the method body."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  this.isPrettyPrintingUsed \u003d isPrettyPrintingUsed;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"  3. In the `parse` method of `ArgsParser`, add the following instruction to get `isJsonPrettyPrintingUsed` from `ArgmentParser`."},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":121,"author":{"gitId":"-"},"content":"  boolean isJsonPrettyPrintingUsed \u003d results.get(JSON_PRINT_MODE_FLAGS[0]);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  ``` "},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"  4. Additionally, change the return statement of the `parse` method so that the `ConfigCliArguments` object returned will now include `isJsonPrettyPrintingUsed`."},{"lineNumber":125,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"  After the steps in hint 1 and hint 2, the result returned from `ArgsParser.parse(args)` in `RepoSense.java` should be able to capture the new argument when it is specified in the command. "},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"  The next step is to extract the argument from the `CliArguments` object, and pass it to JSON file writer to notify it of the specified printing mode."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"  Note that the creation and writing of JSON file is invoked in `ReportGenerator.generateReposReport`, which calls `FileUtil.writeJsonFile` directly to write the `summary.json` file or indirectly (Check `generateIndividualRepoReport` and `generateEmptyRepoReport`) to write the `commits.json` or `authorship.json` files of individual repositories."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"  Therefore, the task now is to make `FileUtil.writeJsonFile` switch between different printing mode."},{"lineNumber":136,"author":{"gitId":"-"},"content":" "},{"lineNumber":137,"author":{"gitId":"-"},"content":"  1. You can find out what [`Gson.setPrettyPrinting`](https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.5/com/google/gson/GsonBuilder.html#setPrettyPrinting--) does and how it can be used in the `writeJsonFile` method of [`FileUtil.java`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/util/FileUtil.java)."},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"  2. Add the following content to `FileUtil`."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  private static boolean isPrettyPrintingUsed \u003d false;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"  3. In the `writeJsonFile` method, Replace the creation of the `Gson` object with the following instructions."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  GsonBuilder gsonBuilder \u003d new GsonBuilder()"},{"lineNumber":149,"author":{"gitId":"yhtMinceraft1010X"},"content":"          .registerTypeAdapter(LocalDateTime.class, (JsonSerializer\u003cLocalDateTime\u003e) (date, typeOfSrc, context)"},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"                        -\u003e new JsonPrimitive(date.format(DateTimeFormatter.ofPattern(GITHUB_API_DATE_FORMAT))))"},{"lineNumber":151,"author":{"gitId":"-"},"content":"          .registerTypeAdapter(FileType.class, new FileType.FileTypeSerializer());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"  Gson gson;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  if (isPrettyPrintingUsed) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      gson \u003d gsonBuilder.setPrettyPrinting().create();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"      gson \u003d gsonBuilder.create();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":158,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"  4. To notify `FileUtil` of the switch between different printing mode, add the following method to `FileUtil`."},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  public static void setPrettyPrintingMode(boolean isPrettyPrintingAdopted) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"      isPrettyPrintingUsed \u003d isPrettyPrintingAdopted;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"  5. It is now possible to notify `FileUtil` of the printing mode switch by extracting the argument from the `CliArguments` object in the `main` method of `RepoSense.java` and passing it to the corresponding method in `FileUtil`."},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  FileUtil.setPrettyPrintingMode(cliArguments.isPrettyPrintingUsed());"},{"lineNumber":172,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"  Now the parsing of argument and changing of printing mode should have been completed."},{"lineNumber":175,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. By combining the changes in hint 1, hint 2, and hint 3, you should be able to get a possible solution."},{"lineNumber":180,"author":{"gitId":"-"},"content":"  "},{"lineNumber":181,"author":{"gitId":"-"},"content":"  Try the command `java -jar RepoSense.jar --repos https://github.com/reposense/RepoSense.git --view --use-json-pretty-printing` and check the generated JSON files to see if it works."},{"lineNumber":182,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 2: Add exception message during repository cloning to the summary view**\" type\u003d\"primary\"\u003e"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"  **Task 2: Add exception message during repository cloning to the summary view**"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"  1. Open a [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/)."},{"lineNumber":191,"author":{"gitId":"-"},"content":"  2. You should see that there is a red panel in the summary view containing the following message, indicating that there is an issue in the cloning process of the repository `reposense/testrepo-Empty`."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":194,"author":{"gitId":"-"},"content":"  reposense/testrepo-Empty[master]"},{"lineNumber":195,"author":{"gitId":"-"},"content":"          Failed to clone from https://github.com/reposense/testrepo-Empty.git"},{"lineNumber":196,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"  **Your task**"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"  For the repository with the message `Failed to clone from ...`, find out what exception causes this cloning error, and add that exception message to the panel as well."},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"  You can find out what [`ErrorSummary.java`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/ErrorSummary.java) and [`RepoCloner.java`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/RepoCloner.java) do, and where they are used."},{"lineNumber":205,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"  Try to understand the cloning process. "},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * The cloning process is invoked by [`RepoGenerator.java`](https://github.com/reposense/RepoSense/blob/master/src/main/java/reposense/report/ReportGenerator.java) in the `cloneAndAnalyzeRepos` method, which subsequently calls `cloneBare` in `RepoCloner.java` to start the cloning. "},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * The `cloneAndAnalyzeRepos` method will then call `getRepoLocation`  in `RepoCloner.java` to try to get the repository location. "},{"lineNumber":213,"author":{"gitId":"-"},"content":"  * Beneath the surface, `RepoCloner` will first execute `spawnCloneProcess` and then execute `waitForCloneProcess` when it is invoked by `RepoGenerator` for the first and second time respectively."},{"lineNumber":214,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"  In `RepoCloner`, the potential exceptions in `spawnCloneProcess` and `waitForCloneProcess` are caught but not recorded by `ErrorSummary`. "},{"lineNumber":219,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. One solution is shown as the following:"},{"lineNumber":224,"author":{"gitId":"-"},"content":"  "},{"lineNumber":225,"author":{"gitId":"-"},"content":"  Add this to the catch block of `spawnCloneProcess` and `waitForCloneProcess`, so that the message will be captured in `summary.json`."},{"lineNumber":226,"author":{"gitId":"-"},"content":"  "},{"lineNumber":227,"author":{"gitId":"-"},"content":"  ``` "},{"lineNumber":228,"author":{"gitId":"-"},"content":"  ErrorSummary.getInstance().addErrorMessage(config.getDisplayName(), e.getMessage());"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":230,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"This is only for your practice. There is no need for you to commit this change and submit it in a pull request."},{"lineNumber":237,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"{{ step(4) }} **Next Step**"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"You can now proceed to learn the [contributing workflow](workflow.html)."},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"## Frontend"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"This section is for developers who want to contribute to the frontend of RepoSense. You may skip this section if you want to contribute as a pure backend developer."},{"lineNumber":250,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"The frontend implementation of RepoSense is located in `frontend/src`."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"{{ step(1) }} **Learn the necessary tools**"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"It is necessary for you to learn the basics of Vue.js, Pug, and SCSS before working on the project. "},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"### Vue.js"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"Vue.js uses JavaScript as its programming language. Before learning **Vue.js**, you may need to first get yourself familiar with JavaScript syntax first."},{"lineNumber":265,"author":{"gitId":"-"},"content":"You can refer to the [Javascript documentation](https://devdocs.io/javascript/) to learn the basic syntax. There are plenty of other resources available and please feel free to find the resource most suitable for you."},{"lineNumber":266,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"yhtMinceraft1010X"},"content":"RepoSense uses **Vue.js** (Vue3) in its front-end implementation. In particular, major user interface components, such as [summary view](report.html#summary-view-v-summary-js), [authorship view](report.html#authorship-view-v-authorship-js), and [zoom view](report.html#zoom-view-v-zoom-js), are implemented as Vue components. The corresponding source files are in `frontend/src`."},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"yhtMinceraft1010X"},"content":"* If you are new to Vue.js, you may want to start learning by looking at [the beginner tutorial](https://www.vuemastery.com/courses/intro-to-vue-js/)."},{"lineNumber":271,"author":{"gitId":"yhtMinceraft1010X"},"content":"* You can dive deeper later by checking the [Vue.js documentation](https://vuejs.org/guide/introduction.html) to learn about essential concepts such as component life cycle hooks, and component properties."},{"lineNumber":272,"author":{"gitId":"-"},"content":"* It is recommended if you can work on some small projects first to gain more solid understanding of Vue.js."},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"The guide above uses HTML as the component template, which is not the case with RepoSense. You may wish to learn more about [Pug](#pug) and its connection with HTML."},{"lineNumber":277,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"#### Vuex"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"RepoSense uses **Vuex** for the state management of the Vue components."},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"* You can check the [Vuex guide](https://vuex.vuejs.org/guide/#the-simplest-store) to find out how Vuex can be used in a Vue project."},{"lineNumber":284,"author":{"gitId":"-"},"content":"* There is also a [course](https://vueschool.io/courses/vuex-for-everyone) available that will walk you through an example of creating Vue application with Vuex."},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"### Pug"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"RepoSense uses Pug files as the template of each Vue component. The corresponding HTML templates will later be generated from the Pug files by [spuild](https://github.com/ongspxm/spuild2) when generating the report."},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"Since Pug is used to generate the HTML template, it is recommended that you have a basic knowledge of HTML before starting to learn Pug. Once you understand how HTML works, you can proceed to focus on how Pug is translated into HTML."},{"lineNumber":295,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"* You can refer to the [official documentation](https://pugjs.org/api/getting-started.html) or [this tutorial](https://www.youtube.com/watch?v\u003dkt3cEjjkCZA) to learn about the syntax of pug and how it is translated into HTML."},{"lineNumber":298,"author":{"gitId":"-"},"content":"* To get a hands-on experience, here is a [Pug to HTML converter](https://pughtml.com/). Feel free to try out a couple of examples on your own."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"### Scss"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"SCSS is used for styling the Pug template. The corresponding CSS will later be generated from the SCSS files by [spuild](https://github.com/ongspxm/spuild2) when generating the report. The corresponding source files are in `frontend/src/styles`."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"It is recommended that you have a basic knowledge of CSS before starting to learn SCSS. Once you understand how CSS works, you can proceed to focus on how SCSS is translated into CSS."},{"lineNumber":309,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"* You can refer to the [style rules](https://sass-lang.com/documentation/style-rules) to learn about the similarities and differences between SCSS and CSS."},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"{{ step(2) }} **Learn the RepoSense frontend architecture**"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"* You may want to refer to the [frontend architecture](report.html#report-architecture) to understand the implementation."},{"lineNumber":316,"author":{"gitId":"-"},"content":"* Another way for you to understand the frontend is to use **Vue.js devtools** to learn how the various Vue Components interact with each other. You can refer to the [frontend debugging guide](workflow.html#debugging-front-end) for more information."},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"{{ step(3) }} **Gain some hands-on experience**"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"Here are some small tasks for you to gain some basic knowledge of the code related to the RepoSense frontend. You can do each in a separate branch in your local copy of the code."},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 1: Highlight the selected author name in the summary view**\" type\u003d\"primary\"\u003e"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"  **Task 1: Highlight the selected author name in the summary view**"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"  1. Open a [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/)."},{"lineNumber":327,"author":{"gitId":"-"},"content":"  2. Randomly open the authorship contribution panel of an author (The icon is `\u003c/\u003e`)."},{"lineNumber":328,"author":{"gitId":"-"},"content":"  3. You should see that, after you open the panel, the author title background on the chart panel becomes yellow, and the background of the `\u003c/\u003e` icon you clicked becomes green."},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"  **Your Task**"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"-"},"content":"  Make corresponding changes to `summary charts` so that in step 3, after opening the panel, the font colour of the author title (in the form of `authorDisplayName(authorName)`) on the chart panel also becomes green."},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"  Try to locate where the author title is in [`v-summary-charts.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/components/v-summary-charts.vue)."},{"lineNumber":337,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"  You can check what `activeUser` and `activeRepo` do in [`v-summary-charts.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/components/v-summary-charts.vue)."},{"lineNumber":342,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"  Refer to how changes are made to the title background and icon background in [`v-summary-charts.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/components/v-summary-charts.vue)."},{"lineNumber":347,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 4\"\u003e"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"  Some of the CSS styling for `v-summary-charts.vue` is in [`style.scss`](https://github.com/reposense/RepoSense/blob/master/frontend/src/styles/style.scss). You can add corresponding class selector if necessary."},{"lineNumber":352,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. One solution is shown as the following:"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"  Add this to `v_summary.scss`."},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":361,"author":{"gitId":"-"},"content":"  .active-text {"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    color: mui-color(\u0027green\u0027);"},{"lineNumber":363,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":364,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"  In `v-summary-charts.vue`, locate `summary-chart__title--name`, and add the following to its `v-bind:class` attribute map."},{"lineNumber":367,"author":{"gitId":"-"},"content":""},{"lineNumber":368,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":369,"author":{"gitId":"-"},"content":"  \u0027active-text\u0027: user.name \u003d\u003d\u003d activeUser \u0026\u0026 user.repoName \u003d\u003d\u003d activeRepo"},{"lineNumber":370,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":371,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 2: Add tooltip for file path in authorship panel**\" type\u003d\"primary\"\u003e"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"  **Task 2: Add tooltip for file path in authorship panel**"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"  1. Open a [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/)."},{"lineNumber":380,"author":{"gitId":"-"},"content":"  2. Randomly open the authorship contribution panel of an author (The icon is `\u003c/\u003e`)."},{"lineNumber":381,"author":{"gitId":"-"},"content":"  3. Select a random file in the authorship contribution panel, and hover your mouse on an icon on the file title, a corresponding tooltip will show up, suggesting what the purpose of the icon is. However, when you hover the mouse over the file path on the file title, there is no tool tip shown, even if clicking the path itself will also trigger some event."},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"  \u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"  For example, if you open the authorship contribution panel of an author in `reposense/RepoSense[master]` and hover the mouse over the triangular icon beside the file path `src/main/java/reposense/model/Author.java`, you should see a tooltip saying `Click to hide file details` above the icon. However, when you hover the mouse over the file path `src/main/java/reposense/model/Author.java`, there is no corresponding tooltip shown."},{"lineNumber":386,"author":{"gitId":"-"},"content":"  \u003c/box\u003e"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"  **Your Task**"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"  Make corresponding `authorship contribution panel` so that in step 3, when hovering your mouse over the file path:"},{"lineNumber":391,"author":{"gitId":"-"},"content":"  * A tip saying `This is the file path. Click to hide file details` will show up when the file details are shown"},{"lineNumber":392,"author":{"gitId":"-"},"content":"  * A tip saying `This is the file path. Click to show file details` will show up when the file details are not shown."},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"  Try to locate where the file title and the file path are in [`v-authorship.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/v-authorship.vue)."},{"lineNumber":397,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"  You can check how tooltip is added for the triangular icon in the file title in [`v-authorship.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/v-authorship.vue)."},{"lineNumber":402,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"  You can check what `file.active` does and how it is used to switch between different tooltip messages when hovering the mouse on the corresponding icon."},{"lineNumber":407,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. One solution is shown as the following:"},{"lineNumber":412,"author":{"gitId":"-"},"content":"  "},{"lineNumber":413,"author":{"gitId":"-"},"content":"  1. In `v-authorship.vue`, locate the section that iterates through each file in `selectedFiles`. "},{"lineNumber":414,"author":{"gitId":"-"},"content":"  2. There is a specific portion of the section that renders the toggle icon, the file index, and the file path of the file title."},{"lineNumber":415,"author":{"gitId":"-"},"content":"  3. Try to locate the `span` tag that renders `file.path`, and wraps it inside a new `tooptip`."},{"lineNumber":416,"author":{"gitId":"-"},"content":"  4. In the `tooltip`, use the following instructions to handle the switch of tooltip message."},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":419,"author":{"gitId":"-"},"content":"  span.tooltip-text(v-show\u003d\"file.active\") This is the file path. Click to hide file details"},{"lineNumber":420,"author":{"gitId":"-"},"content":"  span.tooltip-text(v-show\u003d\"!file.active\") This is the file path. Click to show file details"},{"lineNumber":421,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":422,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"\u003cpanel header\u003d\"**Task 3: Add tooltip for commit message title in zoom panel**\" type\u003d\"primary\"\u003e"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"  **Task 3: Add tooltip for commit message title in zoom panel**"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"  1. Open a [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/)."},{"lineNumber":431,"author":{"gitId":"-"},"content":"  2. Randomly open the commits panel of an author."},{"lineNumber":432,"author":{"gitId":"-"},"content":"  3. Select a random commit in the commits panel, and hover your mouse on the icons on the commit title, there is no tooltip shown saying that it will redirect you to a different site."},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"  \u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"  For example, given the [report](https://dashboard-1507-pr-reposense-reposense.surge.sh/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003deugenepeh\u0026zR\u003dreposense%2FRepoSense%5Bmaster%5D\u0026zACS\u003d99.28792569659443\u0026zS\u003d2017-10-09\u0026zFS\u003d\u0026zU\u003d2021-04-04\u0026zMG\u003dundefined\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse), if you hover the mouse over the commit title `README: add acknowledgements section (#978)`, there is no corresponding tooltip shown, but when you click on the commit title, you will be redirected to a different site to see the commit details."},{"lineNumber":437,"author":{"gitId":"-"},"content":"  \u003c/box\u003e"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"  **Your Task**"},{"lineNumber":440,"author":{"gitId":"-"},"content":""},{"lineNumber":441,"author":{"gitId":"-"},"content":"  Make corresponding changes to `zoom panel` so that in step 3, when hovering your mouse over the commit title, a tooltip saying `Click to view the detailed file changes in the commit` will show up on the commit title."},{"lineNumber":442,"author":{"gitId":"-"},"content":""},{"lineNumber":443,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 1\"\u003e"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"  Try to locate where the commit title is in [`v-zoom.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/v-zoom.vue)."},{"lineNumber":446,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 2\"\u003e"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"  You can check how tooltip is added for other icons in [`v-zoom.vue`](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/v-zoom.vue)."},{"lineNumber":451,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Hint 3\"\u003e"},{"lineNumber":454,"author":{"gitId":"-"},"content":""},{"lineNumber":455,"author":{"gitId":"-"},"content":"  Check what `selectedCommits` does and how the link and commit title of each commit is retrieved."},{"lineNumber":456,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"  \u003cpanel header\u003d\"Suggested solution\"\u003e"},{"lineNumber":459,"author":{"gitId":"-"},"content":""},{"lineNumber":460,"author":{"gitId":"-"},"content":"  There is more than 1 way to achieve this. One solution is shown as the following:"},{"lineNumber":461,"author":{"gitId":"-"},"content":"  "},{"lineNumber":462,"author":{"gitId":"yhtMinceraft1010X"},"content":"  1. In `v-zoom.vue`, locate the section that iterates through each `day` in `selectedCommits`."},{"lineNumber":463,"author":{"gitId":"-"},"content":"  2. The component that helps render the commit message title should be an `a` tag which uses the `getSliceLink` method to set the link to the commit details and uses `slice.messageTitle` to show the commit message title."},{"lineNumber":464,"author":{"gitId":"-"},"content":"  3. Wrap the `a` tag in a new `tooltip`."},{"lineNumber":465,"author":{"gitId":"-"},"content":"  4. In the `tooltip`, add the following content to show the tooltip message."},{"lineNumber":466,"author":{"gitId":"-"},"content":""},{"lineNumber":467,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":468,"author":{"gitId":"-"},"content":"  span.tooltip-text Click to view the detailed file changes in the commit"},{"lineNumber":469,"author":{"gitId":"-"},"content":"  ```"},{"lineNumber":470,"author":{"gitId":"-"},"content":"  \u003c/panel\u003e"},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"\u003c/panel\u003e"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":475,"author":{"gitId":"-"},"content":""},{"lineNumber":476,"author":{"gitId":"-"},"content":"This is only for your practice. There is no need for you to commit this change and submit it in a pull request."},{"lineNumber":477,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":478,"author":{"gitId":"-"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"{{ step(4) }} **Next Step**"},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"You can now proceed to learn the [contributing workflow](workflow.html)."},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"-"},"content":"## DevOps"},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"If you want to understand and contribute to the DevOps aspect of RepoSense, you can refer to the [DevOps guide](https://github.com/reposense/RepoSense/wiki/DevOps-guide) for more information."}],"authorContributionMap":{"yhtMinceraft1010X":7,"-":480}},{"path":"docs/dg/projectManagement.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Project management\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"This page contains information about project management tasks. The target audience is senior developers (and above)."},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Merging PRs"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Use the \u0027squash and merge\u0027 option** unless the situation warrants a different option."},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **For the merge commit**, follow conventions at [_GitHub conventions_ @SE-EDU](https://se-education.org/guides/conventions/github.html)."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"## Making a release on GitHub"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Before making a release, please check the following prerequisites:"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"* Ensure that you have **JDK `1.8.0`** installed (\u003d\u003dNot other major release versions such as **JDK `9`** or **JDK `11`**\u003d\u003d)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Ensure that the `JAVA_HOME` environment variable is correctly set to your JDK installation directory. You can refer to the [JDK Installation Guide](https://docs.oracle.com/cd/E19182-01/821-0917/inst_jdk_javahome_t/index.html)."},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Ensure that you have merged the [upstream](https://github.com/RepoSense/reposense) `master` branch into both the local and upstream `release` branch according to the following steps:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    1. In your local repository, reset your `master` branch to be exactly the same as the upstream `master` branch."},{"lineNumber":32,"author":{"gitId":"-"},"content":"    1. Switch to the local `release` branch, and merge the `master` branch into it with `git merge master --no-ff` (no fast forward to keep the commit history for releases)."},{"lineNumber":33,"author":{"gitId":"-"},"content":"    1. Push the local `release` branch directly to the [upstream `release` branch](https://github.com/reposense/RepoSense/tree/release) (make sure you have the push access)."},{"lineNumber":34,"author":{"gitId":"-"},"content":"    "},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"To make a release for RepoSense on GitHub, please follow the `Creating a release` section in the [GitHub Docs](https://docs.github.com/en/github/administering-a-repository/managing-releases-in-a-repository).\u003cbr\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"Take note of the following when making the release according to the above guide:"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* When entering a release version number, use semantic versioning with some small tweaks:"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Use `MAJOR.MINOR` as the version number when the release includes new features and/or major changes."},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Use `MAJOR.MINOR.PATCH` as the version number when the release only includes bug fixes and/or minor changes."},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * Append `rc` to the version number to indicate that the release is a pre-release that is not ready to be used in production."},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Enter the release title as `RepoSense vxxx` where `xxx` is the version number. Enter the release description by referring to the previous [RepoSense releases](https://github.com/reposense/RepoSense/releases)."},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Before launching the release, generate the `RepoSense.jar` file and attach it to the release."},{"lineNumber":44,"author":{"gitId":"-"},"content":"  1. Switch to the `release` branch."},{"lineNumber":45,"author":{"gitId":"-"},"content":"  1. In the terminal, change the directory to the project root directory."},{"lineNumber":46,"author":{"gitId":"-"},"content":"  1. Run `gradlew --version` to check that the JDK version is 1.8.0."},{"lineNumber":47,"author":{"gitId":"-"},"content":"  1. Run `gradlew shadowJar`, and the Jar file will be generated at `{buildDir}/jar/`."},{"lineNumber":48,"author":{"gitId":"-"},"content":"  1. Check that the Jar file is working. You may need to check that the report can be generated from the Jar file both locally and remotely by following the [Generating Reports Guide](../ug/generatingReports.html)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"After making the release, please also remember to deploy the production website using the [deploy guide](#deploying-the-production-website)."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"## Deploying the production website"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"We have two versions of the website:"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. **Production website** at https://reposense.org"},{"lineNumber":59,"author":{"gitId":"-"},"content":"   * matches the latest released version"},{"lineNumber":60,"author":{"gitId":"-"},"content":"   * deployed manually after each new release"},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. **Dev website** at https://reposense.org/RepoSense"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   * matches the latest `master` branch"},{"lineNumber":63,"author":{"gitId":"-"},"content":"   * deployed automatically by Travis whenever the `master` branch is updated"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"The production website differs from the dev website in some ways, e.g.,"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"* It has a `CNAME` file (to indicate that it is the target destination for the `reposense.org` domain name)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Its DG pages show a warning that it is not the latest version of the DG."},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"MarkBind mainly manages these variations via the `site.config` file. That is why the `site.config` file in the `release` branch is slightly different from the one in the `master` branch."},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"After each release, do the following steps to deploy the production website:"},{"lineNumber":73,"author":{"gitId":"-"},"content":"1. Switch to the `release` branch"},{"lineNumber":74,"author":{"gitId":"-"},"content":"1. `cd docs`"},{"lineNumber":75,"author":{"gitId":"-"},"content":"1. `markbind build`"},{"lineNumber":76,"author":{"gitId":"-"},"content":"1. `markbind deploy` (make sure you have the push access to https://github.com/reposense/reposense.github.io)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"1. After a few minutes, check https://reposense.org to ensure it has been updated as intended."},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"## Hot patching after the release"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"If critical bugs are found in the release, take the following steps to hot patch it:"},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. Switch to the `release` branch."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. Implement the fixes, commit them, and create a pull request from your forked `release` branch to the upstream `release` branch."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. After merging, release a new version of RepoSense with the `release` branch according to the above guide."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. Merge the `release` branch back into the `master` branch by creating a separate pull request."}],"authorContributionMap":{"yhtMinceraft1010X":2,"-":85}},{"path":"docs/dg/report.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"HTML report\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"The report\u0027s source files are located in [`frontend/src`](https://github.com/reposense/RepoSense/blob/master/frontend/src) and are built by [vue-cli](https://github.com/vuejs/vue-cli) before being packaged into the JAR file to be extracted as part of the report."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"[Vue](https://vuejs.org/api/) (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. It is heavily utilized in the report to update the information in the various views dynamically. (Style guide available [here](https://vuejs.org/style-guide/), Developer tool available [here](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd)). Vue lifecycle hooks are the defined methods that get executed in a particular stage of the Vue object lifespan. The following is the Vue lifecycle diagram taken from [here](https://vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram) indicating the hook sequence:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"![vue lifecycle diagram](../images/vue-lifecycle-diagram.png)"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"The following is a snapshot of the report:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"![report screenshot](../images/report-summary.png)"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Report architecture"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"![report architecture](../images/report-architecture.png)"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"The main Vue object (`app.vue`) is responsible for loading the report via an async call to `api.js`, which parses `summary.json`. Its `repos` attribute is tied to the global `window.REPOS`, and is passed into the various other modules when the information is needed."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"The report interface is broken down into two main parts"},{"lineNumber":26,"author":{"gitId":"-"},"content":"- the summary view"},{"lineNumber":27,"author":{"gitId":"-"},"content":"- and the tabbed interface"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"The summary view acts as the main report, which shows the various calculations. \u003c/br\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"The tabbed interface is responsible for loading various modules such as authorship and zoom to display additional information."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Javascript and Vue files"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"- **main.js** - sets up plugins and 3rd party components used in the report"},{"lineNumber":37,"author":{"gitId":"-"},"content":"- [**app.vue**](#app-app-vue) - module that supports the report interface"},{"lineNumber":38,"author":{"gitId":"-"},"content":"- [**api.js**](#data-loader-api-js) - loading and parsing of the report content"},{"lineNumber":39,"author":{"gitId":"-"},"content":"- [**v_summary.vue**](#summary-view-v-summary-vue) - module that supports the summary view"},{"lineNumber":40,"author":{"gitId":"-"},"content":"- [**v_authorship.vue**](#authorship-view-v-authorship-vue) - module that supports the authorship tab view"},{"lineNumber":41,"author":{"gitId":"-"},"content":"- [**v_zoom.vue**](#zoom-view-v-zoom-vue) - module that supports the zoom tab view"},{"lineNumber":42,"author":{"gitId":"-"},"content":"- [**v_ramp.vue**](#ramp-view-v-ramp-vue) - module that supports the ramp chart view"},{"lineNumber":43,"author":{"gitId":"-"},"content":"- [**v_segment.vue**](#segment-view-v-segment-vue) - module that supports the code segment view"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"## JSON report files"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"- **summary.json** - a list of all the repositories and their respective details"},{"lineNumber":50,"author":{"gitId":"-"},"content":"- **projName/commits.json** - contains information of the users\u0027 commits information (e.g., line deletion, insertion, etc.), grouped by date"},{"lineNumber":51,"author":{"gitId":"-"},"content":"- **projName/authorship.json** - contains information from git blame, detailing the author of each line for all the processed files"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"## App ([app.vue](https://github.com/reposense/RepoSense/blob/master/frontend/src/app.vue))"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"This contains the logic for the main VueJS object, `app.vue`, which is the entry point for the web application."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"Vuex in `store.js` is used to pass the necessary data into the relevant modules."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"`v_summary`, `v_authorship`, `v_zoom`, `v_segment`, and `v_ramp` are components embedded into the report and will render the corresponding content based on the data passed into it from Vuex."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"### Loading of report information"},{"lineNumber":64,"author":{"gitId":"-"},"content":"The main Vue object depends on the `summary.json` data to determine the right `commits.json` files to load into memory. This is handled by `api.js`, which loads the relevant file information from the network files if available; otherwise, a report archive, `archive.zip`, has to be used."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"Once the relevant `commit.json` files are loaded, all the repo information will be passed into `v_summary` to be loaded in the summary view as the relevant ramp charts."},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"### Activating additional view modules"},{"lineNumber":69,"author":{"gitId":"-"},"content":"Most activity or actions should happen within the module itself, but in the case where there is a need to spawn or alter the view of another module, an event is emitted from the first module to the Vuex store, which then handles the data received and passes it along to the relevant modules."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"### Hash link"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Other than the global main Vue object, another global variable we have is the `window.hashParams`. This object is responsible for generating the relevant permalink for a specific view of the report\u0027s summary module."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"## Data loader ([api.js](https://github.com/reposense/RepoSense/blob/master/frontend/src/utils/api.js))"},{"lineNumber":75,"author":{"gitId":"-"},"content":"This is the module that is in charge of loading and parsing the data files generated as part of the report."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"### Loading from ZIP file"},{"lineNumber":78,"author":{"gitId":"-"},"content":"Due to security design, most modern browsers (e.g., Chrome) do not allow web pages to obtain local files using the directory alone. As such, a ZIP archive of the report information will be produced alongside the report generation."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"This archive will be used in place of the network files to load information into the report when the network files are unavailable."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"The API module will be handling all requests for all the JSON data files. If the network file is not available, the files will be obtained from the zip archive provided."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"### Retrieving and parsing information"},{"lineNumber":85,"author":{"gitId":"-"},"content":"After the JSON files are loaded from their respective sources, the data will be parsed as objects and included inside the global storage object, `window.REPOS`,  in the right format."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"For the basic skeleton of `window.REPOS`, refer to the generated `summary.json` file in the report for more details."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"## Summary view ([v-summary.vue](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/v-summary.vue))"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"The `v_summary` module is in charge of loading the ramp charts from the corresponding `commits.json`."},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ReportArchitectureSummary.puml\"/\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"### Initializing the data for the ramp charts"},{"lineNumber":98,"author":{"gitId":"-"},"content":"The summary module is activated after the information is loaded from the main Vue.JS object. At creation, the `repo` attribute is populated with the `window.REPOS` object, which contains information loaded from `summary.json`."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"### Filtering users and repositories"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The commits information is retrieved from the corresponding project folders for each repository. This information will be filtered and sorted before being passed into the template to be displayed as ramp charts."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"## Authorship view ([v-authorship.vue](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/v-authorship.vue))"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"The authorship module retrieves the relevant information from the corresponding `authorship.json` file if it is not yet loaded. If it has been loaded, the data will be written into `window.REPOS` and be read from there instead."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/ReportArchitectureAuthorship.puml\"/\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"### Showing relevant information by authors"},{"lineNumber":112,"author":{"gitId":"-"},"content":"The files will be filtered, picking only files the selected author has written in. The lines are then split into chunks of \"touched\" and \"untouched\" code segments displayed in the tab view which will be popped up on the right side of the screen."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"## Zoom view ([v-zoom.vue](https://github.com/reposense/RepoSense/blob/master/frontend/src/views/v-zoom.vue))"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"The `v_zoom` module is in charge of filtering and displaying the commits from the ramp chart\u0027s selected sub-range."},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"## Ramp view ([v-ramp.vue](https://github.com/reposense/RepoSense/blob/master/frontend/src/components/v-ramp.vue))"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"The `v_ramp` module is responsible for receiving the relevant information from `v_summary` and generating ramp charts that contain ramp slices."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Padding for dates"},{"lineNumber":127,"author":{"gitId":"-"},"content":"For ramps between the date ranges, the slices will be selected and it will be pre and post padded with empty slices to align the ramp slice between the `sinceDate` and `untilDate`. The ramps will then be rendered with the slices in the right position."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"## Segment view ([v-segment.vue](https://github.com/reposense/RepoSense/blob/master/frontend/src/components/v-segment.vue))"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"The `v-segment` module is used as a component in `v_authorship`. It separates the code in terms of \"touched\" and \"untouched\" segments and only loads each \"untouched\" segment when it is toggled."}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":132}},{"path":"docs/dg/settingUp.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Setting up\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"**Prerequisites:**"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **JDK `1.8.0_60`** up to **`17`** ([download :fas-download:](https://www.oracle.com/technetwork/java/javase/downloads/index.html))."},{"lineNumber":13,"author":{"gitId":"-"},"content":"* **npm** `6.0` or later ([download :fas-download:](https://www.npmjs.com/get-npm))."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* **git `2.14`** or later ([download :fas-download:](https://git-scm.com/downloads))."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"  Type `java -version`, `npm -v` and `git --version` respectively on your OS terminal and ensure that you have the correct version of each prerequisite installed."},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/box\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Getting the code"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Fork** the [reposense/reposense](https://github.com/reposense/RepoSense) repo."},{"lineNumber":26,"author":{"gitId":"-"},"content":"1. **Clone** the fork to your computer."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"## Setting up the IDE"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"The recommended IDE is **Intellij IDEA**. While it is not compulsory to use it, note that we will not be able to help you troubleshoot IDE problems if you use any other IDE."},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. **Ensure you have configured IDEA for the correct JDK**, as explained in [this tutorial](https://se-education.org/guides/tutorials/intellijJdk.html)."},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**, as explained in [this tutorial](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"## Verifying the setup"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"This project is already configured to use Gradle for build automation. If you are new to Gradle, see [this tutorial](https://se-education.org/guides/tutorials/gradle.html) to learn how to use it."},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Open a command prompt and navigate to the project root."},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Run `gradlew clean build` (`./gradlew clean build` if you on a Unix-like OS), and ensure that it finishes with a `BUILD SUCCESSFUL` message."},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Run the tests using the `gradlew test systemtest` command and ensure it succeeds too."},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. You can also try running the app using code, as given in the panel below."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"{{ embed(\u0027Developer guide → **Workflow → Running the app from code**\u0027, \u0027workflow.md#section-running-from-code\u0027, level\u003d2) }}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"## Before you start coding"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"... read the [Workflow](workflow.html) section."}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":55}},{"path":"docs/dg/styleGuides.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Style guides\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Our coding standards are mostly based on those at [se-education.org/guides](https://se-education.org/guides)."},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* [**CSS** coding standard](https://se-education.org/guides/conventions/css.html)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* [**Files/folders** naming conventions](https://se-education.org/guides/conventions/files.html)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* [**HTML** coding standard](https://se-education.org/guides/conventions/html.html)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"* [**Markdown/MarkBind** coding standard](https://se-education.org/guides/conventions/markdown.html)"},{"lineNumber":17,"author":{"gitId":"-"},"content":"* [**Java** coding standard](https://se-education.org/guides/conventions/java/index.html)"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* [**JavaScript** coding standard](https://se-education.org/guides/conventions/javascript.html)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Documentation**: Follow the [**Google developer documentation style guide**](https://developers.google.com/style)."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Note on Ternary Operators:"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Ternary operators can be used to shorten if-else blocks such as this:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"```"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"LocalDateTime min \u003d ARBITRARY_FIRST_COMMIT_DATE_UTC.withZoneSameInstant(zoneId).toLocalDateTime();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"if (!commitInfos.isEmpty()) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    min \u003d commitInfos.get(0).getTime();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"return min;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"```"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"The result would look something like this:"},{"lineNumber":32,"author":{"gitId":"-"},"content":"```"},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"return (commitInfos.isEmpty())"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"        ? ARBITRARY_FIRST_COMMIT_DATE_UTC.withZoneSameInstant(zoneId).toLocalDateTime()"},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"        : commitInfos.get(0).getTime();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"```"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"To preserve readability, it is recommended that if-else blocks should only be "},{"lineNumber":39,"author":{"gitId":"-"},"content":"converted to ternary operators if the resultant code can be kept at most 3 lines long"},{"lineNumber":40,"author":{"gitId":"-"},"content":"(in accordance to the coding standard)."},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"## Additional Javadoc requirements:"},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"In addition to what has been mentioned in the [**Java** coding standard (SE-EDU)](https://se-education.org/guides/conventions/java/index.html) and [**Google Java Style Guide**](https://google.github.io/styleguide/javaguide.html), we also stipulate the following standards for Javadoc:"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"* If Javadoc is written for a method, all input parameters should be described in the Javadoc, either in the description with `@code tags` or through `@param` block tags."},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * If `@param` block tags are used, they must be used for all parameters."},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * This is not necessary (although still recommended) for methods with `@Override` annotations if Javadoc is used. However, if the method that is being overriden is part of your code and has Javadoc, all parameters must be described."},{"lineNumber":47,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"Negative Examples:"},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"```"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"Not okay (Only mentions zoneId parameter):"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"/**"},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Returns a {@link LocalDateTime} object adjusted for timezone given by {@code zoneId}."},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":" */"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"    //Code here"},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":"Not okay (@param tag used only for zoneId)"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"/**"},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":" *"},{"lineNumber":63,"author":{"gitId":"yhtMinceraft1010X"},"content":" * @param zoneId The timezone ID to adjust the sinceDate to."},{"lineNumber":64,"author":{"gitId":"yhtMinceraft1010X"},"content":" */"},{"lineNumber":65,"author":{"gitId":"yhtMinceraft1010X"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"    //Code here"},{"lineNumber":67,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":68,"author":{"gitId":"yhtMinceraft1010X"},"content":"```"},{"lineNumber":69,"author":{"gitId":"yhtMinceraft1010X"},"content":"Positive Example #1:"},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"```"},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"Okay (No @param tags):"},{"lineNumber":72,"author":{"gitId":"yhtMinceraft1010X"},"content":"/**"},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":" */"},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":"    //Code here"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"```"},{"lineNumber":80,"author":{"gitId":"yhtMinceraft1010X"},"content":"Positive Example #2:"},{"lineNumber":81,"author":{"gitId":"yhtMinceraft1010X"},"content":"```"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"Okay (@param tags used for all inputs):"},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"/**"},{"lineNumber":84,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Returns a {@link LocalDateTime} object by adjusting {@code sinceDate}"},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":" * to the timezone given by {@code zoneId}."},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":" * "},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":" * @param sinceDate The date prior to the timezone conversion."},{"lineNumber":88,"author":{"gitId":"yhtMinceraft1010X"},"content":" * @param zoneId The timezone ID to adjust the sinceDate to."},{"lineNumber":89,"author":{"gitId":"yhtMinceraft1010X"},"content":" */"},{"lineNumber":90,"author":{"gitId":"yhtMinceraft1010X"},"content":"public LocalDateTime adjustTimeZone(LocalDateTime sinceDate, ZoneId zoneId) {"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"    //Code here"},{"lineNumber":92,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":"```"},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":95,"author":{"gitId":"yhtMinceraft1010X"},"content":"* Within the main code, if an exception is thrown in a method (both header and body) for which Javadoc is written, a `@throws` tag must be used to describe how the exception is likely to arise."},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * This requirement does not apply to test code."},{"lineNumber":97,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * One `@throws` tag per unique exception."},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * The order of exceptions in the `@throws` tag block should match that of the method\u0027s `throws` statement."},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"```"},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"Not okay (order of exceptions in tag block and method signature do not match):"},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"/**"},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Returns a {@link LocalDateTime} object from {@code dateString}."},{"lineNumber":103,"author":{"gitId":"yhtMinceraft1010X"},"content":" * "},{"lineNumber":104,"author":{"gitId":"yhtMinceraft1010X"},"content":" * @throws ParseException if {@code dateString} cannot be parsed."},{"lineNumber":105,"author":{"gitId":"yhtMinceraft1010X"},"content":" * @throws NullPointerException if {@code dateString} is null."},{"lineNumber":106,"author":{"gitId":"yhtMinceraft1010X"},"content":" */"},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"public LocalDateTime parseDate(String dateString) throws NullPointerException, ParseException {"},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"    String trimmedString \u003d dateString.toUpperCase(); // NullPointerException may happen here."},{"lineNumber":109,"author":{"gitId":"yhtMinceraft1010X"},"content":"    // Code here"},{"lineNumber":110,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":111,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"Should be:"},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"/**"},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Returns a {@link LocalDateTime} object from {@code dateString}."},{"lineNumber":115,"author":{"gitId":"yhtMinceraft1010X"},"content":" * "},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":" * @throws NullPointerException if {@code dateString} is null."},{"lineNumber":117,"author":{"gitId":"yhtMinceraft1010X"},"content":" * @throws ParseException if {@code dateString} cannot be parsed."},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":" */"},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"public LocalDateTime parseDate(String dateString) throws NullPointerException, ParseException {"},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"    String trimmedString \u003d dateString.toUpperCase(); // NullPointerException may happen here."},{"lineNumber":121,"author":{"gitId":"yhtMinceraft1010X"},"content":"    // Code here"},{"lineNumber":122,"author":{"gitId":"yhtMinceraft1010X"},"content":"}"},{"lineNumber":123,"author":{"gitId":"yhtMinceraft1010X"},"content":"```"},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":125,"author":{"gitId":"yhtMinceraft1010X"},"content":""}],"authorContributionMap":{"yhtMinceraft1010X":90,"-":35}},{"path":"docs/dg/workflow.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Workflow\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"Our workflow is mostly based on the guidelines given at se-education.org/guides."},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"**To submit a PR**, follow [this guide](https://se-education.org/guides/guidelines/PRs.html), but note the following:"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* As we squash the commits when merging a PR, there is \u003d\u003dno need to follow a strict commit organization or write elaborate commit messages for each commit\u003d\u003d.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  However, when pushing new commits to your PR branch, do clean up _new_ commits (i.e., commits not yet pushed) e.g., delete temporary print statements added for debugging purposes."},{"lineNumber":20,"author":{"gitId":"-"},"content":"* In the PR description, please propose a commit message to be used when the PR is merged eventually. The commit message should follow the guidelines given [here](https://se-education.org/guides/guidelines/PRs.html). You may refer to [this PR](https://github.com/reposense/RepoSense/pull/1057) for an example."},{"lineNumber":21,"author":{"gitId":"-"},"content":"* For simple documentation fixes or tasks with clear instructions, it is unnecessary to create an issue before creating a PR."},{"lineNumber":22,"author":{"gitId":"-"},"content":"* You can refer to the [Architecture](architecture.html) and the [HTML Report](report.html) sections to learn about the design and implementation of RepoSense."},{"lineNumber":23,"author":{"gitId":"-"},"content":"* The section below has more information about the various stages of submitting a PR."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Find the suitable pull requests"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* If you are contributing to RepoSense for the first time, you can check the list of [backend issues](https://github.com/reposense/RepoSense/issues?q\u003dis%3Aopen+is%3Aissue+label%3Aa-Backend+label%3Ad.FirstTimers) or [frontend issues](https://github.com/reposense/RepoSense/issues?q\u003dis%3Aopen+is%3Aissue+label%3Ad.FirstTimers+label%3Aa-FrontEnd) for first timers."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"The issues for first timers usually have guidance provided in the comment or have linked pull requests from previous contributors. You can refer to them for implementation details."},{"lineNumber":34,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* If you are more experienced in contributing, aside from searching for issues in the issue tracker, you can find the list of issues organized in a more systematic way under the [Projects Tab](https://github.com/reposense/RepoSense/projects) of the RepoSense repository. This can help you to find issues with suitable workload and direction."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Following the coding standards"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Make sure you know our coding standards."},{"lineNumber":44,"author":{"gitId":"-"},"content":"  {{ embed(\u0027Appendix: Coding Standards\u0027, \u0027styleGuides.md\u0027, level\u003d2) }}"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* **Follow [the tutorial](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to configure Intellij to follow our coding style**."},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **This project uses Checkstyle** to check the compliance of Java code. You can use [this document](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use it. "},{"lineNumber":47,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * In particular, run `gradlew checkstyleAll` to check the style of all the relevant Java code. This will check the Java code in the following order: main code -\u003e test code -\u003e systemtest code."},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * If you only want to check the main code, run `gradlew checkstyleMain`. Likewise, for test code, run `gradlew checkstyleTest` and for systemtest code, run `gradlew checkstyleSystemtest`."},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * You can also run any of the combination of the above, such as `gradlew checkstyleMain checkstyleTest` or `gradlew checkstyleTest checkstyleSystemtest`."},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **To check Vue files for style errors**, run `gradlew lintFrontend` from the project root directory. You can also run `npm run lintfix` in the `frontend` folder to automatically fix some of the JavaScript and CSS lint errors."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"## Running the app from code"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-running-from-code\"\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"* To run the app from code, run `gradlew run` from the project root. By default, it will run based on the config files in the `[project root]/config` folder, and generate the report in the `[project root]/reposense-report` folder."},{"lineNumber":59,"author":{"gitId":"-"},"content":"* To supply flags to customize the report, you can use the `-Dargs\u003d\"[FLAGS]\"` format.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g., `gradlew run -Dargs\u003d\"--since 31/12/2019 --formats java adoc xml\"`"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Run `gradlew run -Dargs\u003d\"--view\"` to generate the report and view it in the default browser."},{"lineNumber":62,"author":{"gitId":"-"},"content":"* You can refer to the panel below for the format of the flags that can be supplied in `-Dargs\u003d\"[FLAGS]\"`."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"{{ embed(\"User guide → Appendix: **CLI syntax reference**\", \"../ug/cli.md\") }}"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"## Debugging (front-end)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"**You can use the hot reloading feature to see how your code changes the functionality of the website in real time.**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. Navigate to the project root in your terminal."},{"lineNumber":73,"author":{"gitId":"-"},"content":"1. Generate the desired data for the report using `gradlew run` with the appropriate flags."},{"lineNumber":74,"author":{"gitId":"-"},"content":"1. Run `gradlew hotReloadFrontend`."},{"lineNumber":75,"author":{"gitId":"-"},"content":"1. The website will be automatically opened in your browser shortly."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"**You can use Vue.js devtools for frontend debugging on Chrome.** Here are the steps:"},{"lineNumber":78,"author":{"gitId":"-"},"content":"1. On your Chrome, visit the website of [Vue.js devtools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd) and add the extension."},{"lineNumber":79,"author":{"gitId":"-"},"content":"1. Go to the detail page of this extension in Chrome\u0027s extension management panel and select `Allow access to file URLs`. If you are unable to locate it, copy the link: `chrome://extensions/?id\u003dnhdogjmejiglipccpnnnanhbledajbpd` and visit it on your Chrome."},{"lineNumber":80,"author":{"gitId":"-"},"content":"1. Open any report generated by RepoSense."},{"lineNumber":81,"author":{"gitId":"-"},"content":"1. Press `F12` or right click and choose `inspect` at the report page."},{"lineNumber":82,"author":{"gitId":"-"},"content":"1. Choose `Vue` at the navigation bar.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"   ![Choose Vue](../images/choose-vue.png)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. Debug using the tool.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":"   ![Use Vue](../images/use-vue.png)"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"See [vue-devtools project home](https://github.com/vuejs/vue-devtools) page for more details."},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"## Testing (front-end)"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"**We use [Cypress](https://www.cypress.io/) for automated end-to-end front-end testing.**"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"### Writing tests"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. Create a new test file in `frontend/cypress/tests`."},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. At project root start *Cypress Test Runner* by running `gradlew cypress`."},{"lineNumber":101,"author":{"gitId":"-"},"content":"1. On the top right hand corner, set `Chrome` as the default browser."},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Under **Integration Tests**, click on the newly created test file to run it."},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Cypress Test Runner](../images/cypress-test-runner.jpg \"Cypress Test Runner\")"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"Read [Cypress\u0027s Documentation](https://docs.cypress.io/api/commands/document.html#Syntax) to familiarize yourself with its syntax and [Cypress\u0027s debugging guide](https://docs.cypress.io/guides/guides/debugging.html#Log-Cypress-events) to tackle problems with your tests."},{"lineNumber":108,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"Note that it is **compulsory** to add tests for the new front-end changes that you made to prevent regression bugs, except for trivial changes that are unlikely to cause any regression or other situations where testing does not apply to the change."},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Running tests"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"To run all tests locally, run `gradlew frontendTest`. "},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"* Using the above command, tests are run on the CLI without the report being displayed. "},{"lineNumber":121,"author":{"gitId":"yhtMinceraft1010X"},"content":"* To show the report, run `gradlew cypress` then select `Run 18 integration specs` in the Cypress GUI as shown below:"},{"lineNumber":122,"author":{"gitId":"yhtMinceraft1010X"},"content":"![Cypress Test Run All](../images/cypress-test-run-all.jpg)"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"If you encountered an invalid browser error, ensure that you have `Chrome` installed in the default installation directory. Otherwise, follow the instructions [here](https://docs.cypress.io/guides/guides/debugging.html#Launching-browsers) to create symbolic links so Cypress can locate `Chrome` in your system."},{"lineNumber":127,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"## Testing (back-end)"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"The back-end tests can be found at `[project root]/systemtest` and `[project root]/test`."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"### Running tests"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"To run all the system tests, run `gradlew systemtest`."},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"To run all the unit and integration tests, run `gradlew test`."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"## Writing documentation"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"**This project uses [MarkBind](https://markbind.org/)** for documentation. Follow [this tutorial](https://se-education.org/guides/tutorials/markbind.html) to learn how to use MarkBind for updating project documentation."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"**To show some content only in the \u003ctooltip content\u003d\"i.e., https://reposense.org\"\u003eproduction website\u003c/tooltip\u003e**, add the `tags\u003d\"production\"` attribute to the HTML element enclosing the content. Similarly, `tags\u003d\"dev\"` will make the content appear only in the \u003ctooltip content\u003d\"i.e., https://reposense.org/RepoSense\"\u003edev website\u003c/tooltip\u003e."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"```html"},{"lineNumber":150,"author":{"gitId":"-"},"content":"\u003cspan tags\u003d\"production\"\u003eThis will appear in the production website only.\u003c/span\u003e"},{"lineNumber":151,"author":{"gitId":"-"},"content":"\u003cspan tags\u003d\"dev\"\u003eThis will appear in the dev website only.\u003c/span\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":"This will appear in both sites."},{"lineNumber":153,"author":{"gitId":"-"},"content":"```"}],"authorContributionMap":{"yhtMinceraft1010X":8,"-":145}},{"path":"docs/index.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Home\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import show_sitenav_items, thumbnail with context %}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003cheader\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"jumbotron jumbotron-fluid text-center\" style\u003d\"padding-top: inherit; padding-bottom: inherit\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"container\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u003ch1 class\u003d\"display-3\"\u003eRepoSense\u003c/h1\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"Visualize programmer activities across git repositories..."},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/reposenseOverview.png\" width\u003d\"909\" alt\u003d\"RepoSense overview\"/\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003c/header\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cspan id\u003d\"overview\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"**RepoSense can generate interactive visualizations of programmer activities, even across multiple repositories.** It\u0027s ideal for educators and managers to get insights into the programming activities of their mentees. The visualizations can be **easily shared** with others (e.g., as an online dashboard), and updating the visualizations periodically **can be automated**."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"{% macro heading(icon, text) %}\u003ch4\u003e{{ thumbnail(icon) }} \u003cspan class\u003d\"lead font-weight-bold text-green\"\u003e{{ text }}\u003c/span\u003e\u003c/h4\u003e{% endmacro %}"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"Some example insights RepoSense can provide:"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"{{ heading(\":fas-code:\", \"Insights about the code\") }}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"* Which part of the code was written by Tom? How many lines? How many files?"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* Which test cases were written by Kim?"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Which commit messages were written by Serene?"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"{{ heading(\":fas-chart-pie:\", \"Insights about the type of work\") }}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Which portion of Jacob\u0027s code is documentation?"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Who hasn\u0027t written any test code yet?"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Which project did Jolene contribute to in the last month?"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"{{ heading(\":fas-business-time:\", \"Insights about the timing of work\") }}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Who is putting in the consistent effort?"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Who waits till the deadline to do the work?"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Who hasn\u0027t started any work yet?"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"{{ heading(\":fas-list-ol:\", \"Insights based on comparisons\") }}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Which programmers/teams are falling behind?"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* How does everyone compare in their front-end coding work over the past two weeks?"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"* Who are the top 10 code contributors?"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003c/span\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"jumbotron jumbotron-fluid pt-2\"\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"container\"\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"container pt-2\"\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"row\"\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"row\"\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"col-sm\"\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"[**SHOWCASE** of use cases](showcase.html)"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"[**ABOUT** us](about.html)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"[**CONTACT** us](contact.html)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"[**:fab-github: GitHub**](https://github.com/reposense/RepoSense)"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"----"},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003csmall\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"This website was built using MarkBind."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"[\u003cimg src\u003d\"https://markbind.org/images/logo-lightbackground.png\" width\u003d\"150\"\u003e](http://markbind.org)"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"Deploy previews are powered by Netlify and Surge."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"[\u003cimg src\u003d\"https://www.netlify.com/img/global/badges/netlify-color-bg.svg\"/\u003e](https://www.netlify.com)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"[\u003cimg width\u003d\"55px\" src\u003d\"https://surge.sh/images/logos/svg/surge-logo.svg\"\u003e](https://surge.sh)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003c/small\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"col-sm\"\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"****USER GUIDE****"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"{% from \"_markbind/layouts/ug-sitenav.md\" import ug_sitenav_items %}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"{{ show_sitenav_items(ug_sitenav_items, is_flat\u003dtrue) }}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"col-sm\"\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"****DEVELOPER GUIDE****"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"{% from \"_markbind/layouts/dg-sitenav.md\" import dg_sitenav_items %}"},{"lineNumber":104,"author":{"gitId":"-"},"content":"{{ show_sitenav_items(dg_sitenav_items, is_flat\u003dtrue) }}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  \u003c/div\u003e"},{"lineNumber":109,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":111}},{"path":"docs/showcase.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Showcase\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-3\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"### Case 1: Monitoring student programmers (**individual** projects)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"* **Scenario:** RepoSense is used to monitor a Software Engineering course in which students build a project over 8 weeks."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **Links:** [report](https://nus-cs2103-ay2021s1.github.io/ip-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026until\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse) | [repo containing the settings](https://github.com/nus-cs2103-AY2021S1/ip-dashboard)"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Example usages:**"},{"lineNumber":16,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * To compare students based on the amount of code written, we can sort by contribution, as done in [this view](https://nus-cs2103-ay2021s1.github.io/ip-dashboard/?search\u003d\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026until\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse)."},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * [This view](https://nus-cs2103-ay2021s1.github.io/ip-dashboard/?search\u003dkeanecjy\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026until\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkeanecjy\u0026tabRepo\u003dkeanecjy%2Fip%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003djava~md~fxml~bat~gradle~txt) shows us code written by a specific student."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Case 2: Monitoring student programmers (**team** projects)"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"* **Scenario:** Similar to case 1 above, but this time students are doing team projects."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **Links:** [report](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026since\u003d2021-09-17\u0026until\u003d2021-11-19) | [settings](https://github.com/nus-cs2103-AY2122S1/tp-dashboard)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"* **Example usages:**"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * To find the breakdown of the work done, we can tick the `breakdown by file type` checkbox, as shown in [this view](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-09-17\u0026until\u003d2021-11-19). After that, we can filter out certain file types by un-ticking the file type."},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * To find how teams compare in terms of total work done, we can tick the `merge all groups` check-box and sort groups by `Contribution`, as seen in [this view](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026timeframe\u003dweek\u0026mergegroup\u003dAY2122S1-CS2103-F09-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F09-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F09-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F09-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F10-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F10-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F10-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-F10-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T14-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T14-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T14-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T14-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T16-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T16-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T16-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-T16-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103-W14-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103-W14-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103-W14-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103-W14-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F11-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F11-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F11-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F11-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F12-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F12-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F12-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F12-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F13-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F13-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F13-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-F13-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T09-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T09-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T09-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T09-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T10-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T10-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T10-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T10-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T11-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T11-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T11-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T11-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T12-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T12-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T12-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T12-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T13-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T13-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T13-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T13-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T15-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T15-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T15-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T15-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T17-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T17-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T17-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-T17-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W08-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W08-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W08-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W08-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W10-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W10-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W10-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W10-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W11-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W11-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W11-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W11-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W12-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W12-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W12-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W12-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W13-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W13-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W13-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W13-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W15-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W15-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W15-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W15-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W16-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W16-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W16-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W16-4%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W17-1%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W17-2%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W17-3%2Ftp%5Bmaster%5D~AY2122S1-CS2103T-W17-4%2Ftp%5Bmaster%5D\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026since\u003d2021-09-17\u0026until\u003d2021-11-19\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other). Also, note how \u003ctooltip content\u003d\"i.e., each ramp represents the work done by the entire team in the whole week\"\u003ethe `granularity` of the ramps is set to `Week`\u003c/tooltip\u003e to reduce clutter."},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * [This view](https://nus-cs2103-ay2122s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2021-10-29\u0026until\u003d2021-11-11) shows the activities near the submission deadline of [8 November 2021](https://nus-cs2103-ay2122s1.github.io/website/admin/tp-w13.html) (note how some have overshot the deadline and some others show a frenzy of activities very near to the deadline)."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"### Case 3: Monitoring student programmers (**multiple** external projects)"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"* **Scenario:** Similar to cases 1 and 2 above, but this time, each student works on multiple projects. Furthermore, most projects are external OSS projects, not within the control of the teacher."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"* **Links:** [report](https://nus-cs3281.github.io/2020-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-12-01\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse) | [settings](https://github.com/nus-cs3281/2020-dashboard)"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"* **Example usages:**"},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * [This view](https://nus-cs3281.github.io/2020-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-12-01\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003danubh-v\u0026zR\u003dCATcher-org%2FCATcher%5Bmaster%5D\u0026zACS\u003d153.40466101694915\u0026zS\u003d2019-12-01\u0026zFS\u003d\u0026zU\u003d2021-06-15\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse) shows the commit messages written by a specific student."},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Note how we can use the `group by` drop-down to organize activities around projects or individual authors."},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Similarly, we can use the `merge all groups` check-box to see the sum of activities in a specific project or by a specific student."}],"authorContributionMap":{"yhtMinceraft1010X":9,"-":35}},{"path":"docs/ug/cli.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: CLI syntax reference\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"The command `java -jar RepoSense.jar` takes several flags."},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cbox\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"**Examples**:"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"An example of a command using most parameters:\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"`java -jar RepoSense.jar --repos https://github.com/reposense/RepoSense.git --output ./report_folder --since 31/1/2017 --until 31/12/2018 --formats java adoc xml --view --ignore-standalone-config --last-modified-date --timezone UTC+08 --find-previous-authors`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"Same command as above but using most parameters in alias format:\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"`java -jar RepoSense.jar -r https://github.com/reposense/RepoSense.git -o ./report_folder -s 31/1/2017 -u 31/12/2018 -f java adoc xml -v -i -l -t UTC+08 -F`"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"The section below provides explanations for each of the flags."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c!-- --------------------------◘---------------------------------------------------------------------------- --\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"### `--assets`, `-a`"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-config\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"**`--assets ASSETS_DIRECTORY`**: Specifies where to place assets for report generation."},{"lineNumber":34,"author":{"gitId":"-"},"content":"* Parameter: `ASSETS_DIRECTORY` The directory containing the assets files. A `favicon.ico` file can be placed here to customize the favicon of the dashboard."},{"lineNumber":35,"author":{"gitId":"-"},"content":"* Alias: `-a`"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Example: `--assets ./assets` or `-a ./assets`"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* If `--assets` is not specified, RepoSense looks for assets in the `./assets` directory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003c!-- --------------------------◘---------------------------------------------------------------------------- --\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"### `--config`, `-c`"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-config\"\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"**`--config CONFIG_DIRECTORY`**: Specifies that config files located in `CONFIG_DIRECTORY` should be used to customize the report."},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Parameter: `CONFIG_DIRECTORY` The directory containing the config files. Should contain a `repo-config.csv` file. Optionally, can contain an `author-config.csv` file or/and a `group-config.csv` file or/and a `report-config.json` file."},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Alias: `-c`"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Example: `java -jar RepoSense.jar --config  ./config`"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"* Cannot be used with `--repos`. The `--repos` flag will take precedence over this flag."},{"lineNumber":58,"author":{"gitId":"-"},"content":"* If both `--repos` and `--config` are not specified, RepoSense looks for config files in the `./config` directory."},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"### `--formats`, `-f`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"**`--formats LIST_OF_FORMATS`**: Specifies which file extensions to be included in the analysis."},{"lineNumber":67,"author":{"gitId":"-"},"content":"* Parameter: `LIST_OF_FORMATS` A space-separated list of file extensions that should be included in the analysis.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  Default: all file formats"},{"lineNumber":69,"author":{"gitId":"-"},"content":"* Alias: `-f`"},{"lineNumber":70,"author":{"gitId":"-"},"content":"* Example:`--formats css fxml gradle` or `-f css fxml gradle`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"Binary file formats, such as `jpg`, `png`,`exe`,`zip`, `rar`, `docx`, and `pptx`, all will be labelled as the file type `binary` in the generated report."},{"lineNumber":75,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"### `--find-previous-authors`, `-F`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`--find-previous-authors`**: Utilizes Git blame\u0027s ignore revisions functionality, RepoSense will attempt to blame the line changes caused by commits in the ignore commit list to the previous authors who altered those lines (if available)."},{"lineNumber":82,"author":{"gitId":"-"},"content":"* Default: RepoSense will assume that no authors are responsible for the code changes in the lines altered by commits in the ignore commit list."},{"lineNumber":83,"author":{"gitId":"-"},"content":"* Alias: `-F` (uppercase F)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* Example:`--find-previous-authors` or `-F`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":88,"author":{"gitId":"yhtMinceraft1010X"},"content":"* This flag only works on **git `2.23`** or later."},{"lineNumber":89,"author":{"gitId":"yhtMinceraft1010X"},"content":"* If an earlier version of **git** is used, RepoSense can still run but this flag will be ignored."},{"lineNumber":90,"author":{"gitId":"yhtMinceraft1010X"},"content":"\u003c/box\u003e"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"### `--help`, `-h`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"**`--help`**: Shows the help message."},{"lineNumber":97,"author":{"gitId":"-"},"content":"* Alias: `-h`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"Cannot be used with any other flags. This flag takes precedence over all other flags."},{"lineNumber":102,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"### `--ignore-standalone-config`, `-i`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"**`--ignore-standalone-config`**: Specifies that the standalone config file in the repo should be ignored."},{"lineNumber":108,"author":{"gitId":"-"},"content":"* Default: the standalone config file is not ignored"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* Alias: `-i`"},{"lineNumber":110,"author":{"gitId":"-"},"content":"* Example:`--ignore-standalone-config` or `-i`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"This flag overrides the `Ignore standalone config` field in the CSV config file."},{"lineNumber":115,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"gok99"},"content":"### `--ignore-filesize-limit`, `-I`"},{"lineNumber":120,"author":{"gitId":"gok99"},"content":""},{"lineNumber":121,"author":{"gitId":"gok99"},"content":"**`--ignore-filesize-limit`**: Specifies that the file size limit (both default and user-defined) should be ignored during the analysis."},{"lineNumber":122,"author":{"gitId":"gok99"},"content":"* Default: the file size limit is not ignored"},{"lineNumber":123,"author":{"gitId":"gok99"},"content":"* Alias: `-I`"},{"lineNumber":124,"author":{"gitId":"gok99"},"content":"* Example:`--ignore-filesize-limit` or `-I`"},{"lineNumber":125,"author":{"gitId":"gok99"},"content":""},{"lineNumber":126,"author":{"gitId":"gok99"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":127,"author":{"gitId":"gok99"},"content":""},{"lineNumber":128,"author":{"gitId":"gok99"},"content":"All files are subject to a default file size limit or a custom size limit set by the user. Most files should not be "},{"lineNumber":129,"author":{"gitId":"gok99"},"content":"affected by the default size limit. This flag can be useful for including files in your report that are affected by"},{"lineNumber":130,"author":{"gitId":"gok99"},"content":"the size limit. Note that this flag may result in large report sizes and/or slower report generation."},{"lineNumber":131,"author":{"gitId":"gok99"},"content":"\u003c/box\u003e"},{"lineNumber":132,"author":{"gitId":"gok99"},"content":""},{"lineNumber":133,"author":{"gitId":"gok99"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":134,"author":{"gitId":"gok99"},"content":""},{"lineNumber":135,"author":{"gitId":"gok99"},"content":"This flag overrides the `Ignore file size limit` field in the CSV config file."},{"lineNumber":136,"author":{"gitId":"gok99"},"content":"\u003c/box\u003e"},{"lineNumber":137,"author":{"gitId":"gok99"},"content":""},{"lineNumber":138,"author":{"gitId":"gok99"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":139,"author":{"gitId":"gok99"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"### `--last-modified-date`, `-l`"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"**`--last-modified-date`**: Specifies that the last modified date of each line of code should be added to `authorship.json`."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* Default: the last modified date of each line of code will not be added to `authorship.json`"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* Alias: `-l` (lowercase L)"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* Example:`--last-modified-date` or `-l`"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"yhtMinceraft1010X"},"content":"* Cannot be used with `--shallow-cloning`. This may result in an incorrect last modified date."},{"lineNumber":150,"author":{"gitId":"-"},"content":"* The last modified dates will be in the same timezone specified with the `--timezone` flag."},{"lineNumber":151,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"### `--output`, `-o`"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"**`--output OUTPUT_DIRECTORY`**: Indicates where to save the report generated."},{"lineNumber":158,"author":{"gitId":"-"},"content":"* Parameter: `OUTPUT_DIRECTORY` The location for the generated `reposense-report` folder.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitId":"-"},"content":"  Default: current directory"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* Alias: `-o`"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* Example: `--output ./foo` or `-o ./foo` (the report will be in the `./foo/reposense-report` folder)"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"### `--period`, `-p`"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"**`--period PERIOD`**: Specifies the period of analysis window."},{"lineNumber":168,"author":{"gitId":"-"},"content":"* Parameter: `PERIOD` The period of analysis window, in the format `nd` (for n days) or `nw` (for n weeks). It is used to calculate end date if only start date is specified, or calculate end date if only start date is specified."},{"lineNumber":169,"author":{"gitId":"-"},"content":"* Alias: `-p`"},{"lineNumber":170,"author":{"gitId":"-"},"content":"* Example: `--period 30d` or `--period 4w`"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"* If both start date and end date are not specified, the date of generating the report will be taken as the end date."},{"lineNumber":175,"author":{"gitId":"yhtMinceraft1010X"},"content":"* May analyze the incorrect date range if used with `--since d1`. The program will throw a warning."},{"lineNumber":176,"author":{"gitId":"yhtMinceraft1010X"},"content":"* Cannot be used with both `--since` and `--until`. The program will throw an exception."},{"lineNumber":177,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":178,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"yhtMinceraft1010X"},"content":"### `--repo`, `--repos`, `-r`"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"yhtMinceraft1010X"},"content":"**`--repo REPO_LOCATION`**: Specifies which repositories to analyze."},{"lineNumber":183,"author":{"gitId":"-"},"content":"* Parameter: `REPO_LOCATION` A list of URLs or the disk location of the git repositories to analyze, separated by spaces."},{"lineNumber":184,"author":{"gitId":"-"},"content":"* Alias: `-r`"},{"lineNumber":185,"author":{"gitId":"-"},"content":"* Examples:"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  * `--repos https://github.com/reposense/RepoSense.git`"},{"lineNumber":187,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * `--repo https://github.com/reposense/RepoSense.git c:/myRepose/foo/bar`: analyzes the two specified repos (one remote, one local) and generates one report containing details of both."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"yhtMinceraft1010X"},"content":"Cannot be used with `--config`. This flag takes precedence over `--config`."},{"lineNumber":192,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":193,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"### `--shallow-cloning`, `-S`"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"**`--shallow-cloning`**: Clones repositories using Git\u0027s shallow cloning functionality, which can significantly reduce the time taken to clone large repositories. However, the flag should not be used for smaller repositories where the `.git` file is smaller than 500 MB, as it would create overhead."},{"lineNumber":198,"author":{"gitId":"-"},"content":"* Default: RepoSense does not clone repositories using Git\u0027s shallow cloning functionality."},{"lineNumber":199,"author":{"gitId":"-"},"content":"* Alias: `-S` (uppercase S)"},{"lineNumber":200,"author":{"gitId":"-"},"content":"* Example:`--shallow-cloning` or `-S`"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"yhtMinceraft1010X"},"content":"Cannot be used with `--last-modified-date`. This may result in an incorrect last modified date."},{"lineNumber":205,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"### `--since`, `-s`"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"**`--since START_DATE`**: Specifies the start date for the period to be analyzed."},{"lineNumber":212,"author":{"gitId":"-"},"content":"* Parameter: `START_DATE` The first day of the period to be analyzed, in the format `DD/MM/YYYY`.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitId":"-"},"content":"  Default: one month before the current date"},{"lineNumber":214,"author":{"gitId":"-"},"content":"* Alias: `-s`"},{"lineNumber":215,"author":{"gitId":"-"},"content":"* Example:`--since 21/10/2017` or `-s 21/10/2017`"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"* If the start date is not specified, only commits made one month before the end date (if specified) or the date of generating the report, will be captured and analyzed."},{"lineNumber":220,"author":{"gitId":"yhtMinceraft1010X"},"content":"* If `d1` is specified as the start date (`--since d1` or `-s d1`), then the program will search for the earliest commit date of all repositories and use that as the start date."},{"lineNumber":221,"author":{"gitId":"yhtMinceraft1010X"},"content":"* If `d1` is specified together with `--period`, then the program will warn that the date range being analyzed may be incorrect."},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":223,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"### `--timezone`, `-t`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"**`--timezone ZONE_ID`**: Indicates the timezone to be used for the analysis."},{"lineNumber":228,"author":{"gitId":"-"},"content":"* Parameter: `ZONE_ID` The timezone in the format `ZONE_ID[±hh[mm]]`.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitId":"-"},"content":"  Default: system\u0027s default timezone"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* Alias: `-t`"},{"lineNumber":231,"author":{"gitId":"-"},"content":"* Example:`--timezone UTC+08` or `-t UTC-1030`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### `--until`, `-u`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**`--until END_DATE`**: Specifies the end date of the analysis period."},{"lineNumber":238,"author":{"gitId":"-"},"content":"* Parameter: `END_DATE` The last date of the period to be analyzed, in the format `DD/MM/YYYY`.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  Default: current date"},{"lineNumber":240,"author":{"gitId":"-"},"content":"* Alias: `-u`"},{"lineNumber":241,"author":{"gitId":"-"},"content":"* Example:`--until 21/10/2017` or `-u 21/10/2017`"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"Note: If the end date is not specified, the date of generating the report will be taken as the end date."},{"lineNumber":246,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"### `--version`, `-V`"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"**`--version`**: Shows the version of RepoSense."},{"lineNumber":253,"author":{"gitId":"-"},"content":"* Alias: `-V` (upper case)"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"yhtMinceraft1010X"},"content":"Cannot be used with any other flags. This flag takes precedence over all other flags other than `--help`."},{"lineNumber":258,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"### `--view`, `-v`"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"**`--view [REPORT_FOLDER]`**: Specifies that the report should be opened in the default browser."},{"lineNumber":264,"author":{"gitId":"-"},"content":"* Parameter: `REPORT_FOLDER` Optional. If specified, no analysis will be performed and the report specified by the argument will be opened.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitId":"-"},"content":"  Default: `./reposense-report`"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* Alias: `-v`"},{"lineNumber":267,"author":{"gitId":"-"},"content":"* Example:`--view` or `-v`"}],"authorContributionMap":{"yhtMinceraft1010X":19,"gok99":21,"-":227}},{"path":"docs/ug/configFiles.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Config files format\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% set mandatory %}\u003cspan class\u003d\"badge badge-danger\"\u003emandatory\u003c/span\u003e{% endset %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"Given below are the details of the various config files used by RepoSense."},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"**RepoSense ignores the order of column headers in the CSV config files. However, the spelling of the column headers must match the specified headers exactly, or the column would be ignored by RepoSense.**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**A value in a config file is optional to provide unless it is specified as {{ mandatory }}**."},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## `repo-config.csv`"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"**`repo-config.csv` file contains repo-level config data.** Each row represents a repository\u0027s configuration ([example](repo-config.csv))."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Column Name | Explanation |"},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"|-------------|-------------|"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"| Repository\u0027s Location {{ mandatory }} | The `Remote Repo URL` or `Disk Path` to the git repository e.g., `https://github.com/foo/bar.git` or `C:\\Users\\user\\Desktop\\GitHub\\foo\\bar` |"},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Branch | The branch to analyze in the target repository e.g., `master`. Default: the default branch of the repo |"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"| File formats\u003csup\u003e*+\u003c/sup\u003e | The file extensions to analyze. Binary file formats, such as `png` and `jpg`, will be automatically labelled as the file type `binary` in the generated report. Default: all file formats |"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Find Previous Authors | Enter **`yes`** to utilize Git blame\u0027s ignore revisions functionality, RepoSense will attempt to blame the line changes caused by commits in the ignore commit list to the previous authors who altered those lines (if available). |"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Ignore Glob List\u003csup\u003e*+\u003c/sup\u003e | The list of file path globs to ignore during analysis for each author e.g., `test/**;temp/**`. Refer to the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob) for the path glob syntax. |"},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Ignore standalone config | To ignore the standalone config file (if any) in target repository, enter **`yes`**. If the cell is empty, the standalone config file in the repo (if any) will take precedence over configurations provided in the csv files. |"},{"lineNumber":40,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Ignore Commits List\u003csup\u003e*+\u003c/sup\u003e | The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash. Additionally, a range of commits can be specified using the `..` notation e.g. `abc123..def456` (both inclusive). |"},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Ignore Authors List\u003csup\u003e*+\u003c/sup\u003e | The list of authors to ignore during analysis. Authors should be specified by their [Git Author Name](#a-note-about-git-author-name). |"},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Shallow Cloning | Enter **`yes`** to clone the repository using Git\u0027s shallow cloning functionality. This option can significantly reduce the time taken to clone large repositories. However, the option should ideally be disabled for smaller repositories where the `.git` file is smaller than 500 MB, as it would create overhead. |"},{"lineNumber":43,"author":{"gitId":"gok99"},"content":"| File Size Limit\u003csup\u003e+\u003c/sup\u003e  | Enter a file size limit for the repository in bytes as a single number without units, that will override the default file size limit. |"},{"lineNumber":44,"author":{"gitId":"gok99"},"content":"| Ignore File Size Limit | Enter **`yes`** to ignore both the default file size limit and the file size limit possibly set by the user in `repo-config.csv`. |"},{"lineNumber":45,"author":{"gitId":"gok99"},"content":"| Skip Ignored File Analysis | Enter **`yes`** to ignore analysis of files exceeding the file size limit entirely. By default, files exceeding the size limit are analyzed and line count information (but not line diffs) for these files are included in the report. This option can significantly improve report generation time. |"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"The Shallow Cloning option is incompatible with the \"--last-modified-date\" CLI flag."},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"gok99"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":52,"author":{"gitId":"gok99"},"content":"If Ignore File Size Limit is yes, the File Size Limit and Skip Ignored File Analysis columns are ignored."},{"lineNumber":53,"author":{"gitId":"gok99"},"content":"\u003c/box\u003e"},{"lineNumber":54,"author":{"gitId":"gok99"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003csup\u003e+ **Overrideable column**: prepend with `override:` to use entered value(s) instead of value(s) from standalone config.\u003c/sup\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"When using [standalone config](#config-json-standalone-config-file) (if it is not ignored), it is possible to override specific values from the standalone config by prepending the entered value with `override:`."},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"## `author-config.csv`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"Optionally, you can use an `author-config.csv` (which should be in the same directory as the `repo-config.csv` file) to provide more details about the authors to analyze ([example](author-config.csv)). It should contain the following columns:"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Column Name | Explanation |"},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"|-------------|-------------|"},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Repository\u0027s Location | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv` |"},{"lineNumber":72,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Branch | The branch to analyze for this author, e.g., `master`. Default: the author will be bound to all the repos in `repo-config.csv` that has the same repo\u0027s location, regardless of branch. |"},{"lineNumber":73,"author":{"gitId":"-"},"content":"| Author\u0027s Git Host ID\u003csup\u003e#\u003c/sup\u003e {{ mandatory }} | Username of the target author\u0027s profile on GitHub, GitLab or Bitbucket, e.g.`JohnDoe`. |  "},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"| Author\u0027s Emails\u003csup\u003e*\u003c/sup\u003e | Associated emails of the author. For GitHub users, this can be found in your [GitHub settings](https://github.com/settings/emails). |"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"| Author\u0027s Display Name | The name to display for the author. Default: author\u0027s username. |"},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Author\u0027s Git Author Name\u003csup\u003e*\u003c/sup\u003e | The meaning of _Git Author Name_ is explained in [_A note about git author name_](#a-note-about-git-author-name). |"},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Ignore Glob List\u003csup\u003e*\u003c/sup\u003e | Files to ignore for this author, in addition to files ignored by the patterns specified in `repo-config.csv`. The path glob syntax is the same as that of Ignore Glob List in `repo-config.csv`. |"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"\u003c/br\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"\u003csup\u003e# For backward compatibility, `Author\u0027s GitHub ID` is still accepted as the header in place of `Author\u0027s Git Host ID`.\u003c/sup\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"If `author-config.csv` is not given and the repo has not provided author details in a standalone config file, all the authors of the repositories within the date range specified (if any) will be analyzed."},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"## `group-config.csv`"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Optionally, you can provide a `group-config.csv`(which should be in the same directory as `repo-config.csv` file) to provide details on any custom groupings for files in specified repositories ([example](group-config.csv)). It should contain the following columns:"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Column Name | Explanation |"},{"lineNumber":92,"author":{"gitId":"yhtMinceraft1010X"},"content":"|-------------|-------------|"},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Repository\u0027s Location | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv` |"},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Group Name {{ mandatory }} | Name of the group, e.g.,`test`. |"},{"lineNumber":95,"author":{"gitId":"yhtMinceraft1010X"},"content":"| Globs * {{ mandatory }} | The list of file path globs to include for specified group, e.g.,`**/test/*;**.java`. |"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"Note that a file in a given repository should only be tagged to one group. \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"e.g.: `example.java` in `example-repo` can either be in the `test` group or the `code` group, but not in both `test` and `code` group. If multiple groups are specified for a given file, the latter group (i.e., `code` group) is set for the file."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"## `report-config.json`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"You can optionally use `report-config.json` to customize report generation by providing the following information. ([example](report-config.json))"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"**Fields to provide**:"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* `title`: Title of the generated report, which is also the title of the deployed dashboard. Default: \"RepoSense Report\""},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-standalone\"\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"## `config.json` (standalone config file)"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Repo owners can provide the following additional information to RepoSense using a config file that we call the **_standalone config file_**:"},{"lineNumber":118,"author":{"gitId":"-"},"content":"* which files/authors/commits to analyze/omit"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"* which git and git host usernames belong to which authors"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* the display of an author"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"To use this feature, add a `_reposense/config.json` to the root of your repo using the format in the example below ([another example](https://github.com/reposense/RepoSense/blob/master/_reposense/config.json)) and **commit it** (reason: RepoSense can see committed code only):"},{"lineNumber":123,"author":{"gitId":"-"},"content":"```json {.no-line-numbers}"},{"lineNumber":124,"author":{"gitId":"-"},"content":"{"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  \"ignoreGlobList\": [\"about-us/**\", \"**index.html\"],"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  \"formats\": [\"html\", \"css\"],"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  \"ignoreCommitList\": [\"90018e49f129ce7e0abdc8b18e91c9813588c601\", \"67890def\", \"abc123..def456\"],"},{"lineNumber":128,"author":{"gitId":"-"},"content":"  \"ignoreAuthorList\": [\"charlie\"],"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  \"authors\":"},{"lineNumber":130,"author":{"gitId":"-"},"content":"  ["},{"lineNumber":131,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"      \"githubId\": \"alice\","},{"lineNumber":133,"author":{"gitId":"-"},"content":"      \"emails\": [\"alice@example.com\", \"alicet@example.com\"],"},{"lineNumber":134,"author":{"gitId":"-"},"content":"      \"displayName\": \"Alice T.\","},{"lineNumber":135,"author":{"gitId":"-"},"content":"      \"authorNames\": [\"AT\", \"A\"],"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \"ignoreGlobList\": [\"**.css\"]"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \"githubId\": \"bob\""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  ]"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"},{"lineNumber":143,"author":{"gitId":"-"},"content":"```"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Note: all fields are optional unless specified otherwise."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"**Fields to provide _repository-level_ info**:"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"* `ignoreGlobList`: Folders/files to ignore, specified using the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob)."},{"lineNumber":149,"author":{"gitId":"-"},"content":"* `formats`: File formats to analyze. Binary file formats, such as `png` and `jpg`, will be automatically labelled as the file type `binary` in the generated report. Default: all file formats"},{"lineNumber":150,"author":{"gitId":"-"},"content":"* `ignoreCommitList`: The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash. Additionally, a range of commits can be specified using the `..` notation e.g. `abc123..def456` (both inclusive)."},{"lineNumber":151,"author":{"gitId":"-"},"content":"* `ignoreAuthorList`: The list of authors to ignore during analysis. Authors specified in `authors` field or `author-config.csv` will be also be omitted if they are in this list. Authors should be specified by their [Git Author Name](#a-note-about-git-author-name)."},{"lineNumber":152,"author":{"gitId":"gok99"},"content":"* `fileSizeLimit`: A file size limit for the repository in bytes as a single number without units, that will override the default file size limit. If not specified, the default file size limit will continue to be used."},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"**Fields to provide _author-level_ info**:\u003cbr\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":"Note: `authors` field should contain _all_ authors that should be captured in the analysis."},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":"* `githubId`: Username of the author. {{ mandatory }} field."},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":"* `emails`: Associated git emails of the author. For GitHub, this can be found in your [GitHub settings](https://github.com/settings/emails)."},{"lineNumber":158,"author":{"gitId":"-"},"content":"* `displayName`: Name to display on the report for this author."},{"lineNumber":159,"author":{"gitId":"-"},"content":"* `authorNames`: Git Author Name(s) used in the author\u0027s commits. By default, RepoSense assumes an author would use her GitHub username as the Git username too. The meaning of _Git Author Name_ is explained in [_A note about git author name_](#a-note-about-git-author-name)."},{"lineNumber":160,"author":{"gitId":"-"},"content":"* `ignoreGlobList`: _Additional_ (i.e. on top of the repo-level `ignoreGlobList`) folders/files to ignore for a specific author. The path glob syntax is specified by the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob). In the example above, the actual `ignoreGlobList` for `alice` would be `[\"about-us/**\", \"**index.html\", \"**.css\"]`."},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"To verify your standalone configuration is as intended, add the `_reposense/config.json` to your local copy of repo and run RepoSense against it as follows:\u003cbr\u003e"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* Format: `java -jar RepoSense.jar --repo LOCAL_REPO_LOCATION` \u003cbr\u003e"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* Example: `java -jar RepoSense.jar --repo c:/myRepose/foo/bar`\u003cbr\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":"After that, view the report to see if the configuration you specified in the config file is being reflected correctly in the report."},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"## A note about git author name"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"`Git Author Name` refers to the customizable author\u0027s display name set in the local `.gitconfig` file. For example, in the Git Log\u0027s display:"},{"lineNumber":170,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":171,"author":{"gitId":"-"},"content":"..."},{"lineNumber":172,"author":{"gitId":"-"},"content":"commit cd7f610e0becbdf331d5231887d8010a689f87c7"},{"lineNumber":173,"author":{"gitId":"-"},"content":"Author: ConfiguredAuthorName \u003cauthor@example.com\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":"Date:   Fri Feb 9 19:14:41 2018 +0800"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    Make some changes to show my new author\u0027s name"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"commit e3f699fd4ef128eebce98d5b4e5b3bb06a512f49"},{"lineNumber":179,"author":{"gitId":"chan-j-d"},"content":"Author: ActualGitHostId \u003cauthor@example.com\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":"Date:   Fri Feb 9 19:13:13 2018 +0800"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    Initial commit"},{"lineNumber":183,"author":{"gitId":"-"},"content":" ..."},{"lineNumber":184,"author":{"gitId":"-"},"content":"```"},{"lineNumber":185,"author":{"gitId":"chan-j-d"},"content":"`ActualGitHostId` and `ConfiguredAuthorName` are both `Git Author Name` of the same author.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitId":"-"},"content":"To find the author name that you are currently using for your current git repository, run the following command within your git repository:"},{"lineNumber":187,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":188,"author":{"gitId":"-"},"content":"git config user.name"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```"},{"lineNumber":190,"author":{"gitId":"-"},"content":"To set the author name to the value you want (e.g., to set it to your GitHub username) for your current git repository, you can use the following command ([more info](https://www.git-tower.com/learn/git/faq/change-author-name-email)):"},{"lineNumber":191,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":192,"author":{"gitId":"-"},"content":"git config user.name \"YOUR_AUTHOR_NAME”"},{"lineNumber":193,"author":{"gitId":"-"},"content":"```"},{"lineNumber":194,"author":{"gitId":"-"},"content":"To set the author name to use a default value you want for future git repositories, you can use the following command:"},{"lineNumber":195,"author":{"gitId":"-"},"content":"``` {.no-line-numbers}"},{"lineNumber":196,"author":{"gitId":"-"},"content":"git config --global user.name \"YOUR_AUTHOR_NAME”"},{"lineNumber":197,"author":{"gitId":"-"},"content":"```"},{"lineNumber":198,"author":{"gitId":"chan-j-d"},"content":"RepoSense expects the Git Author Name to be the same as author\u0027s username on the Git hosting platform (GitHub, GitLab, BitBucket). If an author\u0027s `Git Author Name` is different from their username on the Git hosting platform, the `Git Author Name` needs to be specified in the standalone config file. If the author has more than one `Git Author Name`, multiple values can be entered too."},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"Note: Symbols such as `\"`, `!`, `/` etc. in your author name will be omitted, which may reduce the accuracy of the analysis if 2 names in the repository are approximately similar."},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"\u003c/div\u003e"}],"authorContributionMap":{"chan-j-d":9,"yhtMinceraft1010X":21,"gok99":8,"-":167}},{"path":"docs/ug/customizingReports.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Customizing reports\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed, step with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"The report can be customized using several ways, as explained below."},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Customize using CLI flags"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"**The simplest approach is to provide additional flags when running RepoSense.** The various flags are given in the panel below."},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  {{ embed(\"Appendix: **CLI syntax reference**\", \"cli.md\") }}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"### Customize using CSV config files"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"**Another, more powerful, way to customize the report is by using dedicated config files.** In this case you need to use the `--config` flag instead of the `--repo` flag when running RepoSense, as follows:"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  {{ embed(\"Appendix: **CLI syntax reference → `config` flag**\", \"cli.md#section-config\") }}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"**Managing config files collaboratively**: If you use RepoSense to monitor a large number of programmers, it may be more practical to get the programmers to submit PRs to update the config files as necessary (\u003ctooltip content\u003d\"a coder realizes some of her code is missing from the report because she used multiple git usernames, and wants to add the additional usernames to the config file\"\u003eexample use case\u003c/tooltip\u003e)."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"To ensure that their PRs are correct, you can use [Netlify _deploy previews_](https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/) to preview how the report would look like after the PR has been merged. More details are in the panels below."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  {{ embed(\"Appendix: **Using RepoSense with Netlify → Setting up**\", \"withNetlify.md#section-setting-up\") }}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  {{ embed(\"Appendix: **Using RepoSense with Netlify → PR previews**\", \"withNetlify.md#section-pr-previews\") }}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"### Get target repos to provide more info"},{"lineNumber":47,"author":{"gitId":"-"},"content":"**If feasible, you can also customize the target repos to play well with RepoSense** in the following two ways:"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"1\\. Add a _standalone config file_ to the repo to provide more config details to RepoSense. The format of the file is given below."},{"lineNumber":50,"author":{"gitId":"-"},"content":"  {{ embed(\"Appendix: **Standalone config file format**\", \"configFiles.md#section-standalone\") }}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"2\\. To have more precise control over which code segment is attributed to which author, authors can annotate their code using `@@author` tags, as explained below."},{"lineNumber":53,"author":{"gitId":"-"},"content":"  {{ embed(\"Appendix: **Using `@@author` tags**\", \"usingAuthorTags.md\") }}"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"In both instances, it is **necessary to commit any changes** for them to be detected by RepoSense."},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"\u003c/box\u003e"}],"authorContributionMap":{"yhtMinceraft1010X":7,"-":52}},{"path":"docs/ug/generatingReports.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Generating a report\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed with context %}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"Let\u0027s look at different ways to generate RepoSense reports."},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"* **If you have Java on your computer**, the straight-forward way to generate a report is to use the RepoSense executable to generate the report locally on your computer, as explained in the [_Generating reports locally_](#generating-reports-locally) section below."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **If you don\u0027t have Java on your computer or do not wish to run the executable on your computer**, some alternatives are provided in the [_Generating reports remotely_](#generating-reports-remotely) section below."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"RepoSense is built to analyze any type of git repo, remote or local. It works best when analyzing remote repositories hosted on GitHub, GitLab or BitBucket."},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"For other types of repositories, external links are disabled."},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"\u003c/box\u003e"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Generating reports locally"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. **Ensure you have the prerequisites**:"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * **Java 8** (JRE `1.8.0_60`) or later ([download :fas-download:](https://www.java.com/en/))."},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **git `2.14`** or later on the command line. ([download :fas-download:](https://git-scm.com/downloads)).\u003cbr\u003e run `git --version` in your OS terminal to confirm the version."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. **Download the latest JAR file** from our [releases](https://github.com/reposense/RepoSense/releases/latest)."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. **Generate a report**: The simplest use case for RepoSense is to generate a report for the recent history of a repo.\u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  command: `java -jar RepoSense.jar --repos LIST_OF_REPO_URLS --view`\u003cbr\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  Examples:"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   * `java -jar RepoSense.jar --repos https://github.com/reposense/RepoSense.git --view` (note the `.git` at the end of the repo URL)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"   * `java -jar RepoSense.jar --repos https://github.com/reposense/RepoSense.git c:/myRepose/foo/bar --view` analyzes the two specified repos (one remote, one local)."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"   The above commands will analyze the given repo(s) for commits done within \u003d\u003dthe last month\u003d\u003d and open the report in your default Browser."},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**To learn how to generate a report using \u003ctooltip content\u003d\"e.g., generate a report for a different period, for specific file types, for specific authors, etc.\"\u003eother settings\u003c/tooltip\u003e**, head over to the [_**Customizing reports**_](customizingReports.html) section."},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"## Generating reports remotely"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"**You can generate a RepoSense report remotely without installing/running anything on your computer.** This is particularly useful when you are deciding whether to adopt RepoSense."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"**The easiest option is to use Netlify.** The instructions are given below."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"{{ embed(\"Appendix: **Using RepoSense with Netlify → Setting up**\", \"withNetlify.md#section-setting-up\") }}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"**You can also use the following options.** While they are more work to set up, they are more suitable as a permanent solution due to their generous free tier."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"{{ embed(\"Appendix: **Using RepoSense with GitHub Actions → Setting up**\", \"withGithubActions.md#section-setting-up\") }}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"{{ embed(\"Appendix: **Using RepoSense with Travis → Setting up**\", \"withTravis.md#section-setting-up\") }}"}],"authorContributionMap":{"chan-j-d":6,"-":55}},{"path":"docs/ug/troubleshooting.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Troubleshooting\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"### Contributions missing in the ramp chart (but appear in the contribution bar and code panel)"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"This is probably a case of giving an incorrect author name alias (or GitHub ID) in your [author-config file](#author-config-csv).\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Please refer to [A Note About Git Author Name](#a-note-about-git-author-name) above on how to find out the correct author name you are using and how to change it.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Also, ensure that you have added all author name aliases you may be using (if you are using multiple computers or have previously changed your author name).\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Alternatively, you may choose to configure *RepoSense* to track using your GitHub email instead of in your [standalone config file](#provide-data-using-a-json-config-file) or [author-config file](#author-config-csv), which is more accurate compared to author name aliases. The associated GitHub email you are using can be found in your [GitHub settings](https://github.com/settings/emails)."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Contribution bar and code panel is empty (despite a non-empty ramp chart)"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"The contribution bar and code panel records the lines you have authored to the **latest** commit of the repository and branch you are analyzing.  As such, it is possible that while you have lots of committed contributions, your final authorship contribution is low. This happens if you have only deleted lines or someone else has overwritten your code and taken authorship for it (currently, RepoSense does not have the functionality to track overwritten lines).\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"It is also possible that another user has overridden the authorship of your lines using the [@@author tags](#provide-data-using-author-tags)."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"### RepoSense is not using the standalone config file in my local repository"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"Ensure that you have committed the changes to your standalone config file first before running the analysis, as *RepoSense* is unable to detect uncommitted changes to your local repository."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"### RepoSense fails on Windows (but works on Linux/Mac OS)"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"Possibly, you may have some file names with [special characters](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#naming-conventions) in them, which is disallowed in Windows OS. As such, *RepoSense* is unable to clone your repository fully, thus failing the analysis."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"### Some file types are not shown in the file type filter even if I have included them in the file formats when generating the report"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"The files of these types may be [binary files](https://en.wikipedia.org/wiki/Binary_file). *RepoSense* will group binary files under one single file type `binary`. Common binary files include images (`.jpg`, `.png`), applications (`.exe`), zip files (`.zip`, `.rar`) and certain document types (`.docx`, `.pptx`)."}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":41}},{"path":"docs/ug/usingAuthorTags.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Appendix: Using `@@author` tags\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"{% from \u0027scripts/macros.njk\u0027 import embed, step with context %}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"`@@author` tags is a rather invasive but sometimes necessary way to provide more information to RepoSense, by annotating the code being analyzed."},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"If you want to override the code authorship deduced by RepoSense (which is based on Git blame/log data), you can use `@@author` tags to specify certain code segments that should be credited to a certain author irrespective of git history. An example scenario where this is useful is when a method was originally written by one author but a second author did some minor refactoring to it; in this case, RepoSense might attribute the code to the second author while you may want to attribute the code to the first author."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"There are 2 types of `@@author` tags:"},{"lineNumber":18,"author":{"gitId":"-"},"content":"- Start Tags (format: `@@author AUTHOR_GITHUB_ID`): A start tag indicates the start of a code segment written by the author identified by the `AUTHOR_GITHUB_ID`."},{"lineNumber":19,"author":{"gitId":"-"},"content":"- End Tags (format: `@@author`): Optional. An end tag indicates the end of a code segment written by the author identified by the `AUTHOR_GITHUB_ID` of the start tag."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"If an end tag is not provided, the code till the next start tag (or the end of the file) will be attributed to the author specified in the start tag above. Use only when necessary to minimize polluting your code with these extra tags."},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"If an end tag is provided without a corresponding start tag, the code until the next start tag, the next end tag, or the end of the file, will not be attributed to any author. This should only be used if the code should not be attributed to any author."},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"The `@@author` tags should be enclosed within a comment, using the comment syntax of the file in concern. Below are some examples:"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"![author tags](../images/add-author-tags.png)"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"Currently, the following comment formats are supported:"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cul\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003cli\u003e// @@author authorName\u003c/li\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cli\u003e/* @@author authorName */\u003c/li\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \u003cli\u003e/* @@author authorName\u003c/li\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \u003cli\u003e# @@author authorName\u003c/li\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u0026lt!-- @@author authorName --\u0026gt\u003c/li\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003cli\u003e% @@author authorName\u003c/li\u003e  "},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003c/ul\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"First, RepoSense checks whether the line matches the supported comment formats. If the line does not match the formats,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"RepoSense treats it as a normal line. Else, it continues to check whether the GitHub username is in valid format."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"If the username is valid, the code till the next start tag, the end tag, or the end of file will be attributed to that author."},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"Otherwise, the code will not be attributed to any author."},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"Note: Remember to **commit** the files after the changes. (reason: RepoSense can see committed code only)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"Special thanks to [Collate project](https://github.com/se-edu/collate) for providing the inspiration for this functionality."}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":55}},{"path":"docs/ug/usingReports.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{% set title \u003d \"Using reports\" %}"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"Let\u0027s look at how to view, interpret, and interact with a RepoSense report."},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Viewing the report"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"As a report consists of web pages, it can be viewed using a Web Browser. Here are the ways to view the report in different situations."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Situation 1: The report has been hosted on a website**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  * Simply go to the URL of the report ([example](https://nus-cs2113-ay1920s2.github.io/tp-dashboard)) in your browser."},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Situation 2: You generated the report in your computer earlier**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Run RepoSense with the `--view` option:\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Format: `java -jar RepoSense.jar --view REPORT_FOLDER`\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    e.g., `java -jar RepoSense.jar --view ./myReport/reposense-report`"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* **Situation 3: The report was given to you as a zip file or as a folder**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  1. If it is a zip file, unzip it."},{"lineNumber":28,"author":{"gitId":"-"},"content":"  1. Open the `index.html` (in the unzipped report directory) using a browser."},{"lineNumber":29,"author":{"gitId":"-"},"content":"  1. If the report was not loaded automatically, click on the `choose file` button in the shown web page, and select the `archive.zip` (in the same directory) manually.\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     If even the `choose file` button is not showing up, try a different browser."},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Report structure"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"Here is an example of how a typical report looks like:"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"![report](../images/report-features.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"The report is divided into two sections: [_**Chart panel**_](#chart-panel) and the [_**Code panel**_](#code-panel). In some situations, the [_**Commits panel**_](#commits-panel) will appear in place of the _code panel_. All three are explained in the sections below."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"Links to external webpages (repository link, author\u0027s profile, blame view, etc.) is only properly supported when RepoSense analyzes a remote repository belonging to GitHub, GitLab or BitBucket."},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"\u003c/box\u003e"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Chart panel"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Ramp Charts](../images/rampchart.png)\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"The `Chart panel` (an example is shown above) contains a series of _ramp chart_ + _contribution bar_ pairs, possibly organized into sub-groups, with a _tool bar_ at the top."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"#### Ramp charts"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"definition\" seamless\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"**Ramp chart**: This is a visualization of the frequency and quantity of contributions of an author for a specific repository. Each ramp chart (i.e., light blue rectangle) represents an author\u0027s contribution timeline for a particular repository. Contributions appear as ramps in the timeline."},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"definition\" seamless\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**Ramp**: The name we use to refer to the triangular saw-tooth-like shape that represents a code contribution. A ramp can represent a single commit, a sum of the commits done in a certain period, depending on the granularity used."},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"* The ramp\u0027s area is proportional to the amount of contribution the author made at that time period."},{"lineNumber":67,"author":{"gitId":"-"},"content":"* The position of the right edge of the ramp (perpendicular to the blue bar) represents the period (the day or the week) in which the contribution was made."},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Hover the pointer over a ramp to see the total number of lines represented by that ramp."},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"* Click on the ramp to view details about the list of commits represented in the ramp."},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"  * At the commit-level of granularity, it links to the commit in the remote repository."},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"  * At higher levels of granularity, it displays the list of commits in the Code Panel."},{"lineNumber":72,"author":{"gitId":"-"},"content":"* To make the comparison between two authors easier, the color of the ramps that represent different authors\u0027 contributions at the same time period are the same."},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Ramps representing big contributions can overlap with earlier time periods. This represents the possibility that if the work committed during a specific period is big, it could have started at an earlier time period."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"#### Contribution bars"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"definition\" seamless\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"**Contribution bar**: It\u0027s the bar that appears below each ramp chart. Its length represents the total amount of code contributed by an author during the _total analysis period_."},{"lineNumber":80,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"* Hover over a contribution bar to see the exact amount of the contribution."},{"lineNumber":83,"author":{"gitId":"-"},"content":"* If an author contributed significantly higher than other authors, the contribution bar could _overflow_ into multiple lines."},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"We allow contribution bars to overflow into multiple lines (rather than adjust the scale to fit the maximum bar length) to prevent a minority of \u003ctooltip content\u003d\"i.e., those contributing an unusually high amount of code\"\u003eoutliers\u003c/tooltip\u003e from affecting the scale of the majority."},{"lineNumber":88,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"#### Tool bar"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"The `Tool Bar` at the top of the Chart panel provides a set of configuration options that control the Chart panel."},{"lineNumber":93,"author":{"gitId":"-"},"content":"* `Search`: filters the author and repository by keywords."},{"lineNumber":94,"author":{"gitId":"-"},"content":"  * Multiple keywords/terms can be used, separated by spaces."},{"lineNumber":95,"author":{"gitId":"-"},"content":"  * Entries that contain _any_ (not necessarily _all_) of the search terms will be displayed."},{"lineNumber":96,"author":{"gitId":"-"},"content":"  * The keywords used to filter the author and repository are case-insensitive."},{"lineNumber":97,"author":{"gitId":"-"},"content":"* `Group by`: grouping criteria for the rows of results."},{"lineNumber":98,"author":{"gitId":"-"},"content":"  * `None`: results will not be grouped in any particular way."},{"lineNumber":99,"author":{"gitId":"-"},"content":"  * `Repo/Branch`: results will be grouped by repositories and its\u0027 associating branches."},{"lineNumber":100,"author":{"gitId":"-"},"content":"  * `Author`: results will be grouped by the name of the author. Contributions made to multiple repositories by a particular author will be grouped under the author."},{"lineNumber":101,"author":{"gitId":"-"},"content":"* `Sort groups by`: sorting criteria for the main group. See note [1] below."},{"lineNumber":102,"author":{"gitId":"-"},"content":"  * `Group title`: groups will be sorted by the title of the group (in bold text) in alphabetical order."},{"lineNumber":103,"author":{"gitId":"-"},"content":"  * `Contribution`: groups will be sorted by the combined contributions within a group, in the order of number of lines added."},{"lineNumber":104,"author":{"gitId":"-"},"content":"  * `Variance`: groups will be sorted by how far the daily contributions are spread out from their average value among all authors involved. A detailed definition of variance is located [here](https://en.wikipedia.org/wiki/Variance)."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* `Sort within groups by`: sorting criteria within each group."},{"lineNumber":106,"author":{"gitId":"yhtMinceraft1010X"},"content":"  * `Title`: each group will be internally sorted by its title in alphabetical order."},{"lineNumber":107,"author":{"gitId":"-"},"content":"  * `Contribution`: each group will be internally sorted by individual contributions in the order of number of lines added."},{"lineNumber":108,"author":{"gitId":"-"},"content":"  * `Variance`: each group will be internally sorted by how far the daily contributions are spread out from their average value by each author into a particular repo. A detailed definition of variance is located [here](https://en.wikipedia.org/wiki/Variance)."},{"lineNumber":109,"author":{"gitId":"-"},"content":"* `Granularity`: the period of time for which commits are aggregated in the Ramp Chart."},{"lineNumber":110,"author":{"gitId":"-"},"content":"    * `Commit`: each commit made is shown as one ramp."},{"lineNumber":111,"author":{"gitId":"-"},"content":"    * `Day`: commits within a day (commits made within 00:00 to 23:59) are shown as one ramp."},{"lineNumber":112,"author":{"gitId":"-"},"content":"    * `Week`: commits within a week (from Monday 00:00 to Sunday 23:59) are shown as one ramp."},{"lineNumber":113,"author":{"gitId":"-"},"content":"* `Since`, `Until`: the date range for the Ramp Chart (not applied to the Contribution Bars)."},{"lineNumber":114,"author":{"gitId":"-"},"content":"* `Reset date range`: resets the date range of the Ramp Chart to the default date range."},{"lineNumber":115,"author":{"gitId":"-"},"content":"* `Breakdown by file type`: toggles the contribution bar to either display the bar by :"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    * the total lines of codes added (if the checkbox is left unchecked), or"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    * a breakdown of the number of lines of codes added to each file type (if the checkbox is checked). More info on note [3] below."},{"lineNumber":118,"author":{"gitId":"-"},"content":"* `Merge group`: merges all the ramp charts of each group into a single ramp chart; aggregates the contribution of each group."},{"lineNumber":119,"author":{"gitId":"-"},"content":"    * viewing of authored code of the group as a whole is available when `group by repos`."},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"Notes:\u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"[1] **`Sort groups by`**: each main group has its own index and percentile according to its ranking position after sorting (e.g., if the groups are sorted by contribution in descending order, a 25% percentile indicates that the group is in the top 25% of the whole cohort in terms of contribution)\u003cbr\u003e."},{"lineNumber":123,"author":{"gitId":"-"},"content":"[2] **`Repo/Branch`**: the repo/branch name is constructed as `ORGANIZATION/REPOSITORY[BRANCH]` (e.g., `reposense/reposense[master]`)\u003cbr\u003e"},{"lineNumber":124,"author":{"gitId":"-"},"content":"[3] The total contribution of each group will get updated based on the checked file types and will be taken into account when the sorting criteria is contribution."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"**RepoSense support _intelligent_ bookmarks**: Note how the browser URL changes as you modify settings in the report. If you send that URL to someone else, that person will be able to use that URL to view the report in the same _view configuration_ you had when you copied the URL. For example, [this URL](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/) and [this URL](https://nus-cs2113-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-03-01\u0026timeframe\u003dday\u0026mergegroup\u003dtrue\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue) give two different views of the same report."},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"## Code panel"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/code-panel.png\" alt\u003d\"code panel\" width\u003d\"468\"\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"The `Code panel` allows users to see the code attributed to a specific author. Click on the `\u003c/\u003e` icon beside the author\u0027s name in the `Chart panel` to display the `Code panel` on the right."},{"lineNumber":138,"author":{"gitId":"-"},"content":"* The Code panel shows the files that contain the author\u0027s contributions, sorted by the number of lines written."},{"lineNumber":139,"author":{"gitId":"-"},"content":"* Select the radio button to enable one of the following 2 filters. Note that only 1 of the 2 filters is active at any time."},{"lineNumber":140,"author":{"gitId":"-"},"content":"    * Type file path glob in glob filter to include files matching the glob expression."},{"lineNumber":141,"author":{"gitId":"-"},"content":"    * Select the checkboxes to include files of preferred file extensions."},{"lineNumber":142,"author":{"gitId":"-"},"content":"    The number right beside the file extension shows the total number of lines written by the author in such file extension files. In contrast, the number inside the parenthesis indicates the number of non-blank lines written by the author."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* Clicking the file title toggles the file content."},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":"* Clicking the first icon beside the file title opens the history view of the file on the remote repository."},{"lineNumber":145,"author":{"gitId":"chan-j-d"},"content":"* Clicking the second icon beside the file title opens the blame view of the file on the remote repository."},{"lineNumber":146,"author":{"gitId":"-"},"content":"* Code attributed to the author is highlighted in green."},{"lineNumber":147,"author":{"gitId":"-"},"content":"* Non-trivial code segments that the selected author does not write are hidden by default, but you can toggle them by clicking on the %%:fas-plus-circle:%% icon."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"Changing binary files, such as images (`.jpg`, `.png`), applications (`.exe`), zip files (`.zip`, `.rar`) and certain document types (`.docx`, `.pptx`), is not counted towards the total number of lines of code contributed by an author."},{"lineNumber":152,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"## Commits panel"},{"lineNumber":157,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/commits-panel.png\" alt\u003d\"commits panel\" width\u003d\"468\"\u003e"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"The `Commits panel` allows users to see the commits attributed to a specific author."},{"lineNumber":160,"author":{"gitId":"-"},"content":"* To view all commits attributed to an author, locate the author\u0027s ramp chart in the chart panel, and click on the %%:fas-list-ul:%% icon above the ramp chart."},{"lineNumber":161,"author":{"gitId":"-"},"content":"* To view commits of a specific period, locate the author\u0027s ramp chart in the chart panel, hold down the \u003ckbd\u003eCtrl\u003c/kbd\u003e key (\u003ckbd\u003e\u0026#8984;\u003c/kbd\u003e in MacOS), and click on the start and end positions of the period (on the ramp chart) you want to view. \u003cbr\u003e"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"![Opening commits panel](../images/opening-commits-panel.gif)"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"* The commits can be sorted by the date it was committed or by LoC."},{"lineNumber":166,"author":{"gitId":"-"},"content":"* The tags of the commits will also be displayed on top if any. Clicking on a tag will direct you to the commit having that particular tag."},{"lineNumber":167,"author":{"gitId":"-"},"content":"* The date range for the `Chart panel` can be updated by clicking on the \"Show ramp chart for this period\" below the name of the author."},{"lineNumber":168,"author":{"gitId":"-"},"content":"* The ramp chart at the top of the `Commits panel` represents individual commits (not weekly or daily contributions)."},{"lineNumber":169,"author":{"gitId":"-"},"content":"* The commit messages body can be expanded or collapsed by clicking on the %%:fas-ellipsis-h:%% icon beside each commit message title."},{"lineNumber":170,"author":{"gitId":"-"},"content":"* To promote and encourage the 50/72 rule for commit messages, a dotted vertical line will be shown for:"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  * Commit message subject that exceeds 50 characters."},{"lineNumber":172,"author":{"gitId":"-"},"content":"  * Commit message body after the 72nd character mark."}],"authorContributionMap":{"chan-j-d":10,"yhtMinceraft1010X":1,"-":161}},{"path":"frontend/.eslintrc.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"env\": {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"browser\": true"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  \"extends\": ["},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"airbnb-base\","},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"plugin:vue/recommended\","},{"lineNumber":8,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@vue/typescript\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"  ],"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  \"rules\": {"},{"lineNumber":11,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"vue/component-definition-name-casing\": ["},{"lineNumber":12,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"error\","},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"kebab-case\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    ],"},{"lineNumber":15,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"vue/order-in-components\": 0,"},{"lineNumber":16,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"vue/require-prop-types\": 0,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"no-param-reassign\": 0,"},{"lineNumber":18,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"arrow-parens\": ["},{"lineNumber":19,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"error\","},{"lineNumber":20,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"always\""},{"lineNumber":21,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    ],"},{"lineNumber":22,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"indent\": ["},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"error\","},{"lineNumber":24,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      2,"},{"lineNumber":25,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \"MemberExpression\": 2,"},{"lineNumber":27,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        \"CallExpression\": {"},{"lineNumber":28,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"          \"arguments\": 2"},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        },"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \"ArrayExpression\": 2,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        \"ignoredNodes\": ["},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \"ConditionalExpression\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ]"},{"lineNumber":34,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      }"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    ],"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"prefer-destructuring\": 0,"},{"lineNumber":37,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"func-names\": ["},{"lineNumber":38,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"error\","},{"lineNumber":39,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"as-needed\""},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    ],"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"no-alert\": 0,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"linebreak-style\": 0,"},{"lineNumber":43,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"max-len\": ["},{"lineNumber":44,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"error\","},{"lineNumber":45,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      {"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"code\": 120"},{"lineNumber":47,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      }"},{"lineNumber":48,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    ]"},{"lineNumber":49,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  },"},{"lineNumber":50,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"parserOptions\": {"},{"lineNumber":51,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"parser\": \"@typescript-eslint/parser\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"Zhou-Jiahao-1998":32,"-":20}},{"path":"frontend/cypress/config/report-config.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"{"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":"  \"title\": \"RepoSense Test Report\""},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"}"}],"authorContributionMap":{"gok99":3}},{"path":"frontend/cypress/package-lock.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"requires\": true,"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"lockfileVersion\": 1,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \"dependencies\": {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"@cypress/request\": {"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.88.10\","},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/@cypress/request/-/request-2.88.10.tgz\","},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-Zp7F+R93N0yZyG34GutyTNr+okam7s/Fzc1+i3kcqOP8vk6OuajuE9qZJ6Rs+10/1JFtXFYMdyarnU1rZuJesg\u003d\u003d\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":10,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        \"aws-sign2\": \"~0.7.0\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"        \"aws4\": \"^1.8.0\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \"caseless\": \"~0.12.0\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \"combined-stream\": \"~1.0.6\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \"extend\": \"~3.0.2\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \"forever-agent\": \"~0.6.1\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"        \"form-data\": \"~2.3.2\","},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"http-signature\": \"~1.3.6\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \"is-typedarray\": \"~1.0.0\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \"isstream\": \"~0.1.2\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \"json-stringify-safe\": \"~5.0.1\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \"mime-types\": \"~2.1.19\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \"performance-now\": \"^2.1.0\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \"qs\": \"~6.5.2\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \"safe-buffer\": \"^5.1.2\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \"tough-cookie\": \"~2.5.0\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \"tunnel-agent\": \"^0.6.0\","},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"uuid\": \"^8.3.2\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"@cypress/xvfb\": {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \"version\": \"1.2.4\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/@cypress/xvfb/-/xvfb-1.2.4.tgz\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-skbBzPggOVYCbnGgV+0dmBdW/s77ZkAOXIC1knS8NagwDjBrNC1LuXtQJeiN6l+m7lzmHtaoUw/ctJKdqkG57Q\u003d\u003d\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \"debug\": \"^3.1.0\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \"lodash.once\": \"^4.1.1\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      \"dependencies\": {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \"debug\": {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          \"version\": \"3.2.7\","},{"lineNumber":43,"author":{"gitId":"-"},"content":"          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.2.7.tgz\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \"integrity\": \"sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ\u003d\u003d\","},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \"dev\": true,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \"requires\": {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \"ms\": \"^2.1.1\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"@types/node\": {"},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"14.18.12\","},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-14.18.12.tgz\","},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-q4jlIR71hUpWTnGhXWcakgkZeHa3CCjcQcnuzU8M891BAWA2jHiziiWEPEkdS5pFsz7H9HJiy8BrK7tBRNrY7A\u003d\u003d\","},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"@types/sinonjs__fake-timers\": {"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"8.1.1\","},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/@types/sinonjs__fake-timers/-/sinonjs__fake-timers-8.1.1.tgz\","},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-0kSuKjAS0TrGLJ0M/+8MaFkGsQhZpB6pxOmvS3K8FYI72K//YmdfoW9X2qPsAKh1mkwxGD5zib9s1FIFed6E8g\u003d\u003d\","},{"lineNumber":62,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \"@types/sizzle\": {"},{"lineNumber":65,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.3.3\","},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/@types/sizzle/-/sizzle-2.3.3.tgz\","},{"lineNumber":67,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-JYM8x9EGF163bEyhdJBpR2QX1R5naCJHC8ucJylJ3w9/CVBaskdQ8WqBf8MmQrd1kRvp/a4TS8HJ+bxzR7ZJYQ\u003d\u003d\","},{"lineNumber":68,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"@types/yauzl\": {"},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.9.2\","},{"lineNumber":72,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/@types/yauzl/-/yauzl-2.9.2.tgz\","},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-8uALY5LTvSuHgloDVUvWP3pIauILm+8/0pDMokuDYIoNsOkSwd5AiHBTSEJjKTDcZr5z8UpgOWZkxBF4iJftoA\u003d\u003d\","},{"lineNumber":74,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"optional\": true,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"@types/node\": \"*\""},{"lineNumber":78,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":80,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"aggregate-error\": {"},{"lineNumber":81,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.1.0\","},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz\","},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA\u003d\u003d\","},{"lineNumber":84,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"clean-stack\": \"^2.0.0\","},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"indent-string\": \"^4.0.0\""},{"lineNumber":88,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":89,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":90,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"ansi-colors\": {"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.1.1\","},{"lineNumber":92,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/ansi-colors/-/ansi-colors-4.1.1.tgz\","},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-JoX0apGbHaUJBNl6yF+p6JAFYZ666/hhCGKN5t9QFjbJQKUU/g8MNbFDbvfrgKXvI1QpZplPOnwIo99lX/AAmA\u003d\u003d\","},{"lineNumber":94,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"ansi-escapes\": {"},{"lineNumber":97,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.3.2\","},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz\","},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ\u003d\u003d\","},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"type-fest\": \"^0.21.3\""},{"lineNumber":103,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":104,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"ansi-regex\": {"},{"lineNumber":106,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"5.0.1\","},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\","},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ\u003d\u003d\","},{"lineNumber":109,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    \"ansi-styles\": {"},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.3.0\","},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\","},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg\u003d\u003d\","},{"lineNumber":115,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":117,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"color-convert\": \"^2.0.1\""},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    \"arch\": {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      \"version\": \"2.2.0\","},{"lineNumber":122,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/arch/-/arch-2.2.0.tgz\","},{"lineNumber":123,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-Of/R0wqp83cgHozfIYLbBMnej79U/SVGOOyuB3VVFv1NRM/PSFMK12x9KVtiYzJqmnU5WR2qp0Z5rHb7sWGnFQ\u003d\u003d\","},{"lineNumber":124,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    \"asn1\": {"},{"lineNumber":127,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"0.2.6\","},{"lineNumber":128,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz\","},{"lineNumber":129,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ\u003d\u003d\","},{"lineNumber":130,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        \"safer-buffer\": \"~2.1.0\""},{"lineNumber":133,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    \"assert-plus\": {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.0\","},{"lineNumber":137,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz\","},{"lineNumber":138,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU\u003d\","},{"lineNumber":139,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":141,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"astral-regex\": {"},{"lineNumber":142,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.0.0\","},{"lineNumber":143,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/astral-regex/-/astral-regex-2.0.0.tgz\","},{"lineNumber":144,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-Z7tMw1ytTXt5jqMcOP+OQteU1VuNK9Y02uuJtKQ1Sv69jXQKKg5cibLwGJow8yzZP+eAc18EmLGPal0bp36rvQ\u003d\u003d\","},{"lineNumber":145,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true"},{"lineNumber":146,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    \"async\": {"},{"lineNumber":148,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.2.3\","},{"lineNumber":149,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/async/-/async-3.2.3.tgz\","},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-spZRyzKL5l5BZQrr/6m/SqFdBN0q3OCI0f9rjfBzCMBIP4p75P620rR3gTmaksNOhmzgdxcaxdNfMy6anrbM0g\u003d\u003d\","},{"lineNumber":151,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    \"asynckit\": {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"      \"version\": \"0.4.0\","},{"lineNumber":155,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz\","},{"lineNumber":156,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-x57Zf380y48robyXkLzDZkdLS3k\u003d\","},{"lineNumber":157,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    \"at-least-node\": {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.0\","},{"lineNumber":161,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz\","},{"lineNumber":162,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg\u003d\u003d\","},{"lineNumber":163,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    \"aws-sign2\": {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"      \"version\": \"0.7.0\","},{"lineNumber":167,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz\","},{"lineNumber":168,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg\u003d\","},{"lineNumber":169,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    \"aws4\": {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"      \"version\": \"1.11.0\","},{"lineNumber":173,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz\","},{"lineNumber":174,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA\u003d\u003d\","},{"lineNumber":175,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    \"balanced-match\": {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.2\","},{"lineNumber":179,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\","},{"lineNumber":180,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw\u003d\u003d\","},{"lineNumber":181,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":183,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"base64-js\": {"},{"lineNumber":184,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.5.1\","},{"lineNumber":185,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\","},{"lineNumber":186,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA\u003d\u003d\","},{"lineNumber":187,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true"},{"lineNumber":188,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    \"bcrypt-pbkdf\": {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.2\","},{"lineNumber":191,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz\","},{"lineNumber":192,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4\u003d\","},{"lineNumber":193,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":194,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        \"tweetnacl\": \"^0.14.3\""},{"lineNumber":196,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    \"blob-util\": {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.2\","},{"lineNumber":200,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/blob-util/-/blob-util-2.0.2.tgz\","},{"lineNumber":201,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-T7JQa+zsXXEa6/8ZhHcQEW1UFfVM49Ts65uBkFL6fz2QmrElqmbajIDJvuA0tEhRe5eIjpV9ZF+0RfZR9voJFQ\u003d\u003d\","},{"lineNumber":202,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    \"bluebird\": {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"      \"version\": \"3.7.2\","},{"lineNumber":206,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz\","},{"lineNumber":207,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg\u003d\u003d\","},{"lineNumber":208,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    \"brace-expansion\": {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"      \"version\": \"1.1.11\","},{"lineNumber":212,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\","},{"lineNumber":213,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA\u003d\u003d\","},{"lineNumber":214,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":215,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        \"balanced-match\": \"^1.0.0\","},{"lineNumber":217,"author":{"gitId":"-"},"content":"        \"concat-map\": \"0.0.1\""},{"lineNumber":218,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":220,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"buffer\": {"},{"lineNumber":221,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"5.7.1\","},{"lineNumber":222,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz\","},{"lineNumber":223,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ\u003d\u003d\","},{"lineNumber":224,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":225,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":226,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"base64-js\": \"^1.3.1\","},{"lineNumber":227,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"ieee754\": \"^1.1.13\""},{"lineNumber":228,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":229,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    \"buffer-crc32\": {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"      \"version\": \"0.2.13\","},{"lineNumber":232,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz\","},{"lineNumber":233,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-DTM+PwDqxQqhRUq9MO+MKl2ackI\u003d\","},{"lineNumber":234,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    \"cachedir\": {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"      \"version\": \"2.3.0\","},{"lineNumber":238,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/cachedir/-/cachedir-2.3.0.tgz\","},{"lineNumber":239,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-A+Fezp4zxnit6FanDmv9EqXNAi3vt9DWp51/71UEhXukb7QUuvtv9344h91dyAxuTLoSYJFU299qzR3tzwPAhw\u003d\u003d\","},{"lineNumber":240,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    \"caseless\": {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"      \"version\": \"0.12.0\","},{"lineNumber":244,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz\","},{"lineNumber":245,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw\u003d\","},{"lineNumber":246,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    \"chalk\": {"},{"lineNumber":249,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.1.2\","},{"lineNumber":250,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\","},{"lineNumber":251,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA\u003d\u003d\","},{"lineNumber":252,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":253,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        \"ansi-styles\": \"^4.1.0\","},{"lineNumber":255,"author":{"gitId":"-"},"content":"        \"supports-color\": \"^7.1.0\""},{"lineNumber":256,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":257,"author":{"gitId":"-"},"content":"      \"dependencies\": {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        \"supports-color\": {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"          \"version\": \"7.2.0\","},{"lineNumber":260,"author":{"gitId":"-"},"content":"          \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\","},{"lineNumber":261,"author":{"gitId":"-"},"content":"          \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw\u003d\u003d\","},{"lineNumber":262,"author":{"gitId":"-"},"content":"          \"dev\": true,"},{"lineNumber":263,"author":{"gitId":"-"},"content":"          \"requires\": {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            \"has-flag\": \"^4.0.0\""},{"lineNumber":265,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    \"check-more-types\": {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"      \"version\": \"2.24.0\","},{"lineNumber":271,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/check-more-types/-/check-more-types-2.24.0.tgz\","},{"lineNumber":272,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-FCD/sQ/URNz8ebQ4kbv//TKoRgA\u003d\","},{"lineNumber":273,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    \"ci-info\": {"},{"lineNumber":276,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.3.0\","},{"lineNumber":277,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/ci-info/-/ci-info-3.3.0.tgz\","},{"lineNumber":278,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-riT/3vI5YpVH6/qomlDnJow6TBee2PBKSEpx3O32EGPYbWGIRsIlGRms3Sm74wYE1JMo8RnO04Hb12+v1J5ICw\u003d\u003d\","},{"lineNumber":279,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true"},{"lineNumber":280,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":281,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"clean-stack\": {"},{"lineNumber":282,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.2.0\","},{"lineNumber":283,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz\","},{"lineNumber":284,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A\u003d\u003d\","},{"lineNumber":285,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    \"cli-cursor\": {"},{"lineNumber":288,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.1.0\","},{"lineNumber":289,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz\","},{"lineNumber":290,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw\u003d\u003d\","},{"lineNumber":291,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":292,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":293,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"restore-cursor\": \"^3.1.0\""},{"lineNumber":294,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    \"cli-table3\": {"},{"lineNumber":297,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"0.6.1\","},{"lineNumber":298,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/cli-table3/-/cli-table3-0.6.1.tgz\","},{"lineNumber":299,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-w0q/enDHhPLq44ovMGdQeeDLvwxwavsJX7oQGYt/LrBlYsyaxyDnp6z3QzFut/6kLLKnlcUVJLrpB7KBfgG/RA\u003d\u003d\","},{"lineNumber":300,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":301,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":302,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"colors\": \"1.4.0\","},{"lineNumber":303,"author":{"gitId":"-"},"content":"        \"string-width\": \"^4.2.0\""},{"lineNumber":304,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    \"cli-truncate\": {"},{"lineNumber":307,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.1.0\","},{"lineNumber":308,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/cli-truncate/-/cli-truncate-2.1.0.tgz\","},{"lineNumber":309,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-n8fOixwDD6b/ObinzTrp1ZKFzbgvKZvuz/TvejnLn1aQfC6r52XEx85FmuC+3HI+JM7coBRXUvNqEU2PHVrHpg\u003d\u003d\","},{"lineNumber":310,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":311,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":312,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"slice-ansi\": \"^3.0.0\","},{"lineNumber":313,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"string-width\": \"^4.2.0\""},{"lineNumber":314,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    \"color-convert\": {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.1\","},{"lineNumber":318,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\","},{"lineNumber":319,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ\u003d\u003d\","},{"lineNumber":320,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":321,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        \"color-name\": \"~1.1.4\""},{"lineNumber":323,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    \"color-name\": {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"      \"version\": \"1.1.4\","},{"lineNumber":327,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\","},{"lineNumber":328,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA\u003d\u003d\","},{"lineNumber":329,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":331,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"colorette\": {"},{"lineNumber":332,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.0.16\","},{"lineNumber":333,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/colorette/-/colorette-2.0.16.tgz\","},{"lineNumber":334,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-hUewv7oMjCp+wkBv5Rm0v87eJhq4woh5rSR+42YSQJKecCqgIqNkZ6lAlQms/BwHPJA5NKMRlpxPRv0n8HQW6g\u003d\u003d\","},{"lineNumber":335,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true"},{"lineNumber":336,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    \"colors\": {"},{"lineNumber":338,"author":{"gitId":"-"},"content":"      \"version\": \"1.4.0\","},{"lineNumber":339,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/colors/-/colors-1.4.0.tgz\","},{"lineNumber":340,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-a+UqTh4kgZg/SlGvfbzDHpgRu7AAQOmmqRHJnxhRZICKFUT91brVhNNt58CMWU9PsBbv3PDCZUHbVxuDiH2mtA\u003d\u003d\","},{"lineNumber":341,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":342,"author":{"gitId":"-"},"content":"      \"optional\": true"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    \"combined-stream\": {"},{"lineNumber":345,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.8\","},{"lineNumber":346,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz\","},{"lineNumber":347,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg\u003d\u003d\","},{"lineNumber":348,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":349,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        \"delayed-stream\": \"~1.0.0\""},{"lineNumber":351,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    \"commander\": {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"      \"version\": \"5.1.0\","},{"lineNumber":355,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-5.1.0.tgz\","},{"lineNumber":356,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-P0CysNDQ7rtVw4QIQtm+MRxV66vKFSvlsQvGYXZWR3qFU0jlMKHZZZgw8e+8DSah4UDKMqnknRDQz+xuQXQ/Zg\u003d\u003d\","},{"lineNumber":357,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    \"common-tags\": {"},{"lineNumber":360,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.8.2\","},{"lineNumber":361,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/common-tags/-/common-tags-1.8.2.tgz\","},{"lineNumber":362,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-gk/Z852D2Wtb//0I+kRFNKKE9dIIVirjoqPoA1wJU+XePVXZfGeBpk45+A1rKO4Q43prqWBNY/MiIeRLbPWUaA\u003d\u003d\","},{"lineNumber":363,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    \"concat-map\": {"},{"lineNumber":366,"author":{"gitId":"-"},"content":"      \"version\": \"0.0.1\","},{"lineNumber":367,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\","},{"lineNumber":368,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s\u003d\","},{"lineNumber":369,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    \"core-util-is\": {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.2\","},{"lineNumber":373,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz\","},{"lineNumber":374,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-tf1UIgqivFq1eqtxQMlAdUUDwac\u003d\","},{"lineNumber":375,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    \"cross-spawn\": {"},{"lineNumber":378,"author":{"gitId":"-"},"content":"      \"version\": \"7.0.3\","},{"lineNumber":379,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz\","},{"lineNumber":380,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w\u003d\u003d\","},{"lineNumber":381,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":382,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        \"path-key\": \"^3.1.0\","},{"lineNumber":384,"author":{"gitId":"-"},"content":"        \"shebang-command\": \"^2.0.0\","},{"lineNumber":385,"author":{"gitId":"-"},"content":"        \"which\": \"^2.0.1\""},{"lineNumber":386,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    \"cypress\": {"},{"lineNumber":389,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"9.5.1\","},{"lineNumber":390,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/cypress/-/cypress-9.5.1.tgz\","},{"lineNumber":391,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-H7lUWB3Svr44gz1rNnj941xmdsCljXoJa2cDneAltjI9leKLMQLm30x6jLlpQ730tiVtIbW5HdUmBzPzwzfUQg\u003d\u003d\","},{"lineNumber":392,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":393,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":394,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"@cypress/request\": \"^2.88.10\","},{"lineNumber":395,"author":{"gitId":"-"},"content":"        \"@cypress/xvfb\": \"^1.2.4\","},{"lineNumber":396,"author":{"gitId":"-"},"content":"        \"@types/node\": \"^14.14.31\","},{"lineNumber":397,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"@types/sinonjs__fake-timers\": \"8.1.1\","},{"lineNumber":398,"author":{"gitId":"-"},"content":"        \"@types/sizzle\": \"^2.3.2\","},{"lineNumber":399,"author":{"gitId":"-"},"content":"        \"arch\": \"^2.2.0\","},{"lineNumber":400,"author":{"gitId":"-"},"content":"        \"blob-util\": \"^2.0.2\","},{"lineNumber":401,"author":{"gitId":"-"},"content":"        \"bluebird\": \"^3.7.2\","},{"lineNumber":402,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"buffer\": \"^5.6.0\","},{"lineNumber":403,"author":{"gitId":"-"},"content":"        \"cachedir\": \"^2.3.0\","},{"lineNumber":404,"author":{"gitId":"-"},"content":"        \"chalk\": \"^4.1.0\","},{"lineNumber":405,"author":{"gitId":"-"},"content":"        \"check-more-types\": \"^2.24.0\","},{"lineNumber":406,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"cli-cursor\": \"^3.1.0\","},{"lineNumber":407,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"cli-table3\": \"~0.6.1\","},{"lineNumber":408,"author":{"gitId":"-"},"content":"        \"commander\": \"^5.1.0\","},{"lineNumber":409,"author":{"gitId":"-"},"content":"        \"common-tags\": \"^1.8.0\","},{"lineNumber":410,"author":{"gitId":"-"},"content":"        \"dayjs\": \"^1.10.4\","},{"lineNumber":411,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"debug\": \"^4.3.2\","},{"lineNumber":412,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"enquirer\": \"^2.3.6\","},{"lineNumber":413,"author":{"gitId":"-"},"content":"        \"eventemitter2\": \"^6.4.3\","},{"lineNumber":414,"author":{"gitId":"-"},"content":"        \"execa\": \"4.1.0\","},{"lineNumber":415,"author":{"gitId":"-"},"content":"        \"executable\": \"^4.1.1\","},{"lineNumber":416,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"extract-zip\": \"2.0.1\","},{"lineNumber":417,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"figures\": \"^3.2.0\","},{"lineNumber":418,"author":{"gitId":"-"},"content":"        \"fs-extra\": \"^9.1.0\","},{"lineNumber":419,"author":{"gitId":"-"},"content":"        \"getos\": \"^3.2.1\","},{"lineNumber":420,"author":{"gitId":"-"},"content":"        \"is-ci\": \"^3.0.0\","},{"lineNumber":421,"author":{"gitId":"-"},"content":"        \"is-installed-globally\": \"~0.4.0\","},{"lineNumber":422,"author":{"gitId":"-"},"content":"        \"lazy-ass\": \"^1.6.0\","},{"lineNumber":423,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"listr2\": \"^3.8.3\","},{"lineNumber":424,"author":{"gitId":"-"},"content":"        \"lodash\": \"^4.17.21\","},{"lineNumber":425,"author":{"gitId":"-"},"content":"        \"log-symbols\": \"^4.0.0\","},{"lineNumber":426,"author":{"gitId":"-"},"content":"        \"minimist\": \"^1.2.5\","},{"lineNumber":427,"author":{"gitId":"-"},"content":"        \"ospath\": \"^1.2.2\","},{"lineNumber":428,"author":{"gitId":"-"},"content":"        \"pretty-bytes\": \"^5.6.0\","},{"lineNumber":429,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"proxy-from-env\": \"1.0.0\","},{"lineNumber":430,"author":{"gitId":"-"},"content":"        \"request-progress\": \"^3.0.0\","},{"lineNumber":431,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"semver\": \"^7.3.2\","},{"lineNumber":432,"author":{"gitId":"-"},"content":"        \"supports-color\": \"^8.1.1\","},{"lineNumber":433,"author":{"gitId":"-"},"content":"        \"tmp\": \"~0.2.1\","},{"lineNumber":434,"author":{"gitId":"-"},"content":"        \"untildify\": \"^4.0.0\","},{"lineNumber":435,"author":{"gitId":"-"},"content":"        \"yauzl\": \"^2.10.0\""},{"lineNumber":436,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":437,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":438,"author":{"gitId":"-"},"content":"    \"dashdash\": {"},{"lineNumber":439,"author":{"gitId":"-"},"content":"      \"version\": \"1.14.1\","},{"lineNumber":440,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz\","},{"lineNumber":441,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA\u003d\","},{"lineNumber":442,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":443,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        \"assert-plus\": \"^1.0.0\""},{"lineNumber":445,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":446,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    \"dayjs\": {"},{"lineNumber":448,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.10.8\","},{"lineNumber":449,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/dayjs/-/dayjs-1.10.8.tgz\","},{"lineNumber":450,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-wbNwDfBHHur9UOzNUjeKUOJ0fCb0a52Wx0xInmQ7Y8FstyajiV1NmK1e00cxsr9YrE9r7yAChE0VvpuY5Rnlow\u003d\u003d\","},{"lineNumber":451,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    \"debug\": {"},{"lineNumber":454,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.3.3\","},{"lineNumber":455,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.3.tgz\","},{"lineNumber":456,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-/zxw5+vh1Tfv+4Qn7a5nsbcJKPaSvCDhojn6FEl9vupwK2VCSDtEiEtqr8DFtzYFOdz63LBkxec7DYuc2jon6Q\u003d\u003d\","},{"lineNumber":457,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":458,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        \"ms\": \"2.1.2\""},{"lineNumber":460,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":461,"author":{"gitId":"-"},"content":"      \"dependencies\": {"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        \"ms\": {"},{"lineNumber":463,"author":{"gitId":"-"},"content":"          \"version\": \"2.1.2\","},{"lineNumber":464,"author":{"gitId":"-"},"content":"          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\","},{"lineNumber":465,"author":{"gitId":"-"},"content":"          \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w\u003d\u003d\","},{"lineNumber":466,"author":{"gitId":"-"},"content":"          \"dev\": true"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":468,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":469,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    \"delayed-stream\": {"},{"lineNumber":471,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.0\","},{"lineNumber":472,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz\","},{"lineNumber":473,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-3zrhmayt+31ECqrgsp4icrJOxhk\u003d\","},{"lineNumber":474,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":475,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":476,"author":{"gitId":"-"},"content":"    \"ecc-jsbn\": {"},{"lineNumber":477,"author":{"gitId":"-"},"content":"      \"version\": \"0.1.2\","},{"lineNumber":478,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz\","},{"lineNumber":479,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-OoOpBOVDUyh4dMVkt1SThoSamMk\u003d\","},{"lineNumber":480,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":481,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        \"jsbn\": \"~0.1.0\","},{"lineNumber":483,"author":{"gitId":"-"},"content":"        \"safer-buffer\": \"^2.1.0\""},{"lineNumber":484,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":485,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":486,"author":{"gitId":"-"},"content":"    \"emoji-regex\": {"},{"lineNumber":487,"author":{"gitId":"-"},"content":"      \"version\": \"8.0.0\","},{"lineNumber":488,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\","},{"lineNumber":489,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A\u003d\u003d\","},{"lineNumber":490,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":491,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":492,"author":{"gitId":"-"},"content":"    \"end-of-stream\": {"},{"lineNumber":493,"author":{"gitId":"-"},"content":"      \"version\": \"1.4.4\","},{"lineNumber":494,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz\","},{"lineNumber":495,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q\u003d\u003d\","},{"lineNumber":496,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":497,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        \"once\": \"^1.4.0\""},{"lineNumber":499,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":500,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":501,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"enquirer\": {"},{"lineNumber":502,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.3.6\","},{"lineNumber":503,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/enquirer/-/enquirer-2.3.6.tgz\","},{"lineNumber":504,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-yjNnPr315/FjS4zIsUxYguYUPP2e1NK4d7E7ZOLiyYCcbFBiTMyID+2wvm2w6+pZ/odMA7cRkjhsPbltwBOrLg\u003d\u003d\","},{"lineNumber":505,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":506,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":507,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"ansi-colors\": \"^4.1.1\""},{"lineNumber":508,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":509,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":510,"author":{"gitId":"-"},"content":"    \"escape-string-regexp\": {"},{"lineNumber":511,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.5\","},{"lineNumber":512,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\","},{"lineNumber":513,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ\u003d\","},{"lineNumber":514,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":515,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":516,"author":{"gitId":"-"},"content":"    \"eventemitter2\": {"},{"lineNumber":517,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"6.4.5\","},{"lineNumber":518,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/eventemitter2/-/eventemitter2-6.4.5.tgz\","},{"lineNumber":519,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-bXE7Dyc1i6oQElDG0jMRZJrRAn9QR2xyyFGmBdZleNmyQX0FqGYmhZIrIrpPfm/w//LTo4tVQGOGQcGCb5q9uw\u003d\u003d\","},{"lineNumber":520,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":521,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":522,"author":{"gitId":"-"},"content":"    \"execa\": {"},{"lineNumber":523,"author":{"gitId":"-"},"content":"      \"version\": \"4.1.0\","},{"lineNumber":524,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/execa/-/execa-4.1.0.tgz\","},{"lineNumber":525,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-j5W0//W7f8UxAn8hXVnwG8tLwdiUy4FJLcSupCg6maBYZDpyBvTApK7KyuI4bKj8KOh1r2YH+6ucuYtJv1bTZA\u003d\u003d\","},{"lineNumber":526,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":527,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":528,"author":{"gitId":"-"},"content":"        \"cross-spawn\": \"^7.0.0\","},{"lineNumber":529,"author":{"gitId":"-"},"content":"        \"get-stream\": \"^5.0.0\","},{"lineNumber":530,"author":{"gitId":"-"},"content":"        \"human-signals\": \"^1.1.1\","},{"lineNumber":531,"author":{"gitId":"-"},"content":"        \"is-stream\": \"^2.0.0\","},{"lineNumber":532,"author":{"gitId":"-"},"content":"        \"merge-stream\": \"^2.0.0\","},{"lineNumber":533,"author":{"gitId":"-"},"content":"        \"npm-run-path\": \"^4.0.0\","},{"lineNumber":534,"author":{"gitId":"-"},"content":"        \"onetime\": \"^5.1.0\","},{"lineNumber":535,"author":{"gitId":"-"},"content":"        \"signal-exit\": \"^3.0.2\","},{"lineNumber":536,"author":{"gitId":"-"},"content":"        \"strip-final-newline\": \"^2.0.0\""},{"lineNumber":537,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":538,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":539,"author":{"gitId":"-"},"content":"    \"executable\": {"},{"lineNumber":540,"author":{"gitId":"-"},"content":"      \"version\": \"4.1.1\","},{"lineNumber":541,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/executable/-/executable-4.1.1.tgz\","},{"lineNumber":542,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-8iA79xD3uAch729dUG8xaaBBFGaEa0wdD2VkYLFHwlqosEj/jT66AzcreRDSgV7ehnNLBW2WR5jIXwGKjVdTLg\u003d\u003d\","},{"lineNumber":543,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":544,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":545,"author":{"gitId":"-"},"content":"        \"pify\": \"^2.2.0\""},{"lineNumber":546,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":547,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":548,"author":{"gitId":"-"},"content":"    \"extend\": {"},{"lineNumber":549,"author":{"gitId":"-"},"content":"      \"version\": \"3.0.2\","},{"lineNumber":550,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/extend/-/extend-3.0.2.tgz\","},{"lineNumber":551,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g\u003d\u003d\","},{"lineNumber":552,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":553,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":554,"author":{"gitId":"-"},"content":"    \"extract-zip\": {"},{"lineNumber":555,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.0.1\","},{"lineNumber":556,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/extract-zip/-/extract-zip-2.0.1.tgz\","},{"lineNumber":557,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg\u003d\u003d\","},{"lineNumber":558,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":559,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":560,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"@types/yauzl\": \"^2.9.1\","},{"lineNumber":561,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"debug\": \"^4.1.1\","},{"lineNumber":562,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"get-stream\": \"^5.1.0\","},{"lineNumber":563,"author":{"gitId":"-"},"content":"        \"yauzl\": \"^2.10.0\""},{"lineNumber":564,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":565,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":566,"author":{"gitId":"-"},"content":"    \"extsprintf\": {"},{"lineNumber":567,"author":{"gitId":"-"},"content":"      \"version\": \"1.3.0\","},{"lineNumber":568,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz\","},{"lineNumber":569,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-lpGEQOMEGnpBT4xS48V06zw+HgU\u003d\","},{"lineNumber":570,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":571,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":572,"author":{"gitId":"-"},"content":"    \"fd-slicer\": {"},{"lineNumber":573,"author":{"gitId":"-"},"content":"      \"version\": \"1.1.0\","},{"lineNumber":574,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz\","},{"lineNumber":575,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-JcfInLH5B3+IkbvmHY85Dq4lbx4\u003d\","},{"lineNumber":576,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":577,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        \"pend\": \"~1.2.0\""},{"lineNumber":579,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":580,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":581,"author":{"gitId":"-"},"content":"    \"figures\": {"},{"lineNumber":582,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.2.0\","},{"lineNumber":583,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/figures/-/figures-3.2.0.tgz\","},{"lineNumber":584,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg\u003d\u003d\","},{"lineNumber":585,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":586,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":587,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"escape-string-regexp\": \"^1.0.5\""},{"lineNumber":588,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":589,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":590,"author":{"gitId":"-"},"content":"    \"forever-agent\": {"},{"lineNumber":591,"author":{"gitId":"-"},"content":"      \"version\": \"0.6.1\","},{"lineNumber":592,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz\","},{"lineNumber":593,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-+8cfDEGt6zf5bFd60e1C2P2sypE\u003d\","},{"lineNumber":594,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":595,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":596,"author":{"gitId":"-"},"content":"    \"form-data\": {"},{"lineNumber":597,"author":{"gitId":"-"},"content":"      \"version\": \"2.3.3\","},{"lineNumber":598,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz\","},{"lineNumber":599,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ\u003d\u003d\","},{"lineNumber":600,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":601,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":602,"author":{"gitId":"-"},"content":"        \"asynckit\": \"^0.4.0\","},{"lineNumber":603,"author":{"gitId":"-"},"content":"        \"combined-stream\": \"^1.0.6\","},{"lineNumber":604,"author":{"gitId":"-"},"content":"        \"mime-types\": \"^2.1.12\""},{"lineNumber":605,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":606,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":607,"author":{"gitId":"-"},"content":"    \"fs-extra\": {"},{"lineNumber":608,"author":{"gitId":"-"},"content":"      \"version\": \"9.1.0\","},{"lineNumber":609,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz\","},{"lineNumber":610,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ\u003d\u003d\","},{"lineNumber":611,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":612,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":613,"author":{"gitId":"-"},"content":"        \"at-least-node\": \"^1.0.0\","},{"lineNumber":614,"author":{"gitId":"-"},"content":"        \"graceful-fs\": \"^4.2.0\","},{"lineNumber":615,"author":{"gitId":"-"},"content":"        \"jsonfile\": \"^6.0.1\","},{"lineNumber":616,"author":{"gitId":"-"},"content":"        \"universalify\": \"^2.0.0\""},{"lineNumber":617,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":618,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":619,"author":{"gitId":"-"},"content":"    \"fs.realpath\": {"},{"lineNumber":620,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.0\","},{"lineNumber":621,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\","},{"lineNumber":622,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-FQStJSMVjKpA20onh8sBQRmU6k8\u003d\","},{"lineNumber":623,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":624,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":625,"author":{"gitId":"-"},"content":"    \"get-stream\": {"},{"lineNumber":626,"author":{"gitId":"-"},"content":"      \"version\": \"5.2.0\","},{"lineNumber":627,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz\","},{"lineNumber":628,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA\u003d\u003d\","},{"lineNumber":629,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":630,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        \"pump\": \"^3.0.0\""},{"lineNumber":632,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":633,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":634,"author":{"gitId":"-"},"content":"    \"getos\": {"},{"lineNumber":635,"author":{"gitId":"-"},"content":"      \"version\": \"3.2.1\","},{"lineNumber":636,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/getos/-/getos-3.2.1.tgz\","},{"lineNumber":637,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-U56CfOK17OKgTVqozZjUKNdkfEv6jk5WISBJ8SHoagjE6L69zOwl3Z+O8myjY9MEW3i2HPWQBt/LTbCgcC973Q\u003d\u003d\","},{"lineNumber":638,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":639,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":640,"author":{"gitId":"-"},"content":"        \"async\": \"^3.2.0\""},{"lineNumber":641,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":642,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":643,"author":{"gitId":"-"},"content":"    \"getpass\": {"},{"lineNumber":644,"author":{"gitId":"-"},"content":"      \"version\": \"0.1.7\","},{"lineNumber":645,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz\","},{"lineNumber":646,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo\u003d\","},{"lineNumber":647,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":648,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":649,"author":{"gitId":"-"},"content":"        \"assert-plus\": \"^1.0.0\""},{"lineNumber":650,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":651,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":652,"author":{"gitId":"-"},"content":"    \"glob\": {"},{"lineNumber":653,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"7.2.0\","},{"lineNumber":654,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.0.tgz\","},{"lineNumber":655,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-lmLf6gtyrPq8tTjSmrO94wBeQbFR3HbLHbuyD69wuyQkImp2hWqMGB47OX65FBkPffO641IP9jWa1z4ivqG26Q\u003d\u003d\","},{"lineNumber":656,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":657,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":658,"author":{"gitId":"-"},"content":"        \"fs.realpath\": \"^1.0.0\","},{"lineNumber":659,"author":{"gitId":"-"},"content":"        \"inflight\": \"^1.0.4\","},{"lineNumber":660,"author":{"gitId":"-"},"content":"        \"inherits\": \"2\","},{"lineNumber":661,"author":{"gitId":"-"},"content":"        \"minimatch\": \"^3.0.4\","},{"lineNumber":662,"author":{"gitId":"-"},"content":"        \"once\": \"^1.3.0\","},{"lineNumber":663,"author":{"gitId":"-"},"content":"        \"path-is-absolute\": \"^1.0.0\""},{"lineNumber":664,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":665,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":666,"author":{"gitId":"-"},"content":"    \"global-dirs\": {"},{"lineNumber":667,"author":{"gitId":"-"},"content":"      \"version\": \"3.0.0\","},{"lineNumber":668,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/global-dirs/-/global-dirs-3.0.0.tgz\","},{"lineNumber":669,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-v8ho2DS5RiCjftj1nD9NmnfaOzTdud7RRnVd9kFNOjqZbISlx5DQ+OrTkywgd0dIt7oFCvKetZSHoHcP3sDdiA\u003d\u003d\","},{"lineNumber":670,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":671,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":672,"author":{"gitId":"-"},"content":"        \"ini\": \"2.0.0\""},{"lineNumber":673,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":674,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":675,"author":{"gitId":"-"},"content":"    \"graceful-fs\": {"},{"lineNumber":676,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.2.9\","},{"lineNumber":677,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.9.tgz\","},{"lineNumber":678,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-NtNxqUcXgpW2iMrfqSfR73Glt39K+BLwWsPs94yR63v45T0Wbej7eRmL5cWfwEgqXnmjQp3zaJTshdRW/qC2ZQ\u003d\u003d\","},{"lineNumber":679,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":680,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":681,"author":{"gitId":"-"},"content":"    \"has-flag\": {"},{"lineNumber":682,"author":{"gitId":"-"},"content":"      \"version\": \"4.0.0\","},{"lineNumber":683,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\","},{"lineNumber":684,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ\u003d\u003d\","},{"lineNumber":685,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":686,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":687,"author":{"gitId":"-"},"content":"    \"http-signature\": {"},{"lineNumber":688,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.3.6\","},{"lineNumber":689,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/http-signature/-/http-signature-1.3.6.tgz\","},{"lineNumber":690,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-3adrsD6zqo4GsTqtO7FyrejHNv+NgiIfAfv68+jVlFmSr9OGy7zrxONceFRLKvnnZA5jbxQBX1u9PpB6Wi32Gw\u003d\u003d\","},{"lineNumber":691,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":692,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":693,"author":{"gitId":"-"},"content":"        \"assert-plus\": \"^1.0.0\","},{"lineNumber":694,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"jsprim\": \"^2.0.2\","},{"lineNumber":695,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"sshpk\": \"^1.14.1\""},{"lineNumber":696,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":697,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":698,"author":{"gitId":"-"},"content":"    \"human-signals\": {"},{"lineNumber":699,"author":{"gitId":"-"},"content":"      \"version\": \"1.1.1\","},{"lineNumber":700,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/human-signals/-/human-signals-1.1.1.tgz\","},{"lineNumber":701,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-SEQu7vl8KjNL2eoGBLF3+wAjpsNfA9XMlXAYj/3EdaNfAlxKthD1xjEQfGOUhllCGGJVNY34bRr6lPINhNjyZw\u003d\u003d\","},{"lineNumber":702,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":703,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":704,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"ieee754\": {"},{"lineNumber":705,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.2.1\","},{"lineNumber":706,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz\","},{"lineNumber":707,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA\u003d\u003d\","},{"lineNumber":708,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true"},{"lineNumber":709,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":710,"author":{"gitId":"-"},"content":"    \"indent-string\": {"},{"lineNumber":711,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.0.0\","},{"lineNumber":712,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz\","},{"lineNumber":713,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg\u003d\u003d\","},{"lineNumber":714,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":715,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":716,"author":{"gitId":"-"},"content":"    \"inflight\": {"},{"lineNumber":717,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.6\","},{"lineNumber":718,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\","},{"lineNumber":719,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk\u003d\","},{"lineNumber":720,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":721,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":722,"author":{"gitId":"-"},"content":"        \"once\": \"^1.3.0\","},{"lineNumber":723,"author":{"gitId":"-"},"content":"        \"wrappy\": \"1\""},{"lineNumber":724,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":725,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":726,"author":{"gitId":"-"},"content":"    \"inherits\": {"},{"lineNumber":727,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.4\","},{"lineNumber":728,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\","},{"lineNumber":729,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ\u003d\u003d\","},{"lineNumber":730,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":731,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":732,"author":{"gitId":"-"},"content":"    \"ini\": {"},{"lineNumber":733,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.0\","},{"lineNumber":734,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/ini/-/ini-2.0.0.tgz\","},{"lineNumber":735,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA\u003d\u003d\","},{"lineNumber":736,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":737,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":738,"author":{"gitId":"-"},"content":"    \"is-ci\": {"},{"lineNumber":739,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.0.1\","},{"lineNumber":740,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/is-ci/-/is-ci-3.0.1.tgz\","},{"lineNumber":741,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-ZYvCgrefwqoQ6yTyYUbQu64HsITZ3NfKX1lzaEYdkTDcfKzzCI/wthRRYKkdjHKFVgNiXKAKm65Zo1pk2as/QQ\u003d\u003d\","},{"lineNumber":742,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":743,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":744,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"ci-info\": \"^3.2.0\""},{"lineNumber":745,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":746,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":747,"author":{"gitId":"-"},"content":"    \"is-fullwidth-code-point\": {"},{"lineNumber":748,"author":{"gitId":"-"},"content":"      \"version\": \"3.0.0\","},{"lineNumber":749,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\","},{"lineNumber":750,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg\u003d\u003d\","},{"lineNumber":751,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":752,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":753,"author":{"gitId":"-"},"content":"    \"is-installed-globally\": {"},{"lineNumber":754,"author":{"gitId":"-"},"content":"      \"version\": \"0.4.0\","},{"lineNumber":755,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/is-installed-globally/-/is-installed-globally-0.4.0.tgz\","},{"lineNumber":756,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ\u003d\u003d\","},{"lineNumber":757,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":758,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":759,"author":{"gitId":"-"},"content":"        \"global-dirs\": \"^3.0.0\","},{"lineNumber":760,"author":{"gitId":"-"},"content":"        \"is-path-inside\": \"^3.0.2\""},{"lineNumber":761,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":762,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":763,"author":{"gitId":"-"},"content":"    \"is-path-inside\": {"},{"lineNumber":764,"author":{"gitId":"-"},"content":"      \"version\": \"3.0.3\","},{"lineNumber":765,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz\","},{"lineNumber":766,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ\u003d\u003d\","},{"lineNumber":767,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":768,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":769,"author":{"gitId":"-"},"content":"    \"is-stream\": {"},{"lineNumber":770,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.0.1\","},{"lineNumber":771,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz\","},{"lineNumber":772,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg\u003d\u003d\","},{"lineNumber":773,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":774,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":775,"author":{"gitId":"-"},"content":"    \"is-typedarray\": {"},{"lineNumber":776,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.0\","},{"lineNumber":777,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz\","},{"lineNumber":778,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-5HnICFjfDBsR3dppQPlgEfzaSpo\u003d\","},{"lineNumber":779,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":780,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":781,"author":{"gitId":"-"},"content":"    \"is-unicode-supported\": {"},{"lineNumber":782,"author":{"gitId":"-"},"content":"      \"version\": \"0.1.0\","},{"lineNumber":783,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz\","},{"lineNumber":784,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw\u003d\u003d\","},{"lineNumber":785,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":786,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":787,"author":{"gitId":"-"},"content":"    \"isexe\": {"},{"lineNumber":788,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.0\","},{"lineNumber":789,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\","},{"lineNumber":790,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-6PvzdNxVb/iUehDcsFctYz8s+hA\u003d\","},{"lineNumber":791,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":792,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":793,"author":{"gitId":"-"},"content":"    \"isstream\": {"},{"lineNumber":794,"author":{"gitId":"-"},"content":"      \"version\": \"0.1.2\","},{"lineNumber":795,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz\","},{"lineNumber":796,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo\u003d\","},{"lineNumber":797,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":798,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":799,"author":{"gitId":"-"},"content":"    \"jsbn\": {"},{"lineNumber":800,"author":{"gitId":"-"},"content":"      \"version\": \"0.1.1\","},{"lineNumber":801,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz\","},{"lineNumber":802,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-peZUwuWi3rXyAdls77yoDA7y9RM\u003d\","},{"lineNumber":803,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":804,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":805,"author":{"gitId":"-"},"content":"    \"json-schema\": {"},{"lineNumber":806,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"0.4.0\","},{"lineNumber":807,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz\","},{"lineNumber":808,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA\u003d\u003d\","},{"lineNumber":809,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":810,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":811,"author":{"gitId":"-"},"content":"    \"json-stringify-safe\": {"},{"lineNumber":812,"author":{"gitId":"-"},"content":"      \"version\": \"5.0.1\","},{"lineNumber":813,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz\","},{"lineNumber":814,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus\u003d\","},{"lineNumber":815,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":816,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":817,"author":{"gitId":"-"},"content":"    \"jsonfile\": {"},{"lineNumber":818,"author":{"gitId":"-"},"content":"      \"version\": \"6.1.0\","},{"lineNumber":819,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz\","},{"lineNumber":820,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ\u003d\u003d\","},{"lineNumber":821,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":822,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":823,"author":{"gitId":"-"},"content":"        \"graceful-fs\": \"^4.1.6\","},{"lineNumber":824,"author":{"gitId":"-"},"content":"        \"universalify\": \"^2.0.0\""},{"lineNumber":825,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":826,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":827,"author":{"gitId":"-"},"content":"    \"jsprim\": {"},{"lineNumber":828,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.0.2\","},{"lineNumber":829,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/jsprim/-/jsprim-2.0.2.tgz\","},{"lineNumber":830,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-gqXddjPqQ6G40VdnI6T6yObEC+pDNvyP95wdQhkWkg7crHH3km5qP1FsOXEkzEQwnz6gz5qGTn1c2Y52wP3OyQ\u003d\u003d\","},{"lineNumber":831,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":832,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":833,"author":{"gitId":"-"},"content":"        \"assert-plus\": \"1.0.0\","},{"lineNumber":834,"author":{"gitId":"-"},"content":"        \"extsprintf\": \"1.3.0\","},{"lineNumber":835,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"json-schema\": \"0.4.0\","},{"lineNumber":836,"author":{"gitId":"-"},"content":"        \"verror\": \"1.10.0\""},{"lineNumber":837,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":838,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":839,"author":{"gitId":"-"},"content":"    \"lazy-ass\": {"},{"lineNumber":840,"author":{"gitId":"-"},"content":"      \"version\": \"1.6.0\","},{"lineNumber":841,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/lazy-ass/-/lazy-ass-1.6.0.tgz\","},{"lineNumber":842,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-eZllXoZGwX8In90YfRUNMyTVRRM\u003d\","},{"lineNumber":843,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":844,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":845,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"listr2\": {"},{"lineNumber":846,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.14.0\","},{"lineNumber":847,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/listr2/-/listr2-3.14.0.tgz\","},{"lineNumber":848,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-TyWI8G99GX9GjE54cJ+RrNMcIFBfwMPxc3XTFiAYGN4s10hWROGtOg7+O6u6LE3mNkyld7RSLE6nrKBvTfcs3g\u003d\u003d\","},{"lineNumber":849,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":850,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":851,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"cli-truncate\": \"^2.1.0\","},{"lineNumber":852,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"colorette\": \"^2.0.16\","},{"lineNumber":853,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"log-update\": \"^4.0.0\","},{"lineNumber":854,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"p-map\": \"^4.0.0\","},{"lineNumber":855,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"rfdc\": \"^1.3.0\","},{"lineNumber":856,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"rxjs\": \"^7.5.1\","},{"lineNumber":857,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"through\": \"^2.3.8\","},{"lineNumber":858,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"wrap-ansi\": \"^7.0.0\""},{"lineNumber":859,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":860,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":861,"author":{"gitId":"-"},"content":"    \"lodash\": {"},{"lineNumber":862,"author":{"gitId":"-"},"content":"      \"version\": \"4.17.21\","},{"lineNumber":863,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz\","},{"lineNumber":864,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg\u003d\u003d\","},{"lineNumber":865,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":866,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":867,"author":{"gitId":"-"},"content":"    \"lodash.once\": {"},{"lineNumber":868,"author":{"gitId":"-"},"content":"      \"version\": \"4.1.1\","},{"lineNumber":869,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz\","},{"lineNumber":870,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-DdOXEhPHxW34gJd9UEyI+0cal6w\u003d\","},{"lineNumber":871,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":872,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":873,"author":{"gitId":"-"},"content":"    \"log-symbols\": {"},{"lineNumber":874,"author":{"gitId":"-"},"content":"      \"version\": \"4.1.0\","},{"lineNumber":875,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz\","},{"lineNumber":876,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg\u003d\u003d\","},{"lineNumber":877,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":878,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":879,"author":{"gitId":"-"},"content":"        \"chalk\": \"^4.1.0\","},{"lineNumber":880,"author":{"gitId":"-"},"content":"        \"is-unicode-supported\": \"^0.1.0\""},{"lineNumber":881,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":882,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":883,"author":{"gitId":"-"},"content":"    \"log-update\": {"},{"lineNumber":884,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.0.0\","},{"lineNumber":885,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/log-update/-/log-update-4.0.0.tgz\","},{"lineNumber":886,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-9fkkDevMefjg0mmzWFBW8YkFP91OrizzkW3diF7CpG+S2EYdy4+TVfGwz1zeF8x7hCx1ovSPTOE9Ngib74qqUg\u003d\u003d\","},{"lineNumber":887,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":888,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":889,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"ansi-escapes\": \"^4.3.0\","},{"lineNumber":890,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"cli-cursor\": \"^3.1.0\","},{"lineNumber":891,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"slice-ansi\": \"^4.0.0\","},{"lineNumber":892,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"wrap-ansi\": \"^6.2.0\""},{"lineNumber":893,"author":{"gitId":"-"},"content":"      },"},{"lineNumber":894,"author":{"gitId":"-"},"content":"      \"dependencies\": {"},{"lineNumber":895,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"slice-ansi\": {"},{"lineNumber":896,"author":{"gitId":"yhtMinceraft1010X"},"content":"          \"version\": \"4.0.0\","},{"lineNumber":897,"author":{"gitId":"yhtMinceraft1010X"},"content":"          \"resolved\": \"https://registry.npmjs.org/slice-ansi/-/slice-ansi-4.0.0.tgz\","},{"lineNumber":898,"author":{"gitId":"yhtMinceraft1010X"},"content":"          \"integrity\": \"sha512-qMCMfhY040cVHT43K9BFygqYbUPFZKHOg7K73mtTWJRb8pyP3fzf4Ixd5SzdEJQ6MRUg/WBnOLxghZtKKurENQ\u003d\u003d\","},{"lineNumber":899,"author":{"gitId":"-"},"content":"          \"dev\": true,"},{"lineNumber":900,"author":{"gitId":"-"},"content":"          \"requires\": {"},{"lineNumber":901,"author":{"gitId":"yhtMinceraft1010X"},"content":"            \"ansi-styles\": \"^4.0.0\","},{"lineNumber":902,"author":{"gitId":"yhtMinceraft1010X"},"content":"            \"astral-regex\": \"^2.0.0\","},{"lineNumber":903,"author":{"gitId":"yhtMinceraft1010X"},"content":"            \"is-fullwidth-code-point\": \"^3.0.0\""},{"lineNumber":904,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":905,"author":{"gitId":"-"},"content":"        },"},{"lineNumber":906,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"wrap-ansi\": {"},{"lineNumber":907,"author":{"gitId":"yhtMinceraft1010X"},"content":"          \"version\": \"6.2.0\","},{"lineNumber":908,"author":{"gitId":"yhtMinceraft1010X"},"content":"          \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz\","},{"lineNumber":909,"author":{"gitId":"yhtMinceraft1010X"},"content":"          \"integrity\": \"sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA\u003d\u003d\","},{"lineNumber":910,"author":{"gitId":"-"},"content":"          \"dev\": true,"},{"lineNumber":911,"author":{"gitId":"-"},"content":"          \"requires\": {"},{"lineNumber":912,"author":{"gitId":"yhtMinceraft1010X"},"content":"            \"ansi-styles\": \"^4.0.0\","},{"lineNumber":913,"author":{"gitId":"yhtMinceraft1010X"},"content":"            \"string-width\": \"^4.1.0\","},{"lineNumber":914,"author":{"gitId":"yhtMinceraft1010X"},"content":"            \"strip-ansi\": \"^6.0.0\""},{"lineNumber":915,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":916,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":917,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":918,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":919,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"lru-cache\": {"},{"lineNumber":920,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"6.0.0\","},{"lineNumber":921,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz\","},{"lineNumber":922,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA\u003d\u003d\","},{"lineNumber":923,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":924,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":925,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"yallist\": \"^4.0.0\""},{"lineNumber":926,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":927,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":928,"author":{"gitId":"-"},"content":"    \"merge-stream\": {"},{"lineNumber":929,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.0\","},{"lineNumber":930,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz\","},{"lineNumber":931,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w\u003d\u003d\","},{"lineNumber":932,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":933,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":934,"author":{"gitId":"-"},"content":"    \"mime-db\": {"},{"lineNumber":935,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.51.0\","},{"lineNumber":936,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.51.0.tgz\","},{"lineNumber":937,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-5y8A56jg7XVQx2mbv1lu49NR4dokRnhZYTtL+KGfaa27uq4pSTXkwQkFJl4pkRMyNFz/EtYDSkiiEHx3F7UN6g\u003d\u003d\","},{"lineNumber":938,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":939,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":940,"author":{"gitId":"-"},"content":"    \"mime-types\": {"},{"lineNumber":941,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.1.34\","},{"lineNumber":942,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.34.tgz\","},{"lineNumber":943,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-6cP692WwGIs9XXdOO4++N+7qjqv0rqxxVvJ3VHPh/Sc9mVZcQP+ZGhkKiTvWMQRr2tbHkJP/Yn7Y0npb3ZBs4A\u003d\u003d\","},{"lineNumber":944,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":945,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":946,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"mime-db\": \"1.51.0\""},{"lineNumber":947,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":948,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":949,"author":{"gitId":"-"},"content":"    \"mimic-fn\": {"},{"lineNumber":950,"author":{"gitId":"-"},"content":"      \"version\": \"2.1.0\","},{"lineNumber":951,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz\","},{"lineNumber":952,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg\u003d\u003d\","},{"lineNumber":953,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":954,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":955,"author":{"gitId":"-"},"content":"    \"minimatch\": {"},{"lineNumber":956,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.1.2\","},{"lineNumber":957,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\","},{"lineNumber":958,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw\u003d\u003d\","},{"lineNumber":959,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":960,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":961,"author":{"gitId":"-"},"content":"        \"brace-expansion\": \"^1.1.7\""},{"lineNumber":962,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":963,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":964,"author":{"gitId":"-"},"content":"    \"minimist\": {"},{"lineNumber":965,"author":{"gitId":"-"},"content":"      \"version\": \"1.2.6\","},{"lineNumber":966,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.6.tgz\","},{"lineNumber":967,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q\u003d\u003d\","},{"lineNumber":968,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":969,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":970,"author":{"gitId":"-"},"content":"    \"ms\": {"},{"lineNumber":971,"author":{"gitId":"-"},"content":"      \"version\": \"2.1.3\","},{"lineNumber":972,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\","},{"lineNumber":973,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA\u003d\u003d\","},{"lineNumber":974,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":975,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":976,"author":{"gitId":"-"},"content":"    \"npm-run-path\": {"},{"lineNumber":977,"author":{"gitId":"-"},"content":"      \"version\": \"4.0.1\","},{"lineNumber":978,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz\","},{"lineNumber":979,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw\u003d\u003d\","},{"lineNumber":980,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":981,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":982,"author":{"gitId":"-"},"content":"        \"path-key\": \"^3.0.0\""},{"lineNumber":983,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":984,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":985,"author":{"gitId":"-"},"content":"    \"once\": {"},{"lineNumber":986,"author":{"gitId":"-"},"content":"      \"version\": \"1.4.0\","},{"lineNumber":987,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\","},{"lineNumber":988,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-WDsap3WWHUsROsF9nFC6753Xa9E\u003d\","},{"lineNumber":989,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":990,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":991,"author":{"gitId":"-"},"content":"        \"wrappy\": \"1\""},{"lineNumber":992,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":993,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":994,"author":{"gitId":"-"},"content":"    \"onetime\": {"},{"lineNumber":995,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"5.1.2\","},{"lineNumber":996,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz\","},{"lineNumber":997,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg\u003d\u003d\","},{"lineNumber":998,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":999,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":1000,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"mimic-fn\": \"^2.1.0\""},{"lineNumber":1001,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":1002,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1003,"author":{"gitId":"-"},"content":"    \"ospath\": {"},{"lineNumber":1004,"author":{"gitId":"-"},"content":"      \"version\": \"1.2.2\","},{"lineNumber":1005,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/ospath/-/ospath-1.2.2.tgz\","},{"lineNumber":1006,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-EnZjl3Sj+O8lcvf+QoDg6kVQwHs\u003d\","},{"lineNumber":1007,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1008,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1009,"author":{"gitId":"-"},"content":"    \"p-map\": {"},{"lineNumber":1010,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.0.0\","},{"lineNumber":1011,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz\","},{"lineNumber":1012,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ\u003d\u003d\","},{"lineNumber":1013,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":1014,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":1015,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"aggregate-error\": \"^3.0.0\""},{"lineNumber":1016,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":1017,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1018,"author":{"gitId":"-"},"content":"    \"path-is-absolute\": {"},{"lineNumber":1019,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.1\","},{"lineNumber":1020,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\","},{"lineNumber":1021,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-F0uSaHNVNP+8es5r9TpanhtcX18\u003d\","},{"lineNumber":1022,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1023,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1024,"author":{"gitId":"-"},"content":"    \"path-key\": {"},{"lineNumber":1025,"author":{"gitId":"-"},"content":"      \"version\": \"3.1.1\","},{"lineNumber":1026,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\","},{"lineNumber":1027,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q\u003d\u003d\","},{"lineNumber":1028,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1029,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1030,"author":{"gitId":"-"},"content":"    \"pend\": {"},{"lineNumber":1031,"author":{"gitId":"-"},"content":"      \"version\": \"1.2.0\","},{"lineNumber":1032,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/pend/-/pend-1.2.0.tgz\","},{"lineNumber":1033,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-elfrVQpng/kRUzH89GY9XI4AelA\u003d\","},{"lineNumber":1034,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1035,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1036,"author":{"gitId":"-"},"content":"    \"performance-now\": {"},{"lineNumber":1037,"author":{"gitId":"-"},"content":"      \"version\": \"2.1.0\","},{"lineNumber":1038,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz\","},{"lineNumber":1039,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns\u003d\","},{"lineNumber":1040,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1041,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1042,"author":{"gitId":"-"},"content":"    \"pify\": {"},{"lineNumber":1043,"author":{"gitId":"-"},"content":"      \"version\": \"2.3.0\","},{"lineNumber":1044,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/pify/-/pify-2.3.0.tgz\","},{"lineNumber":1045,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-7RQaasBDqEnqWISY59yosVMw6Qw\u003d\","},{"lineNumber":1046,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1047,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1048,"author":{"gitId":"-"},"content":"    \"pretty-bytes\": {"},{"lineNumber":1049,"author":{"gitId":"-"},"content":"      \"version\": \"5.6.0\","},{"lineNumber":1050,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-5.6.0.tgz\","},{"lineNumber":1051,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-FFw039TmrBqFK8ma/7OL3sDz/VytdtJr044/QUJtH0wK9lb9jLq9tJyIxUwtQJHwar2BqtiA4iCWSwo9JLkzFg\u003d\u003d\","},{"lineNumber":1052,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1053,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1054,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"proxy-from-env\": {"},{"lineNumber":1055,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.0.0\","},{"lineNumber":1056,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.0.0.tgz\","},{"lineNumber":1057,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha1-M8UDmPcOp+uW0h97gXYwpVeRx+4\u003d\","},{"lineNumber":1058,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1059,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"    \"psl\": {"},{"lineNumber":1061,"author":{"gitId":"-"},"content":"      \"version\": \"1.8.0\","},{"lineNumber":1062,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/psl/-/psl-1.8.0.tgz\","},{"lineNumber":1063,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ\u003d\u003d\","},{"lineNumber":1064,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1065,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1066,"author":{"gitId":"-"},"content":"    \"pump\": {"},{"lineNumber":1067,"author":{"gitId":"-"},"content":"      \"version\": \"3.0.0\","},{"lineNumber":1068,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/pump/-/pump-3.0.0.tgz\","},{"lineNumber":1069,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww\u003d\u003d\","},{"lineNumber":1070,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1071,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1072,"author":{"gitId":"-"},"content":"        \"end-of-stream\": \"^1.1.0\","},{"lineNumber":1073,"author":{"gitId":"-"},"content":"        \"once\": \"^1.3.1\""},{"lineNumber":1074,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1075,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"    \"punycode\": {"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"      \"version\": \"2.1.1\","},{"lineNumber":1078,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz\","},{"lineNumber":1079,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A\u003d\u003d\","},{"lineNumber":1080,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1081,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1082,"author":{"gitId":"-"},"content":"    \"qs\": {"},{"lineNumber":1083,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"6.5.3\","},{"lineNumber":1084,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.5.3.tgz\","},{"lineNumber":1085,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA\u003d\u003d\","},{"lineNumber":1086,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1087,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1088,"author":{"gitId":"-"},"content":"    \"request-progress\": {"},{"lineNumber":1089,"author":{"gitId":"-"},"content":"      \"version\": \"3.0.0\","},{"lineNumber":1090,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/request-progress/-/request-progress-3.0.0.tgz\","},{"lineNumber":1091,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-TKdUCBx/7GP1BeT6qCWqBs1mnb4\u003d\","},{"lineNumber":1092,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1093,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1094,"author":{"gitId":"-"},"content":"        \"throttleit\": \"^1.0.0\""},{"lineNumber":1095,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1096,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1097,"author":{"gitId":"-"},"content":"    \"restore-cursor\": {"},{"lineNumber":1098,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.1.0\","},{"lineNumber":1099,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz\","},{"lineNumber":1100,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA\u003d\u003d\","},{"lineNumber":1101,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1102,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1103,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"onetime\": \"^5.1.0\","},{"lineNumber":1104,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"signal-exit\": \"^3.0.2\""},{"lineNumber":1105,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1106,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1107,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"rfdc\": {"},{"lineNumber":1108,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.3.0\","},{"lineNumber":1109,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/rfdc/-/rfdc-1.3.0.tgz\","},{"lineNumber":1110,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-V2hovdzFbOi77/WajaSMXk2OLm+xNIeQdMMuB7icj7bk6zi2F8GGAxigcnDFpJHbNyNcgyJDiP+8nOrY5cZGrA\u003d\u003d\","},{"lineNumber":1111,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true"},{"lineNumber":1112,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":1113,"author":{"gitId":"-"},"content":"    \"rimraf\": {"},{"lineNumber":1114,"author":{"gitId":"-"},"content":"      \"version\": \"3.0.2\","},{"lineNumber":1115,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz\","},{"lineNumber":1116,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA\u003d\u003d\","},{"lineNumber":1117,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1119,"author":{"gitId":"-"},"content":"        \"glob\": \"^7.1.3\""},{"lineNumber":1120,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1121,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1122,"author":{"gitId":"-"},"content":"    \"rxjs\": {"},{"lineNumber":1123,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"7.5.5\","},{"lineNumber":1124,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/rxjs/-/rxjs-7.5.5.tgz\","},{"lineNumber":1125,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-sy+H0pQofO95VDmFLzyaw9xNJU4KTRSwQIGM6+iG3SypAtCiLDzpeG8sJrNCWn2Up9km+KhkvTdbkrdy+yzZdw\u003d\u003d\","},{"lineNumber":1126,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1127,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1128,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"tslib\": \"^2.1.0\""},{"lineNumber":1129,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1130,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1131,"author":{"gitId":"-"},"content":"    \"safe-buffer\": {"},{"lineNumber":1132,"author":{"gitId":"-"},"content":"      \"version\": \"5.2.1\","},{"lineNumber":1133,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\","},{"lineNumber":1134,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ\u003d\u003d\","},{"lineNumber":1135,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1136,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1137,"author":{"gitId":"-"},"content":"    \"safer-buffer\": {"},{"lineNumber":1138,"author":{"gitId":"-"},"content":"      \"version\": \"2.1.2\","},{"lineNumber":1139,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\","},{"lineNumber":1140,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg\u003d\u003d\","},{"lineNumber":1141,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1142,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1143,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"semver\": {"},{"lineNumber":1144,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"7.3.5\","},{"lineNumber":1145,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-7.3.5.tgz\","},{"lineNumber":1146,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-PoeGJYh8HK4BTO/a9Tf6ZG3veo/A7ZVsYrSA6J8ny9nb3B1VrpkuN+z9OE5wfE5p6H4LchYZsegiQgbJD94ZFQ\u003d\u003d\","},{"lineNumber":1147,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":1148,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":1149,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"lru-cache\": \"^6.0.0\""},{"lineNumber":1150,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":1151,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":1152,"author":{"gitId":"-"},"content":"    \"shebang-command\": {"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.0\","},{"lineNumber":1154,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\","},{"lineNumber":1155,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA\u003d\u003d\","},{"lineNumber":1156,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1157,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"        \"shebang-regex\": \"^3.0.0\""},{"lineNumber":1159,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1160,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1161,"author":{"gitId":"-"},"content":"    \"shebang-regex\": {"},{"lineNumber":1162,"author":{"gitId":"-"},"content":"      \"version\": \"3.0.0\","},{"lineNumber":1163,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\","},{"lineNumber":1164,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A\u003d\u003d\","},{"lineNumber":1165,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1166,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1167,"author":{"gitId":"-"},"content":"    \"signal-exit\": {"},{"lineNumber":1168,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.0.7\","},{"lineNumber":1169,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz\","},{"lineNumber":1170,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ\u003d\u003d\","},{"lineNumber":1171,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1172,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1173,"author":{"gitId":"-"},"content":"    \"slice-ansi\": {"},{"lineNumber":1174,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"3.0.0\","},{"lineNumber":1175,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/slice-ansi/-/slice-ansi-3.0.0.tgz\","},{"lineNumber":1176,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-pSyv7bSTC7ig9Dcgbw9AuRNUb5k5V6oDudjZoMBSr13qpLBG7tB+zgCkARjq7xIUgdz5P1Qe8u+rSGdouOOIyQ\u003d\u003d\","},{"lineNumber":1177,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true,"},{"lineNumber":1178,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"requires\": {"},{"lineNumber":1179,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"ansi-styles\": \"^4.0.0\","},{"lineNumber":1180,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"astral-regex\": \"^2.0.0\","},{"lineNumber":1181,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"is-fullwidth-code-point\": \"^3.0.0\""},{"lineNumber":1182,"author":{"gitId":"yhtMinceraft1010X"},"content":"      }"},{"lineNumber":1183,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1184,"author":{"gitId":"-"},"content":"    \"sshpk\": {"},{"lineNumber":1185,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"1.17.0\","},{"lineNumber":1186,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/sshpk/-/sshpk-1.17.0.tgz\","},{"lineNumber":1187,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-/9HIEs1ZXGhSPE8X6Ccm7Nam1z8KcoCqPdI7ecm1N33EzAetWahvQWVqLZtaZQ+IDKX4IyA2o0gBzqIMkAagHQ\u003d\u003d\","},{"lineNumber":1188,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1189,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1190,"author":{"gitId":"-"},"content":"        \"asn1\": \"~0.2.3\","},{"lineNumber":1191,"author":{"gitId":"-"},"content":"        \"assert-plus\": \"^1.0.0\","},{"lineNumber":1192,"author":{"gitId":"-"},"content":"        \"bcrypt-pbkdf\": \"^1.0.0\","},{"lineNumber":1193,"author":{"gitId":"-"},"content":"        \"dashdash\": \"^1.12.0\","},{"lineNumber":1194,"author":{"gitId":"-"},"content":"        \"ecc-jsbn\": \"~0.1.1\","},{"lineNumber":1195,"author":{"gitId":"-"},"content":"        \"getpass\": \"^0.1.1\","},{"lineNumber":1196,"author":{"gitId":"-"},"content":"        \"jsbn\": \"~0.1.0\","},{"lineNumber":1197,"author":{"gitId":"-"},"content":"        \"safer-buffer\": \"^2.0.2\","},{"lineNumber":1198,"author":{"gitId":"-"},"content":"        \"tweetnacl\": \"~0.14.0\""},{"lineNumber":1199,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1200,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1201,"author":{"gitId":"-"},"content":"    \"string-width\": {"},{"lineNumber":1202,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.2.3\","},{"lineNumber":1203,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\","},{"lineNumber":1204,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g\u003d\u003d\","},{"lineNumber":1205,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1206,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1207,"author":{"gitId":"-"},"content":"        \"emoji-regex\": \"^8.0.0\","},{"lineNumber":1208,"author":{"gitId":"-"},"content":"        \"is-fullwidth-code-point\": \"^3.0.0\","},{"lineNumber":1209,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"strip-ansi\": \"^6.0.1\""},{"lineNumber":1210,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1211,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1212,"author":{"gitId":"-"},"content":"    \"strip-ansi\": {"},{"lineNumber":1213,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"6.0.1\","},{"lineNumber":1214,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\","},{"lineNumber":1215,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A\u003d\u003d\","},{"lineNumber":1216,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1217,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1218,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"ansi-regex\": \"^5.0.1\""},{"lineNumber":1219,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1220,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"    \"strip-final-newline\": {"},{"lineNumber":1222,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.0\","},{"lineNumber":1223,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz\","},{"lineNumber":1224,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA\u003d\u003d\","},{"lineNumber":1225,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1226,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1227,"author":{"gitId":"-"},"content":"    \"supports-color\": {"},{"lineNumber":1228,"author":{"gitId":"-"},"content":"      \"version\": \"8.1.1\","},{"lineNumber":1229,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz\","},{"lineNumber":1230,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q\u003d\u003d\","},{"lineNumber":1231,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1232,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1233,"author":{"gitId":"-"},"content":"        \"has-flag\": \"^4.0.0\""},{"lineNumber":1234,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1235,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1236,"author":{"gitId":"-"},"content":"    \"throttleit\": {"},{"lineNumber":1237,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.0\","},{"lineNumber":1238,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/throttleit/-/throttleit-1.0.0.tgz\","},{"lineNumber":1239,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-nnhYNtr0Z0MUWlmEtiaNgoUorGw\u003d\","},{"lineNumber":1240,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1241,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1242,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"through\": {"},{"lineNumber":1243,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.3.8\","},{"lineNumber":1244,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/through/-/through-2.3.8.tgz\","},{"lineNumber":1245,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU\u003d\","},{"lineNumber":1246,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true"},{"lineNumber":1247,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":1248,"author":{"gitId":"-"},"content":"    \"tmp\": {"},{"lineNumber":1249,"author":{"gitId":"-"},"content":"      \"version\": \"0.2.1\","},{"lineNumber":1250,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.2.1.tgz\","},{"lineNumber":1251,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-76SUhtfqR2Ijn+xllcI5P1oyannHNHByD80W1q447gU3mp9G9PSpGdWmjUOHRDPiHYacIk66W7ubDTuPF3BEtQ\u003d\u003d\","},{"lineNumber":1252,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1253,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1254,"author":{"gitId":"-"},"content":"        \"rimraf\": \"^3.0.0\""},{"lineNumber":1255,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1256,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1257,"author":{"gitId":"-"},"content":"    \"tough-cookie\": {"},{"lineNumber":1258,"author":{"gitId":"-"},"content":"      \"version\": \"2.5.0\","},{"lineNumber":1259,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz\","},{"lineNumber":1260,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g\u003d\u003d\","},{"lineNumber":1261,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1262,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1263,"author":{"gitId":"-"},"content":"        \"psl\": \"^1.1.28\","},{"lineNumber":1264,"author":{"gitId":"-"},"content":"        \"punycode\": \"^2.1.1\""},{"lineNumber":1265,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1266,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1267,"author":{"gitId":"-"},"content":"    \"tslib\": {"},{"lineNumber":1268,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"2.3.1\","},{"lineNumber":1269,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.3.1.tgz\","},{"lineNumber":1270,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw\u003d\u003d\","},{"lineNumber":1271,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1272,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1273,"author":{"gitId":"-"},"content":"    \"tunnel-agent\": {"},{"lineNumber":1274,"author":{"gitId":"-"},"content":"      \"version\": \"0.6.0\","},{"lineNumber":1275,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz\","},{"lineNumber":1276,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0\u003d\","},{"lineNumber":1277,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1278,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1279,"author":{"gitId":"-"},"content":"        \"safe-buffer\": \"^5.0.1\""},{"lineNumber":1280,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1281,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1282,"author":{"gitId":"-"},"content":"    \"tweetnacl\": {"},{"lineNumber":1283,"author":{"gitId":"-"},"content":"      \"version\": \"0.14.5\","},{"lineNumber":1284,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz\","},{"lineNumber":1285,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q\u003d\","},{"lineNumber":1286,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1287,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1288,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"type-fest\": {"},{"lineNumber":1289,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"0.21.3\","},{"lineNumber":1290,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz\","},{"lineNumber":1291,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w\u003d\u003d\","},{"lineNumber":1292,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1293,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1294,"author":{"gitId":"-"},"content":"    \"universalify\": {"},{"lineNumber":1295,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.0\","},{"lineNumber":1296,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz\","},{"lineNumber":1297,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ\u003d\u003d\","},{"lineNumber":1298,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1299,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1300,"author":{"gitId":"-"},"content":"    \"untildify\": {"},{"lineNumber":1301,"author":{"gitId":"-"},"content":"      \"version\": \"4.0.0\","},{"lineNumber":1302,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/untildify/-/untildify-4.0.0.tgz\","},{"lineNumber":1303,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-KK8xQ1mkzZeg9inewmFVDNkg3l5LUhoq9kN6iWYB/CC9YMG8HA+c1Q8HwDe6dEX7kErrEVNVBO3fWsVq5iDgtw\u003d\u003d\","},{"lineNumber":1304,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1305,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1306,"author":{"gitId":"-"},"content":"    \"uuid\": {"},{"lineNumber":1307,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"8.3.2\","},{"lineNumber":1308,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz\","},{"lineNumber":1309,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg\u003d\u003d\","},{"lineNumber":1310,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1311,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1312,"author":{"gitId":"-"},"content":"    \"verror\": {"},{"lineNumber":1313,"author":{"gitId":"-"},"content":"      \"version\": \"1.10.0\","},{"lineNumber":1314,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/verror/-/verror-1.10.0.tgz\","},{"lineNumber":1315,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA\u003d\","},{"lineNumber":1316,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1317,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1318,"author":{"gitId":"-"},"content":"        \"assert-plus\": \"^1.0.0\","},{"lineNumber":1319,"author":{"gitId":"-"},"content":"        \"core-util-is\": \"1.0.2\","},{"lineNumber":1320,"author":{"gitId":"-"},"content":"        \"extsprintf\": \"^1.2.0\""},{"lineNumber":1321,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1322,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1323,"author":{"gitId":"-"},"content":"    \"which\": {"},{"lineNumber":1324,"author":{"gitId":"-"},"content":"      \"version\": \"2.0.2\","},{"lineNumber":1325,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\","},{"lineNumber":1326,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA\u003d\u003d\","},{"lineNumber":1327,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1328,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1329,"author":{"gitId":"-"},"content":"        \"isexe\": \"^2.0.0\""},{"lineNumber":1330,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1331,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1332,"author":{"gitId":"-"},"content":"    \"wrap-ansi\": {"},{"lineNumber":1333,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"7.0.0\","},{"lineNumber":1334,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\","},{"lineNumber":1335,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q\u003d\u003d\","},{"lineNumber":1336,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1337,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1338,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"ansi-styles\": \"^4.0.0\","},{"lineNumber":1339,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"string-width\": \"^4.1.0\","},{"lineNumber":1340,"author":{"gitId":"yhtMinceraft1010X"},"content":"        \"strip-ansi\": \"^6.0.0\""},{"lineNumber":1341,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1342,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1343,"author":{"gitId":"-"},"content":"    \"wrappy\": {"},{"lineNumber":1344,"author":{"gitId":"-"},"content":"      \"version\": \"1.0.2\","},{"lineNumber":1345,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\","},{"lineNumber":1346,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8\u003d\","},{"lineNumber":1347,"author":{"gitId":"-"},"content":"      \"dev\": true"},{"lineNumber":1348,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":1349,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"yallist\": {"},{"lineNumber":1350,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"version\": \"4.0.0\","},{"lineNumber":1351,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz\","},{"lineNumber":1352,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"integrity\": \"sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A\u003d\u003d\","},{"lineNumber":1353,"author":{"gitId":"yhtMinceraft1010X"},"content":"      \"dev\": true"},{"lineNumber":1354,"author":{"gitId":"yhtMinceraft1010X"},"content":"    },"},{"lineNumber":1355,"author":{"gitId":"-"},"content":"    \"yauzl\": {"},{"lineNumber":1356,"author":{"gitId":"-"},"content":"      \"version\": \"2.10.0\","},{"lineNumber":1357,"author":{"gitId":"-"},"content":"      \"resolved\": \"https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz\","},{"lineNumber":1358,"author":{"gitId":"-"},"content":"      \"integrity\": \"sha1-x+sXyT4RLLEIb6bY5R+wZnt5pfk\u003d\","},{"lineNumber":1359,"author":{"gitId":"-"},"content":"      \"dev\": true,"},{"lineNumber":1360,"author":{"gitId":"-"},"content":"      \"requires\": {"},{"lineNumber":1361,"author":{"gitId":"-"},"content":"        \"buffer-crc32\": \"~0.2.3\","},{"lineNumber":1362,"author":{"gitId":"-"},"content":"        \"fd-slicer\": \"~1.1.0\""},{"lineNumber":1363,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":1364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":1365,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":336,"-":1030}},{"path":"frontend/cypress/package.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"scripts\": {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"tests\": \"cypress run --browser chrome\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"ci\": \"cypress run --env ci\u003dtrue --browser chrome\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"debug\": \"cypress open\""},{"lineNumber":6,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \"devDependencies\": {"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"cypress\": \"^9.5.1\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":9}},{"path":"frontend/cypress/tests/chartView/chartView_percentage.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"describe(\u0027sort by contribution\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  it(\u0027percentage should only be displayed when sort by contribution\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":4,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":5,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↑ contribution\u0027);"},{"lineNumber":8,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":10,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":11,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":12,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ group title\u0027);"},{"lineNumber":14,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":15,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":16,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":17,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":18,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":19,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ contribution\u0027);"},{"lineNumber":20,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":21,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":22,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":24,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":25,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↑ variance\u0027);"},{"lineNumber":26,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":27,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":28,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":30,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":31,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ variance\u0027);"},{"lineNumber":32,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":33,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":34,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  });"},{"lineNumber":36,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":37,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  it(\u0027percentage is NOT shown even after changing other fields\u0027, () \u003d\u003e {"},{"lineNumber":38,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":39,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027None\u0027);"},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":41,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":42,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":43,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":44,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":45,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027Author\u0027);"},{"lineNumber":46,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":47,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":48,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":49,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":50,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":51,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ contribution\u0027);"},{"lineNumber":52,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":53,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":54,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":55,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":56,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":57,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↑ variance\u0027);"},{"lineNumber":58,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":59,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":60,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027not.exist\u0027);"},{"lineNumber":61,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  });"},{"lineNumber":62,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":63,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  it(\u0027percentage is NOT hidden even after changing other fields\u0027, () \u003d\u003e {"},{"lineNumber":64,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-group \u003e select:visible\u0027)"},{"lineNumber":65,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ contribution\u0027);"},{"lineNumber":66,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":67,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":68,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":69,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":70,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":71,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027None\u0027);"},{"lineNumber":72,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":73,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":74,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":75,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":76,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.grouping \u003e select:visible\u0027)"},{"lineNumber":77,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027Author\u0027);"},{"lineNumber":78,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":79,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":80,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":81,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":82,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":83,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↑ contribution\u0027);"},{"lineNumber":84,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":85,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":86,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":87,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":88,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027div.mui-select.sort-within-group \u003e select:visible\u0027)"},{"lineNumber":89,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .select(\u0027↓ title\u0027);"},{"lineNumber":90,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":91,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    cy.get(\u0027#summary .summary-chart__title--percentile\u0027)"},{"lineNumber":92,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .should(\u0027exist\u0027);"},{"lineNumber":93,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  });"},{"lineNumber":94,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"});"}],"authorContributionMap":{"Zhou-Jiahao-1998":94}},{"path":"frontend/cypress/tests/general/general.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"describe(\u0027general\u0027, () \u003d\u003e {"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":"  it(\u0027correctly replaces report title\u0027, () \u003d\u003e {"},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"    cy.title().should(\u0027eq\u0027, \u0027RepoSense Test Report\u0027);"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"  });"},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"});"}],"authorContributionMap":{"gok99":5}},{"path":"frontend/package.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"name\": \"reposense\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"version\": \"1.0.0\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"  \"description\": \"[![Build Status](https://travis-ci.org/reposense/RepoSense.svg?branch\u003dmaster)](https://travis-ci.org/reposense/RepoSense) [![Build status](https://ci.appveyor.com/api/projects/status/gsbkj5qby3pjd6nw/branch/master?svg\u003dtrue)](https://ci.appveyor.com/project/eugenepeh/reposense/branch/master)\","},{"lineNumber":5,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"author\": \"\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \"scripts\": {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"serve\": \"vue-cli-service serve\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"build\": \"vue-cli-service build\","},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"lint\": \"eslint src/**/*.{ts,js,vue} cypress/tests/**/*.js cypress/support.js \u0026\u0026 stylelint ./src/**/*.{vue,scss} \u0026\u0026 npm run puglint\","},{"lineNumber":10,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"devbuild\": \"vue-cli-service build --mode development\","},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"    \"lintfix\": \"eslint --fix src/**/*.{ts,js,vue} cypress/tests/**/*.js cypress/support.js \u0026\u0026 stylelint --fix ./src/**/*.{vue,scss}\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"puglint\": \"pug-lint-vue src\","},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"serveOpen\": \"vue-cli-service serve --open\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":15,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"main\": \"index.js\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \"dependencies\": {"},{"lineNumber":17,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@fontsource/titillium-web\": \"^4.5.3\","},{"lineNumber":18,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@fortawesome/fontawesome-svg-core\": \"^1.3.0\","},{"lineNumber":19,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@fortawesome/free-brands-svg-icons\": \"^6.0.0\","},{"lineNumber":20,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@fortawesome/free-solid-svg-icons\": \"^6.0.0\","},{"lineNumber":21,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@fortawesome/vue-fontawesome\": \"^3.0.0-5\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"core-js\": \"^3.6.5\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"highlight.js\": \"^10.5.0\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"jszip\": \"^3.5.0\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"minimatch\": \"^3.0.4\","},{"lineNumber":26,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"muicss\": \"^0.10.3\","},{"lineNumber":27,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"normalize.css\": \"^8.0.1\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"pug-lint-vue\": \"^0.4.0\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"seedrandom\": \"^3.0.5\","},{"lineNumber":30,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"vue\": \"^3.2.31\","},{"lineNumber":31,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"vue-loading-overlay\": \"^5.0.3\","},{"lineNumber":32,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"vuex\": \"^4.0.2\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \"devDependencies\": {"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@typescript-eslint/eslint-plugin\": \"^4.18.0\","},{"lineNumber":36,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@typescript-eslint/parser\": \"^4.18.0\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"@vue/cli-plugin-babel\": \"~4.5.0\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"@vue/cli-plugin-eslint\": \"~4.5.0\","},{"lineNumber":39,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@vue/cli-plugin-typescript\": \"~4.5.0\","},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@vue/cli-service\": \"~4.5.15\","},{"lineNumber":41,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@vue/compiler-sfc\": \"^3.2.30\","},{"lineNumber":42,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"@vue/eslint-config-typescript\": \"^7.0.0\","},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"babel-eslint\": \"^10.1.0\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"eslint\": \"^6.8.0\","},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \"eslint-config-airbnb-base\": \"^13.0.0\","},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"eslint-plugin-import\": \"^2.13.0\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"eslint-plugin-vue\": \"^7.4.1\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"node-sass\": \"^5.0.0\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"pug\": \"^3.0.2\","},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \"pug-plain-loader\": \"^1.1.0\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"sass\": \"^1.32.4\","},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"sass-loader\": \"^10.1.1\","},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"stylelint\": \"^10.1.0\","},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"stylelint-config-recommended-scss\": \"^4.2.0\","},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \"stylelint-order\": \"^3.0.1\","},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \"stylelint-scss\": \"^3.18.0\","},{"lineNumber":57,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"stylelint-webpack-plugin\": \"^2.1.1\","},{"lineNumber":58,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"typescript\": \"~4.5.5\""},{"lineNumber":59,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  },"},{"lineNumber":60,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"bugs\": {"},{"lineNumber":61,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"url\": \"https://github.com/reposense/RepoSense/issues\""},{"lineNumber":62,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  },"},{"lineNumber":63,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"directories\": {"},{"lineNumber":64,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"doc\": \"docs\""},{"lineNumber":65,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  },"},{"lineNumber":66,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"homepage\": \"https://github.com/reposense/RepoSense#readme\","},{"lineNumber":67,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"license\": \"ISC\","},{"lineNumber":68,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"repository\": {"},{"lineNumber":69,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"type\": \"git\","},{"lineNumber":70,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"url\": \"git+https://github.com/reposense/RepoSense.git\""},{"lineNumber":71,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":2,"Zhou-Jiahao-1998":34,"-":36}},{"path":"frontend/src/store/store.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import { createStore } from \u0027vuex\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"export default createStore({"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  state: {"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    tabAuthorshipInfo: {},"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    tabZoomInfo: {},"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    summaryDates: {},"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mergedGroups: [],"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    fileTypeColors: {},"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    loadingOverlayCount: 0,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    loadingOverlayMessage: \u0027\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    isTabActive: true,"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  mutations: {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    updateTabZoomInfo(state, info) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      state.tabZoomInfo \u003d info;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    updateTabAuthorshipInfo(state, info) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      state.tabAuthorshipInfo \u003d info;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    updateSummaryDates(state, info) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      state.summaryDates \u003d info;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    updateFileTypeColors(state, info) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      state.fileTypeColors \u003d info;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    updateMergedGroup(state, info) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      state.mergedGroups \u003d info;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    incrementLoadingOverlayCount(state, increment) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      state.loadingOverlayCount +\u003d increment;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      if (state.loadingOverlayCount \u003d\u003d\u003d 0) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        state.loadingOverlayMessage \u003d \u0027Loading. Please wait...\u0027;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    updateLoadingOverlayMessage(state, message) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"      state.loadingOverlayMessage \u003d message;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    updateTabState(state, isTabOpen) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"      state.isTabActive \u003d isTabOpen;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      window.addHash(\u0027tabOpen\u0027, isTabOpen);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"      if (!isTabOpen) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        window.removeHash(\u0027tabType\u0027);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"      window.encodeHash();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  actions: {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // Actions are called with dispatch"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    async incrementLoadingOverlayCountForceReload({ commit }, increment) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      commit(\u0027incrementLoadingOverlayCount\u0027, increment);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"      await new Promise(window.requestAnimationFrame);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"      await new Promise(window.requestAnimationFrame);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      // Needed as browsers render lazily by default"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      // https://stackoverflow.com/a/44146560"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    },"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":59,"author":{"gitId":"-"},"content":"});"}],"authorContributionMap":{"Zhou-Jiahao-1998":2,"-":57}},{"path":"frontend/src/utils/api.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"// utility functions //"},{"lineNumber":2,"author":{"gitId":"-"},"content":"window.$ \u003d (id) \u003d\u003e document.getElementById(id);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"window.enquery \u003d (key, val) \u003d\u003e `${key}\u003d${encodeURIComponent(val)}`;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"window.REPOSENSE_REPO_URL \u003d \u0027https://github.com/reposense/RepoSense\u0027;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"window.HOME_PAGE_URL \u003d \u0027https://reposense.org\u0027;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"window.UNSUPPORTED_INDICATOR \u003d \u0027UNSUPPORTED\u0027;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"window.DAY_IN_MS \u003d (1000 * 60 * 60 * 24);"},{"lineNumber":8,"author":{"gitId":"-"},"content":"window.HASH_DELIMITER \u003d \u0027~\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"window.REPOS \u003d {};"},{"lineNumber":10,"author":{"gitId":"-"},"content":"window.hashParams \u003d {};"},{"lineNumber":11,"author":{"gitId":"-"},"content":"window.isMacintosh \u003d navigator.platform.includes(\u0027Mac\u0027);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"window.REPORT_ZIP \u003d null;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"const HASH_ANCHOR \u003d \u0027?\u0027;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"const REPORT_DIR \u003d \u0027.\u0027;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"window.deactivateAllOverlays \u003d function deactivateAllOverlays() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  document.querySelectorAll(\u0027.summary-chart__ramp .overlay\u0027)"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      .forEach((x) \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        x.className \u003d \u0027overlay\u0027;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":22,"author":{"gitId":"-"},"content":"};"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"window.getDateStr \u003d function getDateStr(date) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  return (new Date(date)).toISOString().split(\u0027T\u0027)[0];"},{"lineNumber":26,"author":{"gitId":"-"},"content":"};"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"window.getHexToRGB \u003d function getHexToRGB(color) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"  // to convert color from hex code to rgb format"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  const arr \u003d /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(color);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  return arr.slice(1).map((val) \u003d\u003e parseInt(val, 16));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"};"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"window.getFontColor \u003d function getFontColor(color) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  const result \u003d window.getHexToRGB(color);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  const red \u003d result[0];"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  const green \u003d result[1];"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  const blue \u003d result[2];"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"  const luminosity \u003d 0.2126 * red + 0.7152 * green + 0.0722 * blue; // per ITU-R BT.709"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"  return luminosity \u003c 120 ? \u0027#ffffff\u0027 : \u0027#000000\u0027;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"};"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"window.addHash \u003d function addHash(newKey, newVal) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  window.hashParams[newKey] \u003d newVal;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"};"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"window.removeHash \u003d function removeHash(key) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  delete window.hashParams[key];"},{"lineNumber":51,"author":{"gitId":"-"},"content":"};"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"window.encodeHash \u003d function encodeHash() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  const { hashParams } \u003d window;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"  const hash \u003d Object.keys(hashParams)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      .map((key) \u003d\u003e `${key}\u003d${encodeURIComponent(hashParams[key])}`)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      .join(\u0027\u0026\u0027);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"  const newUrl \u003d `${window.location.protocol}//${window.location.host}${window.location.pathname}${HASH_ANCHOR}${hash}`;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  window.history.replaceState(null, \u0027\u0027, newUrl);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"};"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"window.decodeHash \u003d function decodeHash() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  const hashParams \u003d {};"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"  const hashIndex \u003d window.location.href.indexOf(HASH_ANCHOR);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  const parameterString \u003d hashIndex \u003d\u003d\u003d -1 ? \u0027\u0027 : window.location.href.slice(hashIndex + 1);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"  parameterString.split(\u0027\u0026\u0027)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"      .forEach((param) \u003d\u003e {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        const [key, val] \u003d param.split(\u0027\u003d\u0027);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (key) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          try {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            hashParams[key] \u003d decodeURIComponent(val);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          } catch (error) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            this.userUpdated \u003d false;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            this.isLoading \u003d false;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"          }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  window.hashParams \u003d hashParams;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"};"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"window.comparator \u003d (fn, sortingOption \u003d \u0027\u0027) \u003d\u003e function compare(a, b) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"  let a1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"  let b1;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"  if (sortingOption) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    a1 \u003d fn(a, sortingOption).toLowerCase"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ? fn(a, sortingOption).toLowerCase()"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        : fn(a, sortingOption);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    b1 \u003d fn(b, sortingOption).toLowerCase"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ? fn(b, sortingOption).toLowerCase()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        : fn(b, sortingOption);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    a1 \u003d fn(a).toLowerCase ? fn(a).toLowerCase() : fn(a);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    b1 \u003d fn(b).toLowerCase ? fn(b).toLowerCase() : fn(b);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"  if (a1 \u003d\u003d\u003d b1) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    return 0;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"  } if (a1 \u003c b1) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    return -1;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"  return 1;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"};"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"window.toggleNext \u003d function toggleNext(ele) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  // function for toggling unopened code"},{"lineNumber":109,"author":{"gitId":"-"},"content":"  const targetClass \u003d \u0027active\u0027;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"  const parent \u003d ele.parentNode;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"  const classes \u003d parent.className.split(\u0027 \u0027);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"  const idx \u003d classes.indexOf(targetClass);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"  if (idx \u003d\u003d\u003d -1) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    classes.push(targetClass);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"  } else {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    classes.splice(idx, 1);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"  parent.className \u003d classes.join(\u0027 \u0027);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"};"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"window.filterUnsupported \u003d function filterUnsupported(string) {"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":"  // checks for a pre-defined unsupported tag"},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":"  return string.includes(window.UNSUPPORTED_INDICATOR) ? undefined : string;"},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"};"},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"window.getAuthorLink \u003d function getAuthorLink(repoId, author) {"},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":"  return window.filterUnsupported(window.DOMAIN_URL_MAP[domainName].BASE_URL + author);"},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"};"},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"window.getRepoLinkUnfiltered \u003d function getRepoLink(repoId) {"},{"lineNumber":135,"author":{"gitId":"chan-j-d"},"content":"  // abstraction for repo link construction. Not supposed to be used by other files"},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":"  return window.DOMAIN_URL_MAP[domainName].REPO_URL"},{"lineNumber":138,"author":{"gitId":"chan-j-d"},"content":"      .replace(\u0027$ORGANIZATION\u0027, window.REPOS[repoId].location.organization)"},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":"      .replace(\u0027$REPO_NAME\u0027, window.REPOS[repoId].location.repoName);"},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":"};"},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"window.getRepoLink \u003d function getRepoLink(repoId) {"},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"  return window.filterUnsupported(window.getRepoLinkUnfiltered(repoId));"},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":"};"},{"lineNumber":145,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"window.getBranchLink \u003d function getBranchLink(repoId, branch) {"},{"lineNumber":147,"author":{"gitId":"chan-j-d"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":148,"author":{"gitId":"chan-j-d"},"content":"  return window.filterUnsupported(window.getRepoLinkUnfiltered(repoId) + window.DOMAIN_URL_MAP[domainName].BRANCH"},{"lineNumber":149,"author":{"gitId":"chan-j-d"},"content":"      .replace(\u0027$BRANCH\u0027, branch));"},{"lineNumber":150,"author":{"gitId":"chan-j-d"},"content":"};"},{"lineNumber":151,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":152,"author":{"gitId":"chan-j-d"},"content":"window.getCommitLink \u003d function getCommitLink(repoId, commitHash) {"},{"lineNumber":153,"author":{"gitId":"chan-j-d"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"  return window.filterUnsupported(window.getRepoLinkUnfiltered(repoId) + window.DOMAIN_URL_MAP[domainName].COMMIT_PATH"},{"lineNumber":155,"author":{"gitId":"chan-j-d"},"content":"      .replace(\u0027$COMMIT_HASH\u0027, commitHash));"},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":"};"},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":158,"author":{"gitId":"chan-j-d"},"content":"window.getBlameLink \u003d function getBlameLink(repoId, branch, filepath) {"},{"lineNumber":159,"author":{"gitId":"chan-j-d"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":160,"author":{"gitId":"chan-j-d"},"content":"  return window.filterUnsupported(window.getRepoLinkUnfiltered(repoId) + window.DOMAIN_URL_MAP[domainName].BLAME_PATH"},{"lineNumber":161,"author":{"gitId":"chan-j-d"},"content":"      .replace(\u0027$BRANCH\u0027, branch)"},{"lineNumber":162,"author":{"gitId":"chan-j-d"},"content":"      .replace(\u0027$FILE_PATH\u0027, filepath));"},{"lineNumber":163,"author":{"gitId":"chan-j-d"},"content":"};"},{"lineNumber":164,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":165,"author":{"gitId":"chan-j-d"},"content":"window.getHistoryLink \u003d function getHistoryLink(repoId, branch, filepath) {"},{"lineNumber":166,"author":{"gitId":"chan-j-d"},"content":"  const domainName \u003d window.REPOS[repoId].location.domainName;"},{"lineNumber":167,"author":{"gitId":"chan-j-d"},"content":"  return window.filterUnsupported(window.getRepoLinkUnfiltered(repoId) + window.DOMAIN_URL_MAP[domainName].HISTORY_PATH"},{"lineNumber":168,"author":{"gitId":"chan-j-d"},"content":"      .replace(\u0027$BRANCH\u0027, branch)"},{"lineNumber":169,"author":{"gitId":"chan-j-d"},"content":"      .replace(\u0027$FILE_PATH\u0027, filepath));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"};"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"window.getGroupName \u003d function getGroupName(group, filterGroupSelection) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  switch (filterGroupSelection) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"  case \u0027groupByRepos\u0027:"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    return group[0].repoName;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  case \u0027groupByAuthors\u0027:"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return group[0].name;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  default:"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    return \u0027\u0027;"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"};"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"window.getAuthorDisplayName \u003d function getAuthorDisplayName(authorRepos) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"  return authorRepos.reduce((displayName, user) \u003d\u003e ("},{"lineNumber":185,"author":{"gitId":"-"},"content":"    user.displayName \u003e displayName ? user.displayName : displayName"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  ), authorRepos[0].displayName);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"};"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"window.api \u003d {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  async loadJSON(fname) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    if (window.REPORT_ZIP) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"      const zipObject \u003d window.REPORT_ZIP.file(fname);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"      if (zipObject) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"          return JSON.parse(await zipObject.async(\u0027text\u0027));"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        } catch (e) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"          throw new Error(\u0027Uploaded JSON is invalid.\u0027);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"      } else {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        throw new Error(\u0027Uploaded zip file is invalid.\u0027);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"      const response \u003d await fetch(`${REPORT_DIR}/${fname}`);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"      // Not directly returned in case response is not actually json."},{"lineNumber":206,"author":{"gitId":"-"},"content":"      const json \u003d await response.json();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"      return json;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    } catch (e) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"      throw new Error(`Unable to read ${fname}.`);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  async loadSummary() {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    window.REPOS \u003d {};"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    let data \u003d {};"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"      data \u003d await this.loadJSON(\u0027summary.json\u0027);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    } catch (error) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"      if (error.message \u003d\u003d\u003d \u0027Unable to read summary.json.\u0027) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"      throw error;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    const { reportGeneratedTime, reportGenerationTime } \u003d data;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    window.sinceDate \u003d data.sinceDate;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    window.untilDate \u003d data.untilDate;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    window.repoSenseVersion \u003d data.repoSenseVersion;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    window.isSinceDateProvided \u003d data.isSinceDateProvided;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    window.isUntilDateProvided \u003d data.isUntilDateProvided;"},{"lineNumber":229,"author":{"gitId":"gok99"},"content":"    document.title \u003d data.reportTitle || document.title;"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    const errorMessages \u003d {};"},{"lineNumber":232,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    Object.entries(data.errorSet).forEach(([repoName, message]) \u003d\u003e {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"      errorMessages[repoName] \u003d message;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"chan-j-d"},"content":"    window.DOMAIN_URL_MAP \u003d data.supportedDomainUrlMap;"},{"lineNumber":237,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    const names \u003d [];"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    data.repos.forEach((repo) \u003d\u003e {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"      const repoName \u003d `${repo.displayName}`;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"      window.REPOS[repoName] \u003d repo;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"      names.push(repoName);"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    return {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"      creationDate: reportGeneratedTime,"},{"lineNumber":246,"author":{"gitId":"-"},"content":"      reportGenerationTime,"},{"lineNumber":247,"author":{"gitId":"-"},"content":"      errorMessages,"},{"lineNumber":248,"author":{"gitId":"-"},"content":"      names,"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"  async loadCommits(repoName) {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    const folderName \u003d window.REPOS[repoName].outputFolderName;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    const commits \u003d await this.loadJSON(`${folderName}/commits.json`);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    const res \u003d [];"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    const repo \u003d window.REPOS[repoName];"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"    Object.keys(commits.authorDisplayNameMap).forEach((author) \u003d\u003e {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"      if (author) {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        const obj \u003d {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"          name: author,"},{"lineNumber":262,"author":{"gitId":"-"},"content":"          repoId: repoName,"},{"lineNumber":263,"author":{"gitId":"-"},"content":"          variance: commits.authorContributionVariance[author],"},{"lineNumber":264,"author":{"gitId":"-"},"content":"          displayName: commits.authorDisplayNameMap[author],"},{"lineNumber":265,"author":{"gitId":"-"},"content":"          dailyCommits: commits.authorDailyContributionsMap[author],"},{"lineNumber":266,"author":{"gitId":"-"},"content":"          fileTypeContribution: commits.authorFileTypeContributionMap[author],"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"yhtMinceraft1010X"},"content":"        this.setContributionOfCommitResultsAndInsertRepoId(obj.dailyCommits, obj.repoId);"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"        const searchParams \u003d ["},{"lineNumber":272,"author":{"gitId":"-"},"content":"            repo.displayName,"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            obj.displayName, author,"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        ];"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        obj.searchPath \u003d searchParams.join(\u0027_\u0027).toLowerCase();"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        obj.repoName \u003d `${repo.displayName}`;"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        obj.location \u003d `${repo.location.location}`;"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"        res.push(obj);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"      }"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"    repo.commits \u003d commits;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    repo.users \u003d res;"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"    return res;"},{"lineNumber":288,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"  loadAuthorship(repoName) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    const folderName \u003d window.REPOS[repoName].outputFolderName;"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    return this.loadJSON(`${folderName}/authorship.json`)"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        .then((files) \u003d\u003e {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"          window.REPOS[repoName].files \u003d files;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"          return files;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":297,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"yhtMinceraft1010X"},"content":"  // calculate and set the contribution of each commitResult and insert repoId into commitResult,"},{"lineNumber":300,"author":{"gitId":"yhtMinceraft1010X"},"content":"  // since not provided in json file"},{"lineNumber":301,"author":{"gitId":"yhtMinceraft1010X"},"content":"  setContributionOfCommitResultsAndInsertRepoId(dailyCommits, repoId) {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    dailyCommits.forEach((commit) \u003d\u003e {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"      commit.commitResults.forEach((result) \u003d\u003e {"},{"lineNumber":304,"author":{"gitId":"yhtMinceraft1010X"},"content":"        result.repoId \u003d repoId;"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        result.insertions \u003d Object.values(result.fileTypesAndContributionMap)"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            .reduce((acc, fileType) \u003d\u003e acc + fileType.insertions, 0);"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        result.deletions \u003d Object.values(result.fileTypesAndContributionMap)"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            .reduce((acc, fileType) \u003d\u003e acc + fileType.deletions, 0);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      });"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":311,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":312,"author":{"gitId":"-"},"content":"};"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"export default \u0027test\u0027;"}],"authorContributionMap":{"chan-j-d":50,"yhtMinceraft1010X":5,"Zhou-Jiahao-1998":1,"gok99":1,"-":258}},{"path":"frontend/src/utils/load-font-awesome-icons.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"import { library } from \u0027@fortawesome/fontawesome-svg-core\u0027;"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  faCaretDown, faCaretRight, faChevronCircleDown, faChevronCircleUp,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  faChevronDown, faChevronUp, faCircle, faCode,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"  faEllipsisH, faExclamation, faHistory, faListUl,"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  faPlusCircle, faSpinner, faTags, faUser, faUserEdit,"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"  faDatabase,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"} from \u0027@fortawesome/free-solid-svg-icons\u0027;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  faGithub, faGitlab, faBitbucket,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"} from \u0027@fortawesome/free-brands-svg-icons\u0027;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"// app"},{"lineNumber":15,"author":{"gitId":"-"},"content":"library.add(faExclamation, faSpinner, faCode, faListUl);"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"// v-resizer"},{"lineNumber":18,"author":{"gitId":"-"},"content":"library.add(faCaretRight);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"// v-summary"},{"lineNumber":21,"author":{"gitId":"-"},"content":"library.add(faExclamation);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"// v-summary-charts"},{"lineNumber":24,"author":{"gitId":"-"},"content":"library.add(faChevronUp, faChevronDown, faDatabase, faUser, faCode, faListUl, faCircle, faGithub, faGitlab,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    faBitbucket);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"// v-zoom"},{"lineNumber":28,"author":{"gitId":"-"},"content":"library.add(faTags, faEllipsisH);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"// v-authorship"},{"lineNumber":31,"author":{"gitId":"-"},"content":"library.add(faCaretDown, faCaretRight, faHistory, faUserEdit);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"// v-segment"},{"lineNumber":34,"author":{"gitId":"-"},"content":"library.add(faPlusCircle, faChevronCircleUp, faChevronCircleDown);"}],"authorContributionMap":{"chan-j-d":1,"-":33}},{"path":"frontend/tsconfig.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"{"},{"lineNumber":2,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"compilerOptions\": {"},{"lineNumber":3,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"target\": \"esnext\","},{"lineNumber":4,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"module\": \"esnext\","},{"lineNumber":5,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"strict\": true,"},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"jsx\": \"preserve\","},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"moduleResolution\": \"node\","},{"lineNumber":8,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"allowJs\": true,"},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"skipLibCheck\": true,"},{"lineNumber":10,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"esModuleInterop\": true,"},{"lineNumber":11,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"allowSyntheticDefaultImports\": true,"},{"lineNumber":12,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"forceConsistentCasingInFileNames\": true,"},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"useDefineForClassFields\": true,"},{"lineNumber":14,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"sourceMap\": true,"},{"lineNumber":15,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"baseUrl\": \".\","},{"lineNumber":16,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"types\": ["},{"lineNumber":17,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"webpack-env\""},{"lineNumber":18,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    ],"},{"lineNumber":19,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"paths\": {"},{"lineNumber":20,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"@/*\": ["},{"lineNumber":21,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        \"src/*\""},{"lineNumber":22,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      ]"},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    },"},{"lineNumber":24,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"lib\": ["},{"lineNumber":25,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"esnext\","},{"lineNumber":26,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"dom\","},{"lineNumber":27,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"dom.iterable\","},{"lineNumber":28,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      \"scripthost\""},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    ]"},{"lineNumber":30,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  },"},{"lineNumber":31,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"include\": ["},{"lineNumber":32,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"src/**/*.ts\","},{"lineNumber":33,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"src/**/*.tsx\","},{"lineNumber":34,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"src/**/*.vue\","},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"tests/**/*.ts\","},{"lineNumber":36,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"tests/**/*.tsx\""},{"lineNumber":37,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  ],"},{"lineNumber":38,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  \"exclude\": ["},{"lineNumber":39,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    \"node_modules\""},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"  ]"},{"lineNumber":41,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":41}},{"path":"frontend/vue.config.js","fileType":"js","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"const StyleLintPlugin \u003d require(\u0027stylelint-webpack-plugin\u0027);"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"module.exports \u003d {"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"  pages: {"},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"    index: {"},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"      entry: \u0027src/main.ts\u0027,"},{"lineNumber":7,"author":{"gitId":"gok99"},"content":"      title: \u0027RepoSense Report\u0027,"},{"lineNumber":8,"author":{"gitId":"gok99"},"content":"    },"},{"lineNumber":9,"author":{"gitId":"gok99"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  publicPath: \u0027./\u0027,"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  outputDir: \u0027build/\u0027,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  configureWebpack: {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    plugins: ["},{"lineNumber":14,"author":{"gitId":"-"},"content":"        new StyleLintPlugin({"},{"lineNumber":15,"author":{"gitId":"-"},"content":"          files: [\u0027src/**/*.{vue,scss}\u0027],"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        }),"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ],"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  chainWebpack: (config) \u003d\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Pug Loader"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    config.module"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        .rule(\u0027pug\u0027)"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        .test(/\\.pug$/)"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        .use(\u0027pug-plain-loader\u0027)"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        .loader(\u0027pug-plain-loader\u0027)"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        .end();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    config.plugin(\u0027copy\u0027).tap((options) \u003d\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      options[0][0].ignore.push(\u0027*.json\u0027);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      return options;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    });"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    config.module"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        .rule(\u0027vue\u0027)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        .use(\u0027vue-loader\u0027)"},{"lineNumber":34,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        .tap((options) \u003d\u003e ({"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"          ...options,"},{"lineNumber":36,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"          compilerOptions: {"},{"lineNumber":37,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            whitespace: \u0027preserve\u0027,"},{"lineNumber":38,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"          },"},{"lineNumber":39,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":41,"author":{"gitId":"-"},"content":"};"}],"authorContributionMap":{"Zhou-Jiahao-1998":7,"gok99":5,"-":29}},{"path":"src/main/java/reposense/RepoSense.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"import java.util.logging.LogManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.git.GitVersion;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.LocationsCliArguments;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.ViewCliArguments;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.parser.InvalidCsvException;"},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import reposense.parser.InvalidHeaderException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.parser.InvalidLocationException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.parser.ParseException;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.system.ReportServer;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * The main RepoSense class."},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class RepoSense {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(RepoSense.class);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final int SERVER_PORT_NUMBER \u003d 9000;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E MMM d HH:mm:ss yyyy z\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String VERSION_UNSPECIFIED \u003d \"unspecified\";"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"    private static final String FINDING_PREVIOUS_AUTHORS_INVALID_VERSION_WARNING_MESSAGE \u003d"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"            \"--find-previous-authors/-F requires git version 2.23 and above. Feature will be disabled for this run\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * The entry point of the program."},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Additional flags are provided by the user in {@code args}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            TimeUtil.startTimer();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            CliArguments cliArguments \u003d ArgsParser.parse(args);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs \u003d null;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig \u003d new ReportConfiguration();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"            if (cliArguments instanceof ViewCliArguments) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                ReportServer.startServer(SERVER_PORT_NUMBER, (("},{"lineNumber":63,"author":{"gitId":"-"},"content":"                        ViewCliArguments) cliArguments).getReportDirectoryPath().toAbsolutePath());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            } else if (cliArguments instanceof ConfigCliArguments) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                configs \u003d getRepoConfigurations((ConfigCliArguments) cliArguments);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                reportConfig \u003d ((ConfigCliArguments) cliArguments).getReportConfiguration();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            } else if (cliArguments instanceof LocationsCliArguments) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                configs \u003d getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                throw new AssertionError(\"CliArguments\u0027s subclass type is unhandled.\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"            RepoConfiguration.setFormatsToRepoConfigs(configs, cliArguments.getFormats());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            RepoConfiguration.setDatesToRepoConfigs(configs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            RepoConfiguration.setZoneIdToRepoConfigs(configs, cliArguments.getZoneId());"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(configs,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                    cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":79,"author":{"gitId":"gok99"},"content":"            RepoConfiguration.setFileSizeLimitIgnoredToRepoConfigs(configs,"},{"lineNumber":80,"author":{"gitId":"gok99"},"content":"                    cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsLastModifiedDateIncludedToRepoConfigs(configs,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                    cliArguments.isLastModifiedDateIncluded());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(configs,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                    cliArguments.isShallowCloningPerformed());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(configs,"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"            if (RepoConfiguration.isAnyRepoFindingPreviousAuthors(configs)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    \u0026\u0026 !GitVersion.isGitVersionSufficientForFindingPreviousAuthors()) {"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"                logger.warning(FINDING_PREVIOUS_AUTHORS_INVALID_VERSION_WARNING_MESSAGE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                RepoConfiguration.setToFalseIsFindingPreviousAuthorsPerformedToRepoConfigs(configs);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"            List\u003cPath\u003e reportFoldersAndFiles \u003d ReportGenerator.generateReposReport(configs,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                    cliArguments.getOutputFilePath().toAbsolutePath().toString(),"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    cliArguments.getAssetsFilePath().toAbsolutePath().toString(), reportConfig,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    formatter.format(ZonedDateTime.now(cliArguments.getZoneId())),"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                    cliArguments.getSinceDate(), cliArguments.getUntilDate(),"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                    cliArguments.isSinceDateProvided(), cliArguments.isUntilDateProvided(),"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    cliArguments.getNumCloningThreads(), cliArguments.getNumAnalysisThreads(),"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                    TimeUtil::getElapsedTime, cliArguments.getZoneId());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            FileUtil.zipFoldersAndFiles(reportFoldersAndFiles, cliArguments.getOutputFilePath().toAbsolutePath(),"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                    \".json\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"            logger.info(TimeUtil.getElapsedTimeMessage());"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"            if (cliArguments.isAutomaticallyLaunching()) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                ReportServer.startServer(SERVER_PORT_NUMBER, cliArguments.getOutputFilePath().toAbsolutePath());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (IOException | ParseException | InvalidCsvException | InvalidHeaderException e) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        } catch (HelpScreenException e) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            // help message was printed by the ArgumentParser; it is safe to exit."},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"        LogManager.getLogManager().reset();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Constructs a list of {@link RepoConfiguration} if {@code cliArguments} is a {@link ConfigCliArguments}."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws IOException if user-supplied csv file does not exist or is not readable."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if user-supplied repo-config csv is malformed."},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws InvalidHeaderException if user-supplied csv file has header that cannot be parsed."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(ConfigCliArguments cliArguments)"},{"lineNumber":127,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs;"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            authorConfigs \u003d new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            RepoConfiguration.merge(repoConfigs, authorConfigs);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            AuthorConfiguration.setHasAuthorConfigFile(true);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException fnfe) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            // FileNotFoundException thrown as author-config.csv is not found."},{"lineNumber":138,"author":{"gitId":"-"},"content":"            // Ignore exception as the file is optional."},{"lineNumber":139,"author":{"gitId":"-"},"content":"        } catch (IOException | InvalidCsvException e) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            // for all IO and invalid csv exceptions, log the error and continue"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            groupConfigs \u003d new GroupConfigCsvParser(cliArguments.getGroupConfigFilePath()).parse();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException fnfe) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            // FileNotFoundException thrown as groups-config.csv is not found."},{"lineNumber":149,"author":{"gitId":"-"},"content":"            // Ignore exception as the file is optional."},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } catch (IOException | InvalidCsvException e) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            // for all other IO and invalid csv exceptions, log the error and continue"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return repoConfigs;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Constructs a list of {@link RepoConfiguration} if {@code cliArguments} is a {@link LocationsCliArguments}."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * @throws ParseException if all repo locations are invalid."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(LocationsCliArguments cliArguments)"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throws ParseException {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        for (String locationString : cliArguments.getLocations()) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                configs.add(new RepoConfiguration(new RepoLocation(locationString)));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            } catch (InvalidLocationException ile) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, ile.getMessage(), ile);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (configs.isEmpty()) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            throw new ParseException(\"All repository locations are invalid.\");"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return configs;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public static String getVersion() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        String version \u003d RepoSense.class.getPackage().getImplementationVersion();"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        if (version \u003d\u003d null || version.equals(VERSION_UNSPECIFIED)) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            version \u003d System.getProperty(\"version\");"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return version;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":6,"yhtMinceraft1010X":5,"Zhou-Jiahao-1998":3,"gok99":2,"-":174}},{"path":"src/main/java/reposense/authorship/FileInfoAnalyzer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.authorship.analyzer.AnnotatorAnalyzer;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.git.GitBlame;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.git.GitLog;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Analyzes the target and information given in the {@link FileInfo}."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class FileInfoAnalyzer {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(FileInfoAnalyzer.class);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_NAME_OFFSET \u003d \"author \".length();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_EMAIL_OFFSET \u003d \"author-mail \".length();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_TIME_OFFSET \u003d \"author-time \".length();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_TIMEZONE_OFFSET \u003d \"author-tz \".length();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final int FULL_COMMIT_HASH_LENGTH \u003d 40;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_FILE_MISSING \u003d \"Unable to analyze the file located at \\\"%s\\\" \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"as the file is missing from your system. Skipping this file.\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SHALLOW_CLONING_LAST_MODIFIED_DATE_CONFLICT \u003d \"Repo %s was cloned using \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"shallow cloning. As such, the \\\"last modified date\\\" values may be incorrect.\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Analyzes the lines of the file, given in the {@code fileInfo}, that has changed in the time period provided"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * by {@code config}."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns null if the file is missing from the local system, or none of the"},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@link Author} specified in {@code config} contributed to the file in {@code fileInfo}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static FileResult analyzeTextFile(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String relativePath \u003d fileInfo.getPath();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (Files.notExists(Paths.get(config.getRepoRoot(), relativePath))) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MESSAGE_FILE_MISSING, relativePath));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (FileUtil.isEmptyFile(config.getRepoRoot(), relativePath)) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        aggregateBlameAuthorModifiedAndDateInfo(config, fileInfo);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        fileInfo.setFileType(config.getFileType(fileInfo.getPath()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AnnotatorAnalyzer.aggregateAnnotationAuthorInfo(fileInfo, config.getAuthorConfig());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!config.getAuthorList().isEmpty() \u0026\u0026 fileInfo.isAllAuthorsIgnored(config.getAuthorList())) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return generateTextFileResult(fileInfo);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Analyzes the binary file, given in the {@code fileInfo}, that has changed in the time period provided"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * by {@code config}."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns null if the file is missing from the local system, or none of the"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@link Author} specified in {@code config} contributed to the file in {@code fileInfo}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static FileResult analyzeBinaryFile(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String relativePath \u003d fileInfo.getPath();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (Files.notExists(Paths.get(config.getRepoRoot(), relativePath))) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MESSAGE_FILE_MISSING, relativePath));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        fileInfo.setFileType(config.getFileType(fileInfo.getPath()));"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return generateBinaryFileResult(config, fileInfo);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Generates and returns a {@link FileResult} with the authorship results from {@code fileInfo} consolidated."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static FileResult generateTextFileResult(FileInfo fileInfo) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        HashMap\u003cAuthor, Integer\u003e authorContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        for (LineInfo line : fileInfo.getLines()) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            Author author \u003d line.getAuthor();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            authorContributionMap.put(author, authorContributionMap.getOrDefault(author, 0) + 1);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"gok99"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return FileResult.createTextFileResult("},{"lineNumber":104,"author":{"gitId":"gok99"},"content":"            fileInfo.getPath(), fileInfo.getFileType(), fileInfo.getLines(), authorContributionMap,"},{"lineNumber":105,"author":{"gitId":"gok99"},"content":"            fileInfo.exceedsFileLimit());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Generates and returns a {@link FileResult} with the authorship results from binary {@code fileInfo} consolidated."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Authorship results are indicated in the {@code authorContributionMap} as contributions with zero line counts."},{"lineNumber":111,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns {@code null} if none of the {@link Author} specified in {@code config} contributed to the file in"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * {@code fileInfo}."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private static FileResult generateBinaryFileResult(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"        List\u003cString[]\u003e authorsString \u003d GitLog.getFileAuthors(config, fileInfo.getPath());"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"        if (authorsString.size() \u003d\u003d 0) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Set\u003cAuthor\u003e authors \u003d new HashSet\u003c\u003e();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        HashMap\u003cAuthor, Integer\u003e authorContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"        for (String[] lineDetails : authorsString) {"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"            String authorName \u003d lineDetails[0];"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":"            String authorEmail \u003d lineDetails[1];"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            authors.add(config.getAuthor(authorName, authorEmail));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        for (Author author : authors) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            authorContributionMap.put(author, 0);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return FileResult.createBinaryFileResult(fileInfo.getPath(), fileInfo.getFileType(), authorContributionMap);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Sets the {@link Author} and {@link LocalDateTime} for each line in {@code fileInfo} based on the git blame"},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * analysis of the file."},{"lineNumber":139,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@code config} is used to obtain the root directory for running git blame as well as other parameters used"},{"lineNumber":140,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * in determining which author to assign to each line and whether to set the last modified date for a"},{"lineNumber":141,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@code lineInfo}."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private static void aggregateBlameAuthorModifiedAndDateInfo(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String blameResults;"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (!config.isFindingPreviousAuthorsPerformed()) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            blameResults \u003d getGitBlameResult(config, fileInfo.getPath());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            blameResults \u003d getGitBlameWithPreviousAuthorsResult(config, fileInfo.getPath());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        String[] blameResultLines \u003d blameResults.split(\"\\n\");"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        Path filePath \u003d Paths.get(fileInfo.getPath());"},{"lineNumber":154,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime sinceDate \u003d config.getSinceDate();"},{"lineNumber":155,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime untilDate \u003d config.getUntilDate();"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        for (int lineCount \u003d 0; lineCount \u003c blameResultLines.length; lineCount +\u003d 5) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            String commitHash \u003d blameResultLines[lineCount].substring(0, FULL_COMMIT_HASH_LENGTH);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            String authorName \u003d blameResultLines[lineCount + 1].substring(AUTHOR_NAME_OFFSET);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            String authorEmail \u003d blameResultLines[lineCount + 2]"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                    .substring(AUTHOR_EMAIL_OFFSET).replaceAll(\"\u003c|\u003e\", \"\");"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            Long commitDateInMs \u003d Long.parseLong(blameResultLines[lineCount + 3].substring(AUTHOR_TIME_OFFSET)) * 1000;"},{"lineNumber":163,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime commitDate \u003d LocalDateTime.ofInstant(Instant.ofEpochMilli(commitDateInMs),"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    config.getZoneId());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            Author author \u003d config.getAuthor(authorName, authorEmail);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"            if (!fileInfo.isFileLineTracked(lineCount / 5) || author.isIgnoringFile(filePath)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                    || CommitHash.isInsideCommitList(commitHash, config.getIgnoreCommitList())"},{"lineNumber":169,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    || commitDate.compareTo(sinceDate) \u003c 0 || commitDate.compareTo(untilDate) \u003e 0) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                author \u003d Author.UNKNOWN_AUTHOR;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"            if (config.isLastModifiedDateIncluded()) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                if (config.isShallowCloningPerformed()) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                    logger.warning(String.format("},{"lineNumber":176,"author":{"gitId":"-"},"content":"                            MESSAGE_SHALLOW_CLONING_LAST_MODIFIED_DATE_CONFLICT, config.getRepoName()));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"yhtMinceraft1010X"},"content":"                fileInfo.setLineLastModifiedDate(lineCount / 5, commitDate);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            fileInfo.setLineAuthor(lineCount / 5, author);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the analysis result from running git blame on {@code filePath} with reference to the root directory"},{"lineNumber":187,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * given in {@code config}."},{"lineNumber":188,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    private static String getGitBlameResult(RepoConfiguration config, String filePath) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return GitBlame.blame(config.getRepoRoot(), filePath);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the analysis result from running git blame with finding previous authors enabled on {@code filePath}"},{"lineNumber":195,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * with reference to the root directory given in {@code config}."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    private static String getGitBlameWithPreviousAuthorsResult(RepoConfiguration config, String filePath) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return GitBlame.blameWithPreviousAuthors(config.getRepoRoot(), filePath);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":6,"yhtMinceraft1010X":22,"gok99":3,"-":169}},{"path":"src/main/java/reposense/authorship/FileInfoExtractor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.git.GitDiff;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.git.GitRevList;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Extracts out all the relevant {@code FileInfo} from the repository."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class FileInfoExtractor {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(FileInfoExtractor.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_EXTRACTING_FILE_INFO \u003d \"Extracting relevant file info from %s (%s)...\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FILE_PATH \u003d \"\\\"%s\\\" is an invalid file path for current OS or \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"indicates a possible regex match issue. Skipping this directory.\";"},{"lineNumber":39,"author":{"gitId":"gok99"},"content":"    private static final String MESSAGE_FILE_SIZE_LIMIT_EXCEEDED \u003d \"File \\\"%s\\\" has %dB size. The file size \""},{"lineNumber":40,"author":{"gitId":"gok99"},"content":"            + \"limit is set at %dB. %s\";"},{"lineNumber":41,"author":{"gitId":"gok99"},"content":"    private static final String MESSAGE_FILE_ANALYSIS_SKIPPED \u003d \"Skipping analysis of this file...\";"},{"lineNumber":42,"author":{"gitId":"gok99"},"content":"    private static final String MESSAGE_FILE_EXCLUDED_FROM_REPORT \u003d \"Exact line diffs will be excluded from report...\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String DIFF_FILE_CHUNK_SEPARATOR \u003d \"\\ndiff --git \\\"?\\\u0027?a/.*\\n\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String LINE_CHUNKS_SEPARATOR \u003d \"\\n@@ \";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String LINE_INSERTED_SYMBOL \u003d \"+\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String STARTING_LINE_NUMBER_GROUP_NAME \u003d \"startingLineNumber\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String FILE_CHANGED_GROUP_NAME \u003d \"filePath\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String FILE_DELETED_SYMBOL \u003d \"dev/null\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MATCH_GROUP_FAIL_MESSAGE_FORMAT \u003d \"Failed to match the %s group for:\\n%s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String BINARY_FILE_LINE_DIFF_RESULT \u003d \"-\\t-\\t\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final int LINE_CHANGED_HEADER_INDEX \u003d 0;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final Pattern STARTING_LINE_NUMBER_PATTERN \u003d Pattern.compile("},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \"-(\\\\d)+(,)?(\\\\d)* \\\\+(?\u003cstartingLineNumber\u003e\\\\d+)(,)?(\\\\d)* @@\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final Pattern FILE_CHANGED_PATTERN \u003d Pattern.compile(\"\\n(\\\\+){3} b?/(?\u003cfilePath\u003e.*?)\\t?\\n\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Extracts a list of relevant non-binary files given in {@code config}."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static List\u003cFileInfo\u003e extractTextFileInfos(RepoConfiguration config) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_START_EXTRACTING_FILE_INFO, config.getLocation(), config.getBranch()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // checks out to the latest commit of the date range to ensure the FileInfo generated correspond to the"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // git blame file analyze output"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"            GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), config.getUntilDate(),"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                    config.getZoneId());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (CommitNotFoundException cnfe) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return fileInfos;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"gok99"},"content":"        String lastCommitHash \u003d GitRevList.getCommitHashUntilDate("},{"lineNumber":76,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), config.getBranch(), config.getSinceDate(), config.getZoneId());"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        fileInfos \u003d (lastCommitHash.isEmpty())"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                ? getAllFileInfo(config, false)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                : getEditedFileInfos(config, lastCommitHash);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        fileInfos.sort(Comparator.comparing(FileInfo::getPath));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Extracts a list of relevant binary files given in {@code config}."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static List\u003cFileInfo\u003e extractBinaryFileInfos(RepoConfiguration config) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e binaryFileInfos \u003d getAllFileInfo(config, true);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        binaryFileInfos.sort(Comparator.comparing(FileInfo::getPath));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return binaryFileInfos;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a list of {@link FileInfo}s for all files in the repo with lines marked indicating if they were edited"},{"lineNumber":97,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * in between the current commit and the commit given by {@code lastCommitHash}."},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The repo is given by {@code config}."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static List\u003cFileInfo\u003e getEditedFileInfos(RepoConfiguration config, String lastCommitHash) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String fullDiffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), lastCommitHash);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // no diff between the 2 commits, return an empty list"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (fullDiffResult.isEmpty()) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return fileInfos;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String[] fileDiffResultList \u003d fullDiffResult.split(DIFF_FILE_CHUNK_SEPARATOR);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Set\u003cPath\u003e textFilesSet \u003d getFiles(config, false);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        for (String fileDiffResult : fileDiffResultList) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            Matcher filePathMatcher \u003d FILE_CHANGED_PATTERN.matcher(fileDiffResult);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"            // diff result does not have the markers to indicate that file has any line changes, skip it"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            if (!filePathMatcher.find()) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"            String filePath \u003d filePathMatcher.group(FILE_CHANGED_GROUP_NAME);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"            // file is deleted, skip it as well"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            if (filePath.equals(FILE_DELETED_SYMBOL)) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"            if (!isValidTextFile(filePath, textFilesSet)) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"            if (config.getFileTypeManager().isInsideWhitelistedFormats(filePath)) {"},{"lineNumber":131,"author":{"gitId":"gok99"},"content":"                FileInfo currentFileInfo \u003d generateFileInfo(config, filePath);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                setLinesToTrack(currentFileInfo, fileDiffResult);"},{"lineNumber":133,"author":{"gitId":"gok99"},"content":"                if (currentFileInfo.isFileAnalyzed()) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                    fileInfos.add(currentFileInfo);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link Set} of non-binary files for the repo {@code repoConfig}"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * if {@code isBinaryFiles} is set to `false`."},{"lineNumber":145,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Otherwise, returns a {@link Set} of binary files for the repo {@code repoConfig}."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static Set\u003cPath\u003e getFiles(RepoConfiguration repoConfig, boolean isBinaryFile) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        List\u003cString\u003e modifiedFileList \u003d GitDiff.getModifiedFilesList(Paths.get(repoConfig.getRepoRoot()));"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // Gets rid of files with invalid directory name and filters by the {@code isBinaryFile} flag"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return modifiedFileList.stream()"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                .filter(file -\u003e isBinaryFile \u003d\u003d file.startsWith(BINARY_FILE_LINE_DIFF_RESULT))"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .map(file -\u003e file.split(\"\\t\")[2])"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"                .filter(FileUtil::isValidPathWithLogging)"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .map(filteredFile -\u003e Paths.get(filteredFile))"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                .collect(Collectors.toCollection(HashSet::new));"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Analyzes the {@code fileDiffResult} and marks each {@link LineInfo} in {@code fileInfo} on whether they were"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * inserted in between the commit range."},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    private static void setLinesToTrack(FileInfo fileInfo, String fileDiffResult) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        String[] linesChangedChunk \u003d fileDiffResult.split(LINE_CHUNKS_SEPARATOR);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        List\u003cLineInfo\u003e lineInfos \u003d fileInfo.getLines();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        int fileLinePointer \u003d 0;"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // skips the header, index starts from 1"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        for (int sectionIndex \u003d 1; sectionIndex \u003c linesChangedChunk.length; sectionIndex++) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            String linesChangedInSection \u003d linesChangedChunk[sectionIndex];"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            String[] linesChanged \u003d linesChangedInSection.split(\"\\n\");"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            int startingLineNumber \u003d getStartingLineNumber(linesChanged[LINE_CHANGED_HEADER_INDEX]);"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"            // mark all untouched lines between sections as untracked"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            while (fileLinePointer \u003c startingLineNumber - 1) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                lineInfos.get(fileLinePointer++).setTracked(false);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"            // skips the header, index starts from 1"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            for (int lineIndex \u003d 1; lineIndex \u003c linesChanged.length; lineIndex++) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                String lineChanged \u003d linesChanged[lineIndex];"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                // set line added to be tracked"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                if (lineChanged.startsWith(LINE_INSERTED_SYMBOL)) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                    lineInfos.get(fileLinePointer++).setTracked(true);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        // set all remaining lines in file that were untouched to be untracked"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        while (fileLinePointer \u003c lineInfos.size()) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            lineInfos.get(fileLinePointer++).setTracked(false);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Traverses each file from the repo root directory, generates the {@link FileInfo} for each relevant file found"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * based on {@code config} and inserts it into {@code fileInfos}."},{"lineNumber":198,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds binary files to {@link List} if {@code isBinaryFiles} is true. Otherwise, adds non-binary files"},{"lineNumber":199,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * to {@link List}."},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private static List\u003cFileInfo\u003e getAllFileInfo(RepoConfiguration config, boolean isBinaryFiles) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Set\u003cPath\u003e files \u003d getFiles(config, isBinaryFiles);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        for (Path relativePath : files) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            if (!config.getFileTypeManager().isInsideWhitelistedFormats(relativePath.toString())) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":208,"author":{"gitId":"gok99"},"content":""},{"lineNumber":209,"author":{"gitId":"gok99"},"content":"            FileInfo fileInfo \u003d (isBinaryFiles)"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                    ? new FileInfo(relativePath.toString())"},{"lineNumber":211,"author":{"gitId":"gok99"},"content":"                    : generateFileInfo(config, relativePath.toString());"},{"lineNumber":212,"author":{"gitId":"gok99"},"content":""},{"lineNumber":213,"author":{"gitId":"gok99"},"content":"            if (fileInfo.isFileAnalyzed()) {"},{"lineNumber":214,"author":{"gitId":"gok99"},"content":"                fileInfos.add(fileInfo);"},{"lineNumber":215,"author":{"gitId":"gok99"},"content":"            }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link FileInfo} with a list of {@link LineInfo} for each line content in the"},{"lineNumber":222,"author":{"gitId":"gok99"},"content":"     * file located in the repository given by {@code config}/{@code relativePath}."},{"lineNumber":223,"author":{"gitId":"gok99"},"content":"     */"},{"lineNumber":224,"author":{"gitId":"gok99"},"content":"    public static FileInfo generateFileInfo(RepoConfiguration config, String relativePath) {"},{"lineNumber":225,"author":{"gitId":"gok99"},"content":"        return generateFileInfo(config.getRepoRoot(), relativePath, config.getFileSizeLimit(),"},{"lineNumber":226,"author":{"gitId":"gok99"},"content":"            config.isFileSizeLimitIgnored(), config.isIgnoredFileAnalysisSkipped());"},{"lineNumber":227,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"gok99"},"content":""},{"lineNumber":229,"author":{"gitId":"gok99"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"gok99"},"content":"     * Returns a {@link FileInfo} with a list of {@link LineInfo} for each line content in the"},{"lineNumber":231,"author":{"gitId":"gok99"},"content":"     * file located at the {@link Path} given by {@code repoRoot}/{@code relativePath}. {@code fileSizeLimit} and"},{"lineNumber":232,"author":{"gitId":"gok99"},"content":"     * {@code ignoreFileSizeLimit} are used to set whether the file size limit is exceeding. {@link LineInfo}s are"},{"lineNumber":233,"author":{"gitId":"gok99"},"content":"     * not included in {@link FileInfo} if  {@code skipIgnoredFileAnalysis} is true and file size limit is exceeding."},{"lineNumber":234,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitId":"gok99"},"content":"    public static FileInfo generateFileInfo(String repoRoot, String relativePath, long fileSizeLimit,"},{"lineNumber":236,"author":{"gitId":"gok99"},"content":"            boolean ignoreFileSizeLimit, boolean skipIgnoredFileAnalysis) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        FileInfo fileInfo \u003d new FileInfo(relativePath);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(repoRoot, fileInfo.getPath());"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(path.toFile()))) {"},{"lineNumber":241,"author":{"gitId":"gok99"},"content":"            long fileSize \u003d Files.size(path);"},{"lineNumber":242,"author":{"gitId":"gok99"},"content":"            fileInfo.setFileSize(fileSize);"},{"lineNumber":243,"author":{"gitId":"gok99"},"content":"            if (!ignoreFileSizeLimit \u0026\u0026 fileSize \u003e fileSizeLimit) {"},{"lineNumber":244,"author":{"gitId":"gok99"},"content":"                fileInfo.setExceedsSizeLimit(true);"},{"lineNumber":245,"author":{"gitId":"gok99"},"content":"                if (skipIgnoredFileAnalysis) {"},{"lineNumber":246,"author":{"gitId":"gok99"},"content":"                    logger.log(Level.WARNING, String.format(MESSAGE_FILE_SIZE_LIMIT_EXCEEDED,"},{"lineNumber":247,"author":{"gitId":"gok99"},"content":"                            fileInfo.getPath(), fileSize, fileSizeLimit, MESSAGE_FILE_ANALYSIS_SKIPPED));"},{"lineNumber":248,"author":{"gitId":"gok99"},"content":"                    fileInfo.setFileAnalyzed(false);"},{"lineNumber":249,"author":{"gitId":"gok99"},"content":"                    return fileInfo;"},{"lineNumber":250,"author":{"gitId":"gok99"},"content":"                }"},{"lineNumber":251,"author":{"gitId":"gok99"},"content":"                logger.log(Level.WARNING, String.format(MESSAGE_FILE_SIZE_LIMIT_EXCEEDED,"},{"lineNumber":252,"author":{"gitId":"gok99"},"content":"                        fileInfo.getPath(), fileSize, fileSizeLimit, MESSAGE_FILE_EXCLUDED_FROM_REPORT));"},{"lineNumber":253,"author":{"gitId":"gok99"},"content":"            }"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            String line;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            int lineNum \u003d 1;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                fileInfo.addLine(new LineInfo(lineNum++, line));"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            logger.log(Level.SEVERE, ioe.getMessage(), ioe);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        return fileInfo;"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitId":"-"},"content":"     * Returns the starting line changed number, within the file diff result, by matching the pattern inside"},{"lineNumber":267,"author":{"gitId":"-"},"content":"     * {@code linesChanged}."},{"lineNumber":268,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":269,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws AssertionError if matching line number pattern in chunk header fails."},{"lineNumber":270,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static int getStartingLineNumber(String linesChanged) throws AssertionError {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        Matcher chunkHeaderMatcher \u003d STARTING_LINE_NUMBER_PATTERN.matcher(linesChanged);"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"        if (!chunkHeaderMatcher.find()) {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MATCH_GROUP_FAIL_MESSAGE_FORMAT, \"line changed\", linesChanged));"},{"lineNumber":276,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Should not have error matching line number pattern inside chunk header!\");"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"        return Integer.parseInt(chunkHeaderMatcher.group(STARTING_LINE_NUMBER_GROUP_NAME));"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns true if {@code filePath} is valid and the file is not in binary (i.e. part of {@code textFilesSet})."},{"lineNumber":284,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    private static boolean isValidTextFile(String filePath, Set\u003cPath\u003e textFilesSet) {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        boolean isValidFilePath;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":288,"author":{"gitId":"chan-j-d"},"content":"            isValidFilePath \u003d FileUtil.isValidPathWithLogging(filePath);"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_INVALID_FILE_PATH, filePath));"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            isValidFilePath \u003d false;"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"        return isValidFilePath \u0026\u0026 textFilesSet.contains(Paths.get(filePath));"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":2,"yhtMinceraft1010X":15,"gok99":42,"-":237}},{"path":"src/main/java/reposense/authorship/FileResultAggregator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import reposense.authorship.model.AuthorshipSummary;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Aggregates the file analysis results to get the contribution and issue summary for all authors."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FileResultAggregator {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@link AuthorshipSummary} generated from aggregating the {@code fileResults} and {@code fileTypes}"},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * for each {@link Author} in the list of {@code authors}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static AuthorshipSummary aggregateFileResult(List\u003cFileResult\u003e fileResults, List\u003cAuthor\u003e authors,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            List\u003cFileType\u003e fileTypes) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AuthorshipSummary authorContributionSummary \u003d new AuthorshipSummary(fileResults, authors, fileTypes);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        for (FileResult fileResult : fileResults) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            if (fileResult.isBinary()) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            for (LineInfo lineInfo : fileResult.getLines()) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                Author author \u003d lineInfo.getAuthor();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                if (!authors.contains(author)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                authorContributionSummary.addAuthorContributionCount(author, fileResult.getFileType());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"gok99"},"content":"            if (fileResult.isIgnored()) {"},{"lineNumber":35,"author":{"gitId":"gok99"},"content":"                fileResult.clearLines();"},{"lineNumber":36,"author":{"gitId":"gok99"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return authorContributionSummary;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":2,"gok99":3,"-":35}},{"path":"src/main/java/reposense/authorship/analyzer/AnnotatorAnalyzer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship.analyzer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Analyzes the authorship of a {@code FileInfo} using the given annotations on the file."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Only the lines with the format (START OF LINE) COMMENT_SYMBOL @@author ONE_STRING_WITH_NO_SPACE (END OF LINE)"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * will be analyzed. Otherwise, the line will be ignored and treated as normal lines."},{"lineNumber":19,"author":{"gitId":"-"},"content":" * If the line is analyzed, and the string following the author tag is a valid git id, and there is no author config"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * file, then the code will be attributed to the author with that git id. Otherwise, the code will be attributed to"},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":" * unknown author."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AnnotatorAnalyzer {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String AUTHOR_TAG \u003d \"@@author\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // GitHub username format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String REGEX_AUTHOR_NAME_FORMAT \u003d \"^[a-zA-Z0-9](?:[a-zA-Z0-9]|-(?\u003d[a-zA-Z0-9])){0,38}$\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Pattern PATTERN_AUTHOR_NAME_FORMAT \u003d Pattern.compile(REGEX_AUTHOR_NAME_FORMAT);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String REGEX_AUTHOR_TAG_FORMAT \u003d \"@@author(\\\\s+[^\\\\s]+)?\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String[][] COMMENT_FORMATS \u003d {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            {\"//\", \"\\\\s\"},"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            {\"/\\\\*\", \"\\\\*/\"},"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            {\"#\", \"\\\\s\"},"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            {\"\u003c!--\", \"--\u003e\"},"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            {\"%\", \"\\\\s\"},"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Pattern[] COMMENT_PATTERNS \u003d {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[0][0], COMMENT_FORMATS[0][1])),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[1][0], COMMENT_FORMATS[1][1])),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[2][0], COMMENT_FORMATS[2][1])),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[3][0], COMMENT_FORMATS[3][1])),"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            Pattern.compile(generateCommentRegex(COMMENT_FORMATS[4][0], COMMENT_FORMATS[4][1]))"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Overrides the authorship information in {@code fileInfo} based on annotations given on the file."},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"     * @param fileInfo FileInfo to be further analyzed with author annotations."},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"     * @param authorConfig AuthorConfiguration for current analysis."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static void aggregateAnnotationAuthorInfo(FileInfo fileInfo, AuthorConfiguration authorConfig) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Optional\u003cAuthor\u003e currentAnnotatedAuthor \u003d Optional.empty();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Path filePath \u003d Paths.get(fileInfo.getPath());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        for (LineInfo lineInfo : fileInfo.getLines()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            String lineContent \u003d lineInfo.getContent();"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"            if (lineContent.contains(AUTHOR_TAG) \u0026\u0026 isValidCommentLine(lineContent)) {"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"                Optional\u003cAuthor\u003e newAnnotatedAuthor \u003d findAuthorInLine(lineContent, authorConfig);"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"                boolean isEndOfAnnotatedSegment \u003d currentAnnotatedAuthor.isPresent() \u0026\u0026 !newAnnotatedAuthor.isPresent();"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"                boolean isUnknownAuthorSegment \u003d !currentAnnotatedAuthor.isPresent() \u0026\u0026 !newAnnotatedAuthor.isPresent();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"                if (isEndOfAnnotatedSegment) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                    lineInfo.setAuthor(currentAnnotatedAuthor.get());"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"                    currentAnnotatedAuthor \u003d Optional.empty();"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"                } else if (isUnknownAuthorSegment) {"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"                    currentAnnotatedAuthor \u003d Optional.of(Author.UNKNOWN_AUTHOR);"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"                } else {"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"                    currentAnnotatedAuthor \u003d newAnnotatedAuthor.filter(author -\u003e !author.isIgnoringFile(filePath));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            currentAnnotatedAuthor.ifPresent(lineInfo::setAuthor);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"     * Returns an optional {@code Author} corresponding to the @@author tag in {@code line}."},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"     * It looks for the corresponding {@code Author} object in the {@code authorAliasMap} inside"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"     * {@code authorConfig} and returns it. If an author config file is specified and the"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"     * author name found is not in it, then it returns {@code Author#UNKNOWN_AUTHOR} instead."},{"lineNumber":80,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"     * @param line Line to be analyzed."},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"     * @param authorConfig AuthorConfiguration for the analysis of this repo."},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"     * @return Optional {@code Author} found in the line."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"    private static Optional\u003cAuthor\u003e findAuthorInLine(String line, AuthorConfiguration authorConfig) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Map\u003cString, Author\u003e authorAliasMap \u003d authorConfig.getAuthorDetailsToAuthorMap();"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"        Optional\u003cString\u003e optionalName \u003d extractAuthorName(line);"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"        optionalName.filter(name -\u003e !authorAliasMap.containsKey(name) \u0026\u0026 !AuthorConfiguration.hasAuthorConfigFile())"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"                .ifPresent(name -\u003e authorConfig.addAuthor(new Author(name)));"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"        return optionalName.map(name -\u003e authorAliasMap.getOrDefault(name, Author.UNKNOWN_AUTHOR));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Extracts the {@link Author} name that follows the specific format from {@code line} at {@code formatIndex}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"     * @param line Line to extract the author\u0027s name from."},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"     * @return An optional string containing the author\u0027s name."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"    public static Optional\u003cString\u003e extractAuthorName(String line) {"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"        return Optional.of(line)"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"                // gets component after AUTHOR_TAG"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"                .map(l -\u003e l.split(AUTHOR_TAG))"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"                .filter(array -\u003e array.length \u003e\u003d 2)"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"                // separates by end-comment format to obtain the author\u0027s name at the zeroth index"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"                .map(array -\u003e array[1].trim().split(COMMENT_FORMATS[getCommentTypeIndex(line)][1]))"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"                .filter(array -\u003e array.length \u003e 0)"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"                .map(array -\u003e array[0].trim())"},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"                // checks if the author name is valid"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"                .filter(trimmedParameters -\u003e PATTERN_AUTHOR_NAME_FORMAT.matcher(trimmedParameters).find());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Generates regex for valid comment formats in which author tag is found, with {@code REGEX_AUTHOR_TAG_FORMAT}"},{"lineNumber":115,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * flanked by {@code commentStart} and {@code commentEnd}."},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private static String generateCommentRegex(String commentStart, String commentEnd) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return \"^[\\\\s]*\" + commentStart + \"[\\\\s]*\" + REGEX_AUTHOR_TAG_FORMAT + \"[\\\\s]*(\" + commentEnd + \")?[\\\\s]*$\";"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"     * Returns the index in {@code COMMENT_FORMATS} representing the type of comment the @@author tag line is."},{"lineNumber":123,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @param line The line to be checked"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":"     * @return The index of the comment syntax type if the comment pattern matches, -1 if no match could be found"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"    public static int getCommentTypeIndex(String line) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c COMMENT_PATTERNS.length; i++) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            Pattern commentPattern \u003d COMMENT_PATTERNS[i];"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            Matcher matcher \u003d commentPattern.matcher(line);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            if (matcher.find()) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                return i;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return -1;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":138,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":"     * Returns true if line is one of the supported comment types."},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":"     * @param line Line to be checked."},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"     * @return True if line is a valid comment line."},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":"    private static boolean isValidCommentLine(String line) {"},{"lineNumber":145,"author":{"gitId":"chan-j-d"},"content":"        return getCommentTypeIndex(line) \u003e\u003d 0;"},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":52,"yhtMinceraft1010X":8,"-":87}},{"path":"src/main/java/reposense/authorship/model/FileInfo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":" * Stores the path to the file, the list of {@code LineInfo} for each line in the file and file size."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FileInfo {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final String path;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final ArrayList\u003cLineInfo\u003e lines;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private FileType fileType;"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":"    private long fileSize;"},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"    private boolean exceedsFileLimit \u003d false;"},{"lineNumber":21,"author":{"gitId":"gok99"},"content":"    private boolean isFileAnalyzed \u003d true;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public FileInfo(String path) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (SystemUtil.isWindows()) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            // Only replace \\ to / in Windows paths, so it does not interferes with a correct Unix path"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            path \u003d path.replace(\u0027\\\\\u0027, \u0027/\u0027);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.path \u003d path;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns true if none of the {@link Author} in {@code listedAuthors} contributed to this file."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean isAllAuthorsIgnored(List\u003cAuthor\u003e listedAuthors) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return lines.stream().noneMatch(line -\u003e listedAuthors.contains(line.getAuthor()));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public LineInfo getLine(int num) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return lines.get(num - 1);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void addLine(LineInfo line) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        lines.add(line);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public int getNumOfLines() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return lines.size();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public ArrayList\u003cLineInfo\u003e getLines() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return lines;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String getPath() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public FileType getFileType() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return fileType;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setFileType(FileType fileType) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.fileType \u003d fileType;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"gok99"},"content":"    public long getFileSize() {"},{"lineNumber":69,"author":{"gitId":"gok99"},"content":"        return this.fileSize;"},{"lineNumber":70,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"gok99"},"content":""},{"lineNumber":72,"author":{"gitId":"gok99"},"content":"    public void setFileSize(long fileSize) {"},{"lineNumber":73,"author":{"gitId":"gok99"},"content":"        this.fileSize \u003d fileSize;"},{"lineNumber":74,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"gok99"},"content":""},{"lineNumber":76,"author":{"gitId":"gok99"},"content":"    public void setFileAnalyzed(boolean isFileAnalyzed) {"},{"lineNumber":77,"author":{"gitId":"gok99"},"content":"        this.isFileAnalyzed \u003d isFileAnalyzed;"},{"lineNumber":78,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"gok99"},"content":""},{"lineNumber":80,"author":{"gitId":"gok99"},"content":"    public boolean isFileAnalyzed() {"},{"lineNumber":81,"author":{"gitId":"gok99"},"content":"        return isFileAnalyzed;"},{"lineNumber":82,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"gok99"},"content":""},{"lineNumber":84,"author":{"gitId":"gok99"},"content":"    public boolean exceedsFileLimit() {"},{"lineNumber":85,"author":{"gitId":"gok99"},"content":"        return exceedsFileLimit;"},{"lineNumber":86,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"gok99"},"content":""},{"lineNumber":88,"author":{"gitId":"gok99"},"content":"    public void setExceedsSizeLimit(boolean exceedsFileLimit) {"},{"lineNumber":89,"author":{"gitId":"gok99"},"content":"        this.exceedsFileLimit \u003d exceedsFileLimit;"},{"lineNumber":90,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"gok99"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Sets the {@code author} of the {@link LineInfo} in {@code lineNumber} for this {@link FileInfo}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setLineAuthor(int lineNumber, Author author) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        lines.get(lineNumber).setAuthor(author);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Sets the {@code lastModifiedDate} of the {@link LineInfo} in {@code lineNumber} for this {@link FileInfo}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void setLineLastModifiedDate(int lineNumber, LocalDateTime lastModifiedDate) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        lines.get(lineNumber).setLastModifiedDate(lastModifiedDate);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns true if the {@link LineInfo} in {@code lineNumber} index is being tracked."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean isFileLineTracked(int lineNumber) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return getLines().get(lineNumber).isTracked();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!(other instanceof FileInfo)) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        FileInfo otherFileInfo \u003d (FileInfo) other;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return path.equals(otherFileInfo.path)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                \u0026\u0026 lines.equals(otherFileInfo.lines);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":6,"gok99":28,"-":93}},{"path":"src/main/java/reposense/authorship/model/FileResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Stores the result from analyzing a {@link FileInfo}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FileResult {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private FileType fileType;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Boolean isBinary \u003d null; // Should only be true or null to prevent it from being serialized"},{"lineNumber":17,"author":{"gitId":"gok99"},"content":"    private Boolean isIgnored \u003d null;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final ArrayList\u003cLineInfo\u003e lines;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final HashMap\u003cAuthor, Integer\u003e authorContributionMap;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FileResult(String path, FileType fileType, ArrayList\u003cLineInfo\u003e lines,"},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"            HashMap\u003cAuthor, Integer\u003e authorContributionMap, boolean isBinary, boolean isIgnored) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.path \u003d path;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.fileType \u003d fileType;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.lines \u003d lines;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.authorContributionMap \u003d authorContributionMap;"},{"lineNumber":27,"author":{"gitId":"gok99"},"content":"        // isBinary and isIgnored are mutually exclusive"},{"lineNumber":28,"author":{"gitId":"gok99"},"content":"        assert !(isBinary \u0026\u0026 isIgnored);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (isBinary) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            this.isBinary \u003d true;"},{"lineNumber":31,"author":{"gitId":"gok99"},"content":"        } else if (isIgnored) {"},{"lineNumber":32,"author":{"gitId":"gok99"},"content":"            this.isIgnored \u003d true;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static FileResult createTextFileResult(String path, FileType fileType, ArrayList\u003cLineInfo\u003e lines,"},{"lineNumber":37,"author":{"gitId":"gok99"},"content":"            HashMap\u003cAuthor, Integer\u003e authorContributionMap, boolean isIgnored) {"},{"lineNumber":38,"author":{"gitId":"gok99"},"content":"        return new FileResult(path, fileType, lines, authorContributionMap, false, isIgnored);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static FileResult createBinaryFileResult(String path, FileType fileType, HashMap\u003cAuthor,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            Integer\u003e authorContributionMap) {"},{"lineNumber":43,"author":{"gitId":"gok99"},"content":"        return new FileResult(path, fileType, new ArrayList\u003c\u003e(), authorContributionMap, true, false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean isBinary() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return isBinary !\u003d null;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"gok99"},"content":"    public boolean isIgnored() {"},{"lineNumber":51,"author":{"gitId":"gok99"},"content":"        return isIgnored !\u003d null;"},{"lineNumber":52,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"gok99"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public List\u003cLineInfo\u003e getLines() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return lines;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String getPath() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public FileType getFileType() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return fileType;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"gok99"},"content":"    public void clearLines() {"},{"lineNumber":67,"author":{"gitId":"gok99"},"content":"        this.lines.clear();"},{"lineNumber":68,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"gok99"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public HashMap\u003cAuthor, Integer\u003e getAuthorContributionMap() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return authorContributionMap;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"gok99":17,"-":55}},{"path":"src/main/java/reposense/authorship/model/LineInfo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Stores the information of a line in a {@link FileInfo}."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class LineInfo {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int lineNumber;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Author author;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private String content;"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private LocalDateTime lastModifiedDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private transient boolean isTracked;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public LineInfo(int lineNumber, String content) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.lineNumber \u003d lineNumber;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.content \u003d content;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        isTracked \u003d true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Author getAuthor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return author;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setAuthor(Author author) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.author \u003d author;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public int getLineNumber() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return lineNumber;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String getContent() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return content;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void setTracked(boolean isTracked) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.isTracked \u003d isTracked;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public LocalDateTime getLastModifiedDate() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return lastModifiedDate;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void setLastModifiedDate(LocalDateTime lastModifiedDate) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.lastModifiedDate \u003d lastModifiedDate;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean isTracked() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return isTracked;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof LineInfo)) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        LineInfo otherLineInfo \u003d (LineInfo) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return lineNumber \u003d\u003d otherLineInfo.lineNumber"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(author, otherLineInfo.author)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 content.equals(otherLineInfo.content)"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 isTracked \u003d\u003d otherLineInfo.isTracked"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                \u0026\u0026 ((lastModifiedDate \u003d\u003d null \u0026\u0026 otherLineInfo.lastModifiedDate \u003d\u003d null)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                    || (lastModifiedDate.equals(otherLineInfo.lastModifiedDate)));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"},{"lineNumber":77,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yhtMinceraft1010X":5,"-":72}},{"path":"src/main/java/reposense/commits/CommitInfoAnalyzer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.commits;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.StringsUtil.removeQuote;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitInfo;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.commits.model.ContributionPair;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Analyzes commit information found in the git log."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class CommitInfoAnalyzer {"},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static final DateTimeFormatter GIT_STRICT_ISO_DATE_FORMAT \u003d"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ssz\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String TAB_SPLITTER \u003d \"\\t\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String MOVED_FILE_INDICATION \u003d \"\u003d\u003e \";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String BINARY_FILE_CONTRIBUTION \u003d \"-\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final int STAT_ADDITION_INDEX \u003d 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final int STAT_DELETION_INDEX \u003d 1;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final int STAT_FILE_PATH_INDEX \u003d 2;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(CommitInfoAnalyzer.class);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_ANALYZING_COMMIT_INFO \u003d \"Analyzing commits info for %s (%s)...\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String LOG_SPLITTER \u003d \"\\\\|\\\\n\\\\|\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String REF_SPLITTER \u003d \",\\\\s\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String NEW_LINE_SPLITTER \u003d \"\\\\n\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String TAG_PREFIX \u003d \"tag:\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final int COMMIT_HASH_INDEX \u003d 0;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_INDEX \u003d 1;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final int EMAIL_INDEX \u003d 2;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final int DATE_INDEX \u003d 3;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final int MESSAGE_TITLE_INDEX \u003d 4;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final int MESSAGE_BODY_INDEX \u003d 5;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final int REF_NAME_INDEX \u003d 6;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final Pattern MESSAGEBODY_LEADING_PATTERN \u003d Pattern.compile(\"^ {4}\", Pattern.MULTILINE);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Analyzes each {@link CommitInfo} in {@code commitInfos} and returns a list of {@link CommitResult} that is not"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * specified to be ignored or the author is inside {@code config}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static List\u003cCommitResult\u003e analyzeCommits(List\u003cCommitInfo\u003e commitInfos, RepoConfiguration config) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_START_ANALYZING_COMMIT_INFO, config.getLocation(), config.getBranch()));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return commitInfos.stream()"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .map(commitInfo -\u003e analyzeCommit(commitInfo, config))"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .filter(commitResult -\u003e !commitResult.getAuthor().equals(Author.UNKNOWN_AUTHOR)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                        \u0026\u0026 !CommitHash.isInsideCommitList(commitResult.getHash(), config.getIgnoreCommitList()))"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .distinct()"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(CommitResult::getTime))"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Extracts the relevant data from {@code commitInfo} into a {@link CommitResult}. Retrieves the author of the"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * commit from {@code config}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static CommitResult analyzeCommit(CommitInfo commitInfo, RepoConfiguration config) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String infoLine \u003d commitInfo.getInfoLine();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String statLine \u003d commitInfo.getStatLine();"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String[] elements \u003d infoLine.split(LOG_SPLITTER, 7);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String hash \u003d elements[COMMIT_HASH_INDEX];"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Author author \u003d config.getAuthor(elements[AUTHOR_INDEX], elements[EMAIL_INDEX]);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"yhtMinceraft1010X"},"content":"        ZonedDateTime date \u003d null;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"            date \u003d ZonedDateTime.parse(elements[DATE_INDEX], GIT_STRICT_ISO_DATE_FORMAT);"},{"lineNumber":92,"author":{"gitId":"yhtMinceraft1010X"},"content":"        } catch (DateTimeParseException pe) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, \"Unable to parse the date from git log result for commit.\", pe);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Commit date may be in a timezone different from the one given in the config."},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LocalDateTime adjustedDate \u003d date.withZoneSameInstant(config.getZoneId()).toLocalDateTime();"},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String messageTitle \u003d (elements.length \u003e MESSAGE_TITLE_INDEX) ? elements[MESSAGE_TITLE_INDEX] : \"\";"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String messageBody \u003d (elements.length \u003e MESSAGE_BODY_INDEX)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                ? getCommitMessageBody(elements[MESSAGE_BODY_INDEX]) : \"\";"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String[] refs \u003d (elements.length \u003e REF_NAME_INDEX)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                ? elements[REF_NAME_INDEX].split(REF_SPLITTER)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                : new String[]{\"\"};"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String[] tags \u003d Arrays.stream(refs).filter(ref -\u003e ref.contains(TAG_PREFIX)).toArray(String[]::new);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (tags.length \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            tags \u003d null; // set to null so it won\u0027t be converted to json"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            extractTagNames(tags);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (statLine.isEmpty()) { // empty commit, no files changed"},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"            return new CommitResult(author, hash, adjustedDate, messageTitle, messageBody, tags);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String[] statInfos \u003d statLine.split(NEW_LINE_SPLITTER);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String[] fileTypeContributions \u003d Arrays.copyOfRange(statInfos, 0, statInfos.length - 1);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e fileTypeAndContributionMap \u003d"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                getFileTypesAndContribution(fileTypeContributions, config);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return new CommitResult(author, hash, adjustedDate, messageTitle, messageBody, tags,"},{"lineNumber":123,"author":{"gitId":"yhtMinceraft1010X"},"content":"                fileTypeAndContributionMap);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the number of lines added and deleted in {@code filePathContributions} for the specified file types"},{"lineNumber":128,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * in {@code config}."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static Map\u003cFileType, ContributionPair\u003e getFileTypesAndContribution(String[] filePathContributions,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            RepoConfiguration config) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e fileTypesAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        for (String filePathContribution : filePathContributions) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            String[] infos \u003d filePathContribution.split(TAB_SPLITTER);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"            if (isBinaryContribution(infos[STAT_ADDITION_INDEX], infos[STAT_DELETION_INDEX])) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                continue; // skip binary file contributions"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"            int addition \u003d Integer.parseInt(infos[STAT_ADDITION_INDEX]);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            int deletion \u003d Integer.parseInt(infos[STAT_DELETION_INDEX]);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            String filePath \u003d extractFilePath(infos[STAT_FILE_PATH_INDEX]);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            FileType fileType \u003d config.getFileType(filePath);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"            if (!fileTypesAndContributionMap.containsKey(fileType)) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                fileTypesAndContributionMap.put(fileType, new ContributionPair());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"            ContributionPair contributionPair \u003d fileTypesAndContributionMap.get(fileType);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            contributionPair.addInsertions(addition);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            contributionPair.addDeletions(deletion);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return fileTypesAndContributionMap;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Extracts the correct file path from the unprocessed git log {@code filePath}."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private static String extractFilePath(String filePath) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        String filteredFilePath \u003d filePath;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (filteredFilePath.contains(MOVED_FILE_INDICATION)) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            // moved file has the format: fileA \u003d\u003e newPosition/fileA"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            filteredFilePath \u003d filteredFilePath.substring(filePath.indexOf(MOVED_FILE_INDICATION)"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    + MOVED_FILE_INDICATION.length());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            // Removes the trailing \u0027}\u0027 character from the file name, as renamed file names have ending \u0027}\u0027 character."},{"lineNumber":166,"author":{"gitId":"-"},"content":"            filteredFilePath \u003d filteredFilePath.replaceAll(\"}$\", \"\");"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // Removes the trailing double quotes from the file name, as filenames that have special characters"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // will be escaped and surrounded by double quotes automatically. e.g. READ\\ME.md -\u003e \"READ\\\\ME.md\""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        filteredFilePath \u003d removeQuote(filteredFilePath);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return filteredFilePath;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * Detects binary file contribution based on the git log {@code addition} and {@code deletion}."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    private static boolean isBinaryContribution(String addition, String deletion) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        // git log returns \"-\" for binary file additions and deletions"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return addition.equals(BINARY_FILE_CONTRIBUTION) \u0026\u0026 deletion.equals(BINARY_FILE_CONTRIBUTION);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Extracts the tag names in {@code tags}."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    private static void extractTagNames(String[] tags) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c tags.length; i++) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            tags[i] \u003d tags[i].substring(tags[i].lastIndexOf(TAG_PREFIX) + TAG_PREFIX.length()).trim();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    private static String getCommitMessageBody(String raw) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        Matcher matcher \u003d MESSAGEBODY_LEADING_PATTERN.matcher(raw);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return matcher.replaceAll(\"\");"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":20,"-":176}},{"path":"src/main/java/reposense/commits/CommitInfoExtractor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.commits;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitInfo;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.git.GitLog;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Extracts commit information of a repository."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class CommitInfoExtractor {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(CommitInfoExtractor.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_EXTRACTING_COMMIT_INFO \u003d \"Extracting commits info for %s (%s)...\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INFO_STAT_SEPARATOR \u003d \"|\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Pattern TRAILING_NEWLINES_PATTERN \u003d Pattern.compile(\"\\n+$\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Extracts out and returns the raw information of each commit for the repo in {@code config}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static List\u003cCommitInfo\u003e extractCommitInfos(RepoConfiguration config) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_START_EXTRACTING_COMMIT_INFO, config.getLocation(), config.getBranch()));"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e repoCommitInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        for (Author author : config.getAuthorList()) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            String gitLogResult \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            List\u003cCommitInfo\u003e authorCommitInfos \u003d parseGitLogResults(gitLogResult);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            repoCommitInfos.addAll(authorCommitInfos);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return repoCommitInfos;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Parses the {@code gitLogResult} into a list of {@link CommitInfo} and returns it."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static ArrayList\u003cCommitInfo\u003e parseGitLogResults(String gitLogResult) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ArrayList\u003cCommitInfo\u003e commitInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String[] rawCommitInfos \u003d gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (rawCommitInfos.length \u003c 2) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            //no log (maybe because no contribution for that file type)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return commitInfos;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // Starts from 1 as index 0 is always empty."},{"lineNumber":59,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c rawCommitInfos.length; i++) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Matcher matcher \u003d TRAILING_NEWLINES_PATTERN.matcher(rawCommitInfos[i]);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            String rawCommitInfo \u003d matcher.replaceAll(\"\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"            int statLineSeparatorIndex \u003d rawCommitInfo.lastIndexOf(INFO_STAT_SEPARATOR);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            String infoLine \u003d rawCommitInfo.substring(0, statLineSeparatorIndex);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            String statLine \u003d rawCommitInfo.substring(statLineSeparatorIndex + 1).trim();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            commitInfos.add(new CommitInfo(infoLine, statLine));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Collections.reverse(commitInfos);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return commitInfos;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":71}},{"path":"src/main/java/reposense/commits/CommitResultAggregator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.commits;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.commits.model.AuthorDailyContribution;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitContributionSummary;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitResult;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Uses the commit analysis results to generate the summary information of a repository."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class CommitResultAggregator {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final int DAYS_IN_MS \u003d 24 * 60 * 60 * 1000;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@link CommitContributionSummary} generated from aggregating the {@code commitResults}."},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Uses {@code config} to obtain details like author name, since date and timezone."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static CommitContributionSummary aggregateCommitResults("},{"lineNumber":31,"author":{"gitId":"-"},"content":"            RepoConfiguration config, List\u003cCommitResult\u003e commitResults) {"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime startDate;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ZoneId zoneId \u003d config.getZoneId();"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"        startDate \u003d (TimeUtil.isEqualToArbitraryFirstDateConverted(config.getSinceDate(), zoneId))"},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"                ? getStartOfDate(getStartDate(commitResults, zoneId), zoneId)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                : config.getSinceDate();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ReportGenerator.setEarliestSinceDate(startDate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, List\u003cAuthorDailyContribution\u003e\u003e authorDailyContributionsMap \u003d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                getAuthorDailyContributionsMap(config.getAuthorDisplayNameMap().keySet(), commitResults, zoneId);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime lastDate \u003d commitResults.size() \u003d\u003d 0"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                ? null"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"                : getStartOfDate(commitResults.get(commitResults.size() - 1).getTime(), zoneId);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, Float\u003e authorContributionVariance \u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                calcAuthorContributionVariance(authorDailyContributionsMap, startDate, lastDate, zoneId);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new CommitContributionSummary("},{"lineNumber":50,"author":{"gitId":"-"},"content":"                config.getAuthorDisplayNameMap(),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                authorDailyContributionsMap,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                authorContributionVariance);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Calculates the contribution variance of all authors across contributions made within a date range."},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * This date range is between {@code startDate} and {@code lastDate}, which are determined based on {@code zoneId}."},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The authors and their respective contributions are stored in {@code intervalContributionMaps}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static Map\u003cAuthor, Float\u003e calcAuthorContributionVariance("},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"            Map\u003cAuthor, List\u003cAuthorDailyContribution\u003e\u003e intervalContributionMaps, LocalDateTime startDate,"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            LocalDateTime lastDate, ZoneId zoneId) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, Float\u003e result \u003d new HashMap\u003c\u003e();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        for (Author author : intervalContributionMaps.keySet()) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            List\u003cAuthorDailyContribution\u003e contributions \u003d intervalContributionMaps.get(author);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            result.put(author, getContributionVariance(contributions, startDate, lastDate, zoneId));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return result;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Calculates the contribution variance for each author across the author\u0027s {@code contributions} made"},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * between {@code startDate} and {@code lastDate}."},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@code startDate} and {@code lastDate} are determined based on {@code zoneId}."},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static float getContributionVariance(List\u003cAuthorDailyContribution\u003e contributions, LocalDateTime startDate,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            LocalDateTime lastDate, ZoneId zoneId) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (contributions.size() \u003d\u003d 0) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return 0;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //get mean"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        float total \u003d 0;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        long startDateInMs \u003d ZonedDateTime.of(startDate, zoneId).toInstant().toEpochMilli();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        long lastDateInMs \u003d ZonedDateTime.of(lastDate, zoneId).toInstant().toEpochMilli();"},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"        long totalDays \u003d (lastDateInMs - startDateInMs) / DAYS_IN_MS + 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        for (AuthorDailyContribution contribution : contributions) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            total +\u003d contribution.getTotalContribution();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        float mean \u003d total / totalDays;"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        float variance \u003d 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        long currentDate \u003d ZonedDateTime.of(startDate, zoneId).toInstant().toEpochMilli();"},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        int contributionIndex \u003d 0;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c totalDays; i +\u003d 1) {"},{"lineNumber":97,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"            // Check whether the contributionIndex is valid and the date being looked at has any contributions."},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"            if (contributionIndex \u003c contributions.size() \u0026\u0026 currentDate"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    \u003d\u003d ZonedDateTime.of(contributions.get(contributionIndex).getDate(), zoneId)"},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    .toInstant().toEpochMilli()) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                variance +\u003d Math.pow((mean - contributions.get(contributionIndex).getTotalContribution()), 2);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                contributionIndex +\u003d 1;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                variance +\u003d Math.pow(mean, 2);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            currentDate +\u003d DAYS_IN_MS;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return variance / totalDays;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a mapping of each {@link Author} to their respective commit contributions."},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For each author, commit contributions are consolidated into {@link AuthorDailyContribution}s based on the date"},{"lineNumber":115,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * of each {@link CommitResult}."},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param authorSet The set of authors."},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param commitResults The consolidated list of {@link CommitResult}s."},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param zoneId The timezone for all {@link CommitResult}s\u0027 dates."},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return a {@link Map} of each author to a list of {@link AuthorDailyContribution} across all dates in which"},{"lineNumber":121,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * the author made commits."},{"lineNumber":122,"author":{"gitId":"yhtMinceraft1010X"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private static Map\u003cAuthor, List\u003cAuthorDailyContribution\u003e\u003e getAuthorDailyContributionsMap("},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":"            Set\u003cAuthor\u003e authorSet, List\u003cCommitResult\u003e commitResults, ZoneId zoneId) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, List\u003cAuthorDailyContribution\u003e\u003e authorDailyContributionsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        authorSet.forEach(author -\u003e authorDailyContributionsMap.put(author, new ArrayList\u003c\u003e()));"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime commitStartDate;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        for (CommitResult commitResult : commitResults) {"},{"lineNumber":130,"author":{"gitId":"yhtMinceraft1010X"},"content":"            commitStartDate \u003d getStartOfDate(commitResult.getTime(), zoneId);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            Author commitAuthor \u003d commitResult.getAuthor();"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"            List\u003cAuthorDailyContribution\u003e authorDailyContributions \u003d authorDailyContributionsMap.get(commitAuthor);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"yhtMinceraft1010X"},"content":"            // Check whether there are no contribution dates present or if the current commit date is not yet in"},{"lineNumber":136,"author":{"gitId":"yhtMinceraft1010X"},"content":"            // the authorDailyContributions list."},{"lineNumber":137,"author":{"gitId":"yhtMinceraft1010X"},"content":"            if (authorDailyContributions.isEmpty() || !getStartOfDate(authorDailyContributions"},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    .get(authorDailyContributions.size() - 1).getDate(), zoneId)"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                            .equals(commitStartDate)) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                addDailyContributionForNewDate(authorDailyContributions, commitStartDate);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"            authorDailyContributions.get(authorDailyContributions.size() - 1).addCommitContribution(commitResult);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return authorDailyContributionsMap;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private static void addDailyContributionForNewDate("},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"            List\u003cAuthorDailyContribution\u003e authorDailyContributions, LocalDateTime date) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        authorDailyContributions.add(new AuthorDailyContribution(date));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Gets the starting point of the {@code current} date."},{"lineNumber":156,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":157,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return the {@code current} date if it is equal to the {@code ARBITRARY_FIRST_COMMIT_DATE} adjusted to the"},{"lineNumber":158,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * timezone given by {@code zoneId}. Otherwise, return a {@link LocalDateTime} adjusted to have a time of 00:00:00."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static LocalDateTime getStartOfDate(LocalDateTime current, ZoneId zoneId) {"},{"lineNumber":161,"author":{"gitId":"yhtMinceraft1010X"},"content":"        if (TimeUtil.isEqualToArbitraryFirstDateConverted(current, zoneId)) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return current;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return current.withHour(0).withMinute(0).withSecond(0).withNano(0);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Gets the earliest commit date from {@code commitInfos}."},{"lineNumber":170,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":171,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return First commit date if there is at least one {@link CommitResult}. Otherwise, return"},{"lineNumber":172,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * the {@code ARBITRARY_FIRST_COMMIT_DATE} converted to the timezone given by {@code zoneId}."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static LocalDateTime getStartDate(List\u003cCommitResult\u003e commitInfos, ZoneId zoneId) {"},{"lineNumber":175,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return (commitInfos.isEmpty())"},{"lineNumber":176,"author":{"gitId":"yhtMinceraft1010X"},"content":"                ? TimeUtil.getArbitraryFirstCommitDateConverted(zoneId)"},{"lineNumber":177,"author":{"gitId":"yhtMinceraft1010X"},"content":"                : commitInfos.get(0).getTime();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":58,"-":121}},{"path":"src/main/java/reposense/commits/model/AuthorDailyContribution.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.commits.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Holds the commits made by an {@code Author} for a single day."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class AuthorDailyContribution {"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private LocalDateTime date;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private List\u003cCommitResult\u003e commitResults;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public AuthorDailyContribution(LocalDateTime date) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        commitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public LocalDateTime getDate() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return date;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void setDate(LocalDateTime date) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Adds the {@code commitResult} into the {@code Author}\u0027s daily contribution."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void addCommitContribution(CommitResult commitResult) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commitResults.add(commitResult);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the total line contribution made by the {@code Author} for the day."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public int getTotalContribution() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        int totalContribution \u003d 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        for (CommitResult commitResult : commitResults) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            totalContribution +\u003d commitResult.getDeletions();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            totalContribution +\u003d commitResult.getInsertions();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return totalContribution;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":5,"-":40}},{"path":"src/main/java/reposense/commits/model/CommitResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.commits.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Stores the result from analyzing a {@code CommitInfo}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommitResult {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final String hash;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final String messageTitle;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final String messageBody;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final String[] tags;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cFileType, ContributionPair\u003e fileTypesAndContributionMap;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final transient Author author;"},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private final transient LocalDateTime time;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public CommitResult(Author author, String hash, LocalDateTime time, String messageTitle,"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"            String messageBody, String[] tags, Map\u003cFileType, ContributionPair\u003e fileTypesAndContributionMap) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.author \u003d author;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.hash \u003d hash;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.time \u003d time;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.messageTitle \u003d messageTitle;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.messageBody \u003d messageBody;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.tags \u003d tags;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.fileTypesAndContributionMap \u003d fileTypesAndContributionMap;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public CommitResult(Author author, String hash, LocalDateTime time, String messageTitle, String messageBody,"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"            String[] tags) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.author \u003d author;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.hash \u003d hash;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.time \u003d time;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.messageTitle \u003d messageTitle;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.messageBody \u003d messageBody;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.tags \u003d tags;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.fileTypesAndContributionMap \u003d Collections.emptyMap();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public String getMessageTitle() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return messageTitle;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String getMessageBody() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return messageBody;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public String[] getTags() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return tags;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Author getAuthor() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return author;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public String getHash() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return hash;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public LocalDateTime getTime() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return time;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public int getInsertions() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        int insertions \u003d 0;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        for (ContributionPair contributionPair : fileTypesAndContributionMap.values()) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            insertions +\u003d contributionPair.getInsertions();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return insertions;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public int getDeletions() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        int deletions \u003d 0;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        for (ContributionPair contributionPair : fileTypesAndContributionMap.values()) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            deletions +\u003d contributionPair.getDeletions();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return deletions;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public Map\u003cFileType, ContributionPair\u003e getFileTypesAndContributionMap() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return fileTypesAndContributionMap;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommitResult)) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        CommitResult otherCommitResult \u003d (CommitResult) other;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return author.equals(otherCommitResult.author)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                \u0026\u0026 hash.equals(otherCommitResult.hash)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                \u0026\u0026 time.equals(otherCommitResult.time)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                \u0026\u0026 messageTitle.equals(otherCommitResult.messageTitle)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \u0026\u0026 messageBody.equals(otherCommitResult.messageBody)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                \u0026\u0026 Arrays.equals(tags, otherCommitResult.tags)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                \u0026\u0026 fileTypesAndContributionMap.equals(otherCommitResult.fileTypesAndContributionMap);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return hash.hashCode();"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":7,"-":107}},{"path":"src/main/java/reposense/git/GitBlame.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.StringsUtil.addQuotesForFilePath;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Contains git blame related functionalities."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Git blame is responsible for showing which revision and author last modified each line of a file."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class GitBlame {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String IGNORE_COMMIT_LIST_FILE_NAME \u003d \".git-blame-ignore-revs\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String COMMIT_HASH_REGEX \u003d \"(^[0-9a-f]{40} .*)\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String AUTHOR_NAME_REGEX \u003d \"(^author .*)\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String AUTHOR_EMAIL_REGEX \u003d \"(^author-mail .*)\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String AUTHOR_TIME_REGEX \u003d \"(^author-time [0-9]+)\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String AUTHOR_TIMEZONE_REGEX \u003d \"(^author-tz .*)\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String COMBINATION_REGEX \u003d COMMIT_HASH_REGEX + \"|\" + AUTHOR_NAME_REGEX + \"|\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + AUTHOR_EMAIL_REGEX + \"|\" + AUTHOR_TIME_REGEX + \"|\" + AUTHOR_TIMEZONE_REGEX;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the raw git blame result for the {@code fileDirectory}, performed at the {@code root} directory."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static String blame(String root, String fileDirectory) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String blameCommand \u003d \"git blame -w --line-porcelain\";"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"        blameCommand +\u003d \" \" + addQuotesForFilePath(fileDirectory);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return StringsUtil.filterText(runCommand(rootPath, blameCommand), COMBINATION_REGEX);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the raw git blame result with finding previous authors enabled for the {@code fileDirectory},"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * performed at the {@code root} directory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static String blameWithPreviousAuthors(String root, String fileDirectory) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String blameCommandWithFindingPreviousAuthors \u003d \"git blame -w --line-porcelain --ignore-revs-file\";"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        blameCommandWithFindingPreviousAuthors +\u003d \" \" + addQuotesForFilePath(IGNORE_COMMIT_LIST_FILE_NAME);"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        blameCommandWithFindingPreviousAuthors +\u003d \" \" + addQuotesForFilePath(fileDirectory);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return StringsUtil.filterText(runCommand(rootPath, blameCommandWithFindingPreviousAuthors), COMBINATION_REGEX);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":4,"-":47}},{"path":"src/main/java/reposense/git/GitBranch.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Contains git branch related functionalities."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Git branch is responsible for list, create, or delete branches."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class GitBranch {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Returns the current working branch of the repository at {@code root}."},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws GitBranchException if command execution is unsuccessful."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static String getCurrentBranch(String root) throws GitBranchException {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        String gitBranchCommand \u003d \"git branch\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            return StringsUtil.filterText(runCommand(rootPath, gitBranchCommand), \"\\\\* (.*)\").split(\"\\\\*\")[1].trim();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            throw new GitBranchException(rte);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":2,"-":30}},{"path":"src/main/java/reposense/git/GitCatFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Contains git cat file related functionalities."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Git cat file provides content or type and size information for repository objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class GitCatFile {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitCatFile.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns parent commits for the commit associated with the input {@code commitHash}."},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws CommitNotFoundException if there is no commit associated with {@code commitHash}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getParentCommits(String root, String commitHash) throws CommitNotFoundException {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String catFileCommand \u003d \"git cat-file -p \" + commitHash;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            String output \u003d runCommand(rootPath, catFileCommand);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            List\u003cString\u003e parentCommits \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            for (String line : output.split(\"\\n\")) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                if (line.startsWith(\"parent\")) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                    parentCommits.add(line.substring(7).trim());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            return parentCommits;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        } catch (RuntimeException e) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Commit not found: \" + commitHash);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Given the input list of {@code commitHashes}, return a list of commit hashes for the parent"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * commits of all the commits."},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getParentsOfCommits(String root, List\u003cString\u003e commitHashes) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parentCommits \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        for (String commitHash : commitHashes) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                parentCommits.addAll(getParentCommits(root, commitHash));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            } catch (CommitNotFoundException e) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                logger.warning(\"Invalid commit hash ignored: \" + commitHash);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return parentCommits;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":6,"-":55}},{"path":"src/main/java/reposense/git/GitCheckout.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains git checkout related functionalities."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Git branch is responsible for switch branches, revision or restore working tree files."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class GitCheckout {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitCheckout.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static void checkoutRecentBranch(String root) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkout(root, \"-\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static void checkoutBranch(String root, String branch) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        checkout(root, branch);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Checkouts to the hash revision given in the {@code commit}."},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static void checkoutCommit(String root, CommitResult commit) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        logger.info(\"Checking out \" + commit.getHash() + \"time:\" + commit.getTime());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        checkout(root, commit.getHash());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Checkouts to the given {@code hash} revision."},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static void checkout(String root, String hash) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        runCommand(rootPath, \"git checkout \" + hash);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Checks out to the latest commit before {@code untilDate}, associated with timezone given by {@code zoneId} in"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@code branchName} branch if {@code untilDate} is not null."},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @throws CommitNotFoundException if commits before {@code untilDate} cannot be found."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void checkoutDate(String root, String branchName, LocalDateTime untilDate, ZoneId zoneId)"},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws CommitNotFoundException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (untilDate \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"        String hash \u003d GitRevList.getCommitHashUntilDate(root, branchName, untilDate, zoneId);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (hash.isEmpty()) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Commit before until date is not found.\");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String checkoutCommand \u003d \"git checkout \" + hash;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        runCommand(rootPath, checkoutCommand);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":11,"-":60}},{"path":"src/main/java/reposense/git/GitClone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.StringsUtil.addQuotes;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.StringsUtil.addQuotesForFilePath;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitCloneException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.system.CommandRunner;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.system.CommandRunnerProcess;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains git clone related functionalities."},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Git clone is responsible for cloning a local/remote repository into a new directory."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class GitClone {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitClone.class);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Runs \"git clone --bare\" command asynchronously with {@code rootPath} as working directory to clone a bare repo"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * specified in the {@code config} into the folder {@code outputFolderName}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return an instance of {@link CommandRunnerProcess} to allow tracking the status of the cloning process."},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws GitCloneException when an error occurs while attempting to clone the repo."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static CommandRunnerProcess cloneBareAsync(RepoConfiguration config, Path rootPath, String outputFolderName)"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws GitCloneException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return CommandRunner.runCommandAsync(rootPath, getCloneBareCommand(config, outputFolderName));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new GitCloneException(rte);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Runs \"git clone --bare --shallow-since\u003d\" command asynchronously with {@code rootPath} as working directory"},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * to clone a bare repo specified in the {@code config} into the folder {@code outputFolderName}."},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Uses {@code sinceDate} for the \"--shallow-since\u003d\" flag."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return an instance of {@link CommandRunnerProcess} to allow tracking the status of the cloning process."},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws GitCloneException when an error occurs while attempting to clone the repo."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static CommandRunnerProcess cloneShallowBareAsync(RepoConfiguration config, Path rootPath,"},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"            String outputFolderName, LocalDateTime sinceDate) throws GitCloneException {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return CommandRunner.runCommandAsync(rootPath,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                    getCloneShallowBareCommand(config, outputFolderName, sinceDate));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new GitCloneException(rte);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Runs \"git clone --bare\" command asynchronously with {@code rootPath} as working directory to clone a bare repo"},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * specified in the {@code config} into the folder {@code outputFolderName}."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws GitCloneException when an error occurs while attempting to clone the repo."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void clonePartialBare(RepoConfiguration config, Path rootPath, String outputFolderName)"},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws GitCloneException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            CommandRunner.runCommand(rootPath, getClonePartialBareCommand(config, outputFolderName));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new GitCloneException(rte);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Runs \"git clone --bare\" command asynchronously with {@code rootPath} as working directory to clone a bare repo"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * specified in the {@code config} into the folder {@code outputFolderName}."},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Uses {@code sinceDate} for the \"--shallow-since\u003d\" flag."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws GitCloneException when an error occurs while attempting to clone the repo."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void cloneShallowPartialBare(RepoConfiguration config, Path rootPath, String outputFolderName,"},{"lineNumber":88,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime sinceDate) throws GitCloneException {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            CommandRunner.runCommand(rootPath, getCloneShallowPartialBareCommand(config, outputFolderName, sinceDate));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new GitCloneException(rte);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Performs a full clone with {@code rootPath} as working directory relative to the location of the bare repo"},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * version of {@code config} into the folder {@code outputFolderName} and checks out the branch specified in"},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@code config}."},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws GitCloneException when an error occurs while attempting to clone the repo."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws IOException if it fails to delete a directory."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static void cloneFromBareAndUpdateBranch(Path rootPath, RepoConfiguration config)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throws GitCloneException, IOException {"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"        Path relativePath \u003d FileUtil.getBareRepoPath(config);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String outputFolderName \u003d Paths.get(config.getRepoFolderName(), config.getRepoName()).toString();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path outputFolderPath \u003d Paths.get(FileUtil.REPOS_ADDRESS, outputFolderName);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!SystemUtil.isTestEnvironment()) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            FileUtil.deleteDirectory(outputFolderPath.toString());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        } else if (SystemUtil.isTestEnvironment() \u0026\u0026 Files.exists(outputFolderPath)) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            GitCheckout.checkoutBranch(outputFolderPath.toString(), config.getBranch());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"        String command \u003d getCloneBareAndBranchCommand(relativePath, config, outputFolderPath.toString());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            runCommand(rootPath, command);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"            logger.log(Level.SEVERE, \"Exception met while cloning or checking out \" + config.getDisplayName() + \".\""},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"                    + \"Analysis terminated.\", rte);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new GitCloneException(rte);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Constructs the command to clone a bare repo specified in the {@code config}"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * into the folder {@code outputFolderName}."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private static String getCloneBareCommand(RepoConfiguration config, String outputFolderName) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String output \u003d \"git clone --bare \""},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(config.getLocation().toString()) + \" \""},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(outputFolderName);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return output;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"     * Constructs the command to clone from {@code repoPath} into {@code outputFolderName} and"},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"     * branch to the designated branch in {@code config}."},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"chan-j-d"},"content":"     * @param repoPath Location of repo."},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"     * @param config Config of the repo to be analyzed."},{"lineNumber":147,"author":{"gitId":"chan-j-d"},"content":"     * @param outputFolderName Output directory for the cloned repo."},{"lineNumber":148,"author":{"gitId":"chan-j-d"},"content":"     * @return Command to be used."},{"lineNumber":149,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"chan-j-d"},"content":"    private static String getCloneBareAndBranchCommand(Path repoPath, RepoConfiguration config,"},{"lineNumber":151,"author":{"gitId":"chan-j-d"},"content":"            String outputFolderName) {"},{"lineNumber":152,"author":{"gitId":"chan-j-d"},"content":"        return \"git clone \""},{"lineNumber":153,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(repoPath.toString())"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"                + \" --branch \" + config.getBranch()"},{"lineNumber":155,"author":{"gitId":"chan-j-d"},"content":"                + \" \" + addQuotesForFilePath(outputFolderName);"},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Constructs the command to shallow clone a bare repo specified in the {@code config}"},{"lineNumber":160,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * with {@code shallowSinceDate} into the folder {@code outputFolderName}."},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static String getCloneShallowBareCommand(RepoConfiguration config, String outputFolderName,"},{"lineNumber":163,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime shallowSinceDate) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return \"git clone --bare --shallow-since\u003d\""},{"lineNumber":165,"author":{"gitId":"chan-j-d"},"content":"                + addQuotes(shallowSinceDate.toString()) + \" \""},{"lineNumber":166,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(config.getLocation().toString()) + \" \""},{"lineNumber":167,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(outputFolderName);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Constructs the command to partial clone a bare repo specified in the {@code config}"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * into the folder {@code outputFolderName}."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    private static String getClonePartialBareCommand(RepoConfiguration config, String outputFolderName) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return \"git clone --bare --filter\u003dblob:none \""},{"lineNumber":176,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(config.getLocation().toString()) + \" \""},{"lineNumber":177,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(outputFolderName);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Constructs the command to shallow partial clone a bare repo specified in the {@code config}"},{"lineNumber":182,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * with {@code shallowSinceDate} into the folder {@code outputFolderName}."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static String getCloneShallowPartialBareCommand(RepoConfiguration config, String outputFolderName,"},{"lineNumber":185,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime shallowSinceDate) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return \"git clone --bare --filter\u003dblob:none --shallow-since\u003d\""},{"lineNumber":187,"author":{"gitId":"chan-j-d"},"content":"                + addQuotes(shallowSinceDate.toString()) + \" \""},{"lineNumber":188,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(config.getLocation().toString()) + \" \""},{"lineNumber":189,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(outputFolderName);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":33,"yhtMinceraft1010X":35,"-":123}},{"path":"src/main/java/reposense/git/GitDiff.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Contains git diff related functionalities."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Git diff is responsible for obtaining the changes between commits, commit and working tree, etc."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class GitDiff {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String EMPTY_TREE_HASH \u003d \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String CHECKED_OUT_COMMIT_REFERENCE \u003d \"HEAD\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Returns the git diff result of the current commit compared to {@code lastCommitHash}, without any context."},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@link Path} given by {@code root} is the working directory."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static String diffCommit(String root, String lastCommitHash) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, \"git diff -U0 --ignore-submodules\u003dall \" + lastCommitHash);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns a list of committed files with the corresponding number of lines added and deleted in the repo"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * {@code repoRoot}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getModifiedFilesList(Path repoRoot) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String diffCommand \u003d String.format(\"git diff --ignore-submodules\u003dall --numstat %s %s\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"                EMPTY_TREE_HASH, CHECKED_OUT_COMMIT_REFERENCE);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String diffResult \u003d runCommand(repoRoot.toAbsolutePath(), diffCommand);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Arrays.asList(diffResult.split(\"\\n\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":36}},{"path":"src/main/java/reposense/git/GitLog.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.StringsUtil.addQuotesForFilePath;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains git log related functionalities."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Git log is responsible to obtain the commit logs and the authors\u0027 info."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class GitLog {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMIT_INFO_DELIMITER \u003d \"(?m)^\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\\\n\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String PRETTY_FORMAT_STRING \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \"\\\"\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c%n%H|%n|%aN|%n|%aE|%n|%cI|%n|%s|%n|%w(0,4,4)%b%w(0,0,0)|%n|%D|\\\"\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    private static final String DEFAULT_EMAIL_IF_MISSING \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the git commit log info of {@code author}, in the repository specified in {@code config}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static String get(RepoConfiguration config, Author author) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(config.getRepoRoot());"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String command \u003d \"git log --no-merges -i \";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate(), config.getZoneId());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        command +\u003d \" --pretty\u003dformat:\" + PRETTY_FORMAT_STRING + \" --shortstat\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToFilterAuthorArgs(author);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitFormatsArgs(config.getFileTypeManager().getFormats());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitExcludeGlobArgs(rootPath.toFile(), author.getIgnoreGlobList());"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the git commit log info of {@code author}, with the files changed, in the repository specified in"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@code config}."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static String getWithFiles(RepoConfiguration config, Author author) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(config.getRepoRoot());"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String command \u003d \"git log --no-merges -i \";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate(), config.getZoneId());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        command +\u003d \" --pretty\u003dformat:\" + PRETTY_FORMAT_STRING + \" --numstat --shortstat\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToFilterAuthorArgs(author);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitFormatsArgs(config.getFileTypeManager().getFormats());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitExcludeGlobArgs(rootPath.toFile(), author.getIgnoreGlobList());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, command);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"     * Returns the authors who modified the file at {@code filePath}, in the repository specified in {@code config}."},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"     * The output is a list of length-2 arrays containing the author\u0027s name and email."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"    public static List\u003cString[]\u003e getFileAuthors(RepoConfiguration config, String filePath) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(config.getRepoRoot());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String command \u003d \"git log --pretty\u003dformat:\\\"%an\\t%ae\\\" \";"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate(), config.getZoneId());"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        command +\u003d \" \" + addQuotesForFilePath(filePath);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        String result \u003d runCommand(rootPath, command);"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"        return Arrays.stream(result.split(\"\\n\"))"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"                .map(authorAndEmailLine -\u003e authorAndEmailLine.split(\"\\t\"))"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"                .map(authorAndEmailArray -\u003e authorAndEmailArray.length \u003d\u003d 1"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"                        ? new String[] {authorAndEmailArray[0], DEFAULT_EMAIL_IF_MISSING}"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"                        : authorAndEmailArray)"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"                .collect(Collectors.toList());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":17,"yhtMinceraft1010X":2,"-":60}},{"path":"src/main/java/reposense/git/GitRemote.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":""},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"import java.nio.file.Paths;"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"gok99"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"gok99"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"gok99"},"content":""},{"lineNumber":10,"author":{"gitId":"gok99"},"content":"import reposense.system.CommandRunner;"},{"lineNumber":11,"author":{"gitId":"gok99"},"content":"import reposense.system.LogsManager;"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":""},{"lineNumber":13,"author":{"gitId":"gok99"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"gok99"},"content":" * Contains git remote related functionality."},{"lineNumber":15,"author":{"gitId":"gok99"},"content":" * Git remote is responsible for getting remote repository information."},{"lineNumber":16,"author":{"gitId":"gok99"},"content":" */"},{"lineNumber":17,"author":{"gitId":"gok99"},"content":"public class GitRemote {"},{"lineNumber":18,"author":{"gitId":"gok99"},"content":""},{"lineNumber":19,"author":{"gitId":"gok99"},"content":"    public static final String DEFAULT_FETCH_REMOTE \u003d \"origin(fetch)\";"},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"    public static final String DEFAULT_PUSH_REMOTE \u003d \"origin(push)\";"},{"lineNumber":21,"author":{"gitId":"gok99"},"content":""},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitRemote.class);"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":""},{"lineNumber":24,"author":{"gitId":"gok99"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"gok99"},"content":"     * Extracts remote repository information at {@code repoRoot}."},{"lineNumber":26,"author":{"gitId":"gok99"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"gok99"},"content":"     * @return Map of keys of the form REMOTE_NAME(fetch) or REMOTE_NAME(push) to their corresponding remote URLs."},{"lineNumber":28,"author":{"gitId":"gok99"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"gok99"},"content":"    public static Map\u003cString, String\u003e getRemotes(String repoRoot) {"},{"lineNumber":30,"author":{"gitId":"gok99"},"content":"        Map\u003cString, String\u003e remotes \u003d new HashMap\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"gok99"},"content":"        String result;"},{"lineNumber":32,"author":{"gitId":"gok99"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"gok99"},"content":"            result \u003d CommandRunner.runCommand(Paths.get(repoRoot), \"git remote -v\");"},{"lineNumber":34,"author":{"gitId":"gok99"},"content":"        } catch (RuntimeException re) {"},{"lineNumber":35,"author":{"gitId":"gok99"},"content":"            logger.warning(String.format(\"Unable to run git remote command in directory: %s\", repoRoot));"},{"lineNumber":36,"author":{"gitId":"gok99"},"content":"            return remotes;"},{"lineNumber":37,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"gok99"},"content":""},{"lineNumber":39,"author":{"gitId":"gok99"},"content":"        Arrays.stream(result.split(\"\\n\"))"},{"lineNumber":40,"author":{"gitId":"gok99"},"content":"                .map(s -\u003e s.split(\"[ \\\\t]+\"))"},{"lineNumber":41,"author":{"gitId":"gok99"},"content":"                .forEach(l -\u003e {"},{"lineNumber":42,"author":{"gitId":"gok99"},"content":"                    if (l.length \u003d\u003d 3) {"},{"lineNumber":43,"author":{"gitId":"gok99"},"content":"                        // l[0]: remote name"},{"lineNumber":44,"author":{"gitId":"gok99"},"content":"                        // l[1]: remote URL"},{"lineNumber":45,"author":{"gitId":"gok99"},"content":"                        // l[2]: \u0027(fetch)\u0027 | \u0027(push)\u0027"},{"lineNumber":46,"author":{"gitId":"gok99"},"content":"                        remotes.put(l[0] + l[2], l[1]);"},{"lineNumber":47,"author":{"gitId":"gok99"},"content":"                    }"},{"lineNumber":48,"author":{"gitId":"gok99"},"content":"                });"},{"lineNumber":49,"author":{"gitId":"gok99"},"content":""},{"lineNumber":50,"author":{"gitId":"gok99"},"content":"        return remotes;"},{"lineNumber":51,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"gok99"},"content":""},{"lineNumber":53,"author":{"gitId":"gok99"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"gok99"},"content":"     * Finds an available fetch remote location in a given {@code remoteMap}, checking first for the default fetch"},{"lineNumber":55,"author":{"gitId":"gok99"},"content":"     * remote (origin)."},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"gok99"},"content":"     * @return an {@code Optional} of an available remote location."},{"lineNumber":58,"author":{"gitId":"gok99"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"gok99"},"content":"    public static Optional\u003cString\u003e getAvailableRemoteLocation(Map\u003cString, String\u003e remoteMap) {"},{"lineNumber":60,"author":{"gitId":"gok99"},"content":"        if (remoteMap.size() \u003d\u003d 0) {"},{"lineNumber":61,"author":{"gitId":"gok99"},"content":"            return Optional.empty();"},{"lineNumber":62,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"gok99"},"content":""},{"lineNumber":64,"author":{"gitId":"gok99"},"content":"        String remoteLocation \u003d remoteMap.containsKey(DEFAULT_FETCH_REMOTE)"},{"lineNumber":65,"author":{"gitId":"gok99"},"content":"                // Get default fetch remote if possible"},{"lineNumber":66,"author":{"gitId":"gok99"},"content":"                ? remoteMap.get(DEFAULT_FETCH_REMOTE)"},{"lineNumber":67,"author":{"gitId":"gok99"},"content":"                // Get any available remote otherwise"},{"lineNumber":68,"author":{"gitId":"gok99"},"content":"                : remoteMap.values().iterator().next();"},{"lineNumber":69,"author":{"gitId":"gok99"},"content":"        return Optional.of(remoteLocation);"},{"lineNumber":70,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"gok99"},"content":""},{"lineNumber":72,"author":{"gitId":"gok99"},"content":"}"}],"authorContributionMap":{"gok99":72}},{"path":"src/main/java/reposense/git/GitRevList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Contains git rev list related functionalities."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Git rev list is responsible for showing commit objects in reverse chronological order."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class GitRevList {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String REVISION_PATH_SEPARATOR \u003d \" -- \";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the latest commit hash at {@code branchName} before {@code date}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an empty {@code String} if {@code date} is null, or there is no such commit."},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param root The name of the working directory."},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param branchName The name of the branch to find the commit hash in."},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param date The cut-off date before which the commit hash must be found."},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param zoneId The timezone of the date."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static String getCommitHashUntilDate(String root, String branchName, LocalDateTime date, ZoneId zoneId) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (date \u003d\u003d null) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":36,"author":{"gitId":"gok99"},"content":"        String revListCommand \u003d \"git rev-list -1 --until\u003d\""},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"                + GitUtil.GIT_LOG_UNTIL_DATE_FORMAT.format(ZonedDateTime.of(date, zoneId))"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"                + \" \" + branchName + REVISION_PATH_SEPARATOR;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, revListCommand);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a list of commit hashes at the branch given by {@code branchName}, separated by newlines,"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * that are within the range of {@code startHash} and {@code endHash}."},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@code root} is the name of the working directory."},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Both the {@code startHash} and {@code endHash} are guaranteed to be in the list."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getCommitHashInRange(String root, String branchName, String startHash, String endHash) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (startHash \u003d\u003d null \u0026\u0026 endHash \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } else if (startHash \u003d\u003d null) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return endHash;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        } else if (endHash \u003d\u003d null) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return startHash;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String fromStartHash \u003d getAllCommitHashSince(root, branchName, startHash);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String fromEndHash \u003d getAllCommitHashSince(root, branchName, endHash);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // If invalid hashes were given, do not use the results obtained from rev-list"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (fromStartHash.equals(\"\") \u0026\u0026 fromEndHash.equals(\"\")) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } else if (fromStartHash.equals(\"\")) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return endHash;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        } else if (fromEndHash.equals(\"\")) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return startHash;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Perform a set difference in the list of commits to get the commits within the given range, since both lists"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // will have the list of commits starting from the given commit to HEAD, hence this removes the overlap part."},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Also ensure that both hashes are present in the final output"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (fromStartHash.length() \u003e fromEndHash.length()) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            output.append(endHash);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            output.append(fromStartHash.substring(fromEndHash.length()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            output.append(startHash);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            output.append(fromEndHash.substring(fromStartHash.length()));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return output.toString();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a list of commit hashes at the branch given by {@code branchName} separated by newlines that exist"},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * since {@code hash} until HEAD."},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The {@code root} is the name of the working directory."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static String getAllCommitHashSince(String root, String branchName, String hash) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String revListCommand \u003d \"git rev-list \" + hash + \"..HEAD \" + branchName + REVISION_PATH_SEPARATOR;"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return runCommand(rootPath, revListCommand) + hash;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            // An invalid commit hash was provided"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return \"\";"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a list of commit hashes for the root commits in the tree, with the {@link Path} given by {@code root}"},{"lineNumber":103,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * as working directory."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static List\u003cString\u003e getRootCommits(String root) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String revListCommand \u003d \"git rev-list --max-parents\u003d0 HEAD\";"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String output \u003d runCommand(rootPath, revListCommand);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return Arrays.asList(output.split(\"\\n\"));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns true if the repository is empty, with the {@link Path} given by {@code root} as working directory."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static boolean checkIsEmptyRepo(String root) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String revListCommand \u003d \"git rev-list -n 1 --all\";"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String output \u003d runCommand(rootPath, revListCommand);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return output \u003d\u003d null || output.trim().isEmpty();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":22,"gok99":1,"-":98}},{"path":"src/main/java/reposense/git/GitRevParse.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import reposense.system.CommandRunner;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Contains git rev parse related functionalities."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Git rev parse is responsible for verifying the existence of a particular branch."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GitRevParse {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Asserts that the branch in {@code config} exists, with {@code repoRoot} as working directory."},{"lineNumber":16,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws GitBranchException when the branch does not exist."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void assertBranchExists(RepoConfiguration config, Path repoRoot) throws GitBranchException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String command \u003d String.format(\"git rev-parse --verify %s\", config.getBranch());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            CommandRunner.runCommand(repoRoot, command);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (RuntimeException rte) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new GitBranchException(rte);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":2,"-":25}},{"path":"src/main/java/reposense/git/GitShortlog.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains git shortlog related functionalities."},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Git shortlog provides a summary of git log output."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class GitShortlog {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Extracts all the author identities from the repository and date range given in {@code config},"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * with the timezone taken into account."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static List\u003cAuthor\u003e getAuthors(RepoConfiguration config) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String summary \u003d getShortlogSummary("},{"lineNumber":29,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), config.getSinceDate(), config.getUntilDate(), config.getZoneId());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        if (summary.isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] lines \u003d summary.split(\"\\n\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Arrays.stream(lines)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .map(line -\u003e new Author(line.split(\"\\t\")[1]))"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Obtains summarized version of git log from the repository at {@code root} for the date range"},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * given by {@code sinceDate} and {@code untilDate}, with {@code zoneId} taken into account for both dates."},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static String getShortlogSummary(String root, LocalDateTime sinceDate, LocalDateTime untilDate,"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"            ZoneId zoneId) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String command \u003d \"git log --pretty\u003dshort\";"},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"        command +\u003d GitUtil.convertToGitDateRangeArgs(sinceDate, untilDate, zoneId);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        command +\u003d \" | git shortlog --summary\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, command);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":11,"-":43}},{"path":"src/main/java/reposense/git/GitShow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains git show related functionalities."},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Git show shows various types of objects."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class GitShow {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitShow.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns expanded form of the {@link CommitHash} associated with the {@code shortCommitHash}, with"},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * the {@link Path} given by {@code root} as the working directory."},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws CommitNotFoundException if there is no commit associated with {@code shortCommitHash}."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static CommitHash getExpandedCommitHash(String root, String shortCommitHash) throws CommitNotFoundException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String showCommand \u003d \"git show -s --format\u003d%H \" + shortCommitHash;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            String output \u003d runCommand(rootPath, showCommand);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            List\u003cCommitHash\u003e commitHashes \u003d Arrays.stream(output.split(\"\\n\"))"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .map(CommitHash::new).collect(Collectors.toList());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            if (commitHashes.size() \u003e 1) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                logger.warning(String.format(\"%s can be expanded to %d different commits, \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                                + \"assuming %s refers to commit hash %s\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"                        shortCommitHash, commitHashes.size(), shortCommitHash, commitHashes.get(0)));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            return commitHashes.get(0);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (RuntimeException re) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Commit not found: \" + shortCommitHash);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns {@link LocalDateTime} of the commit associated with commit hash, with {@link Path} given by {@code root}"},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * as the working directory."},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws CommitNotFoundException if no commit exists for the given {@code commitHash}."},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws ParseException if the date string for the given {@code commitHash} could not be parsed into"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * a {@link LocalDateTime} object."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getCommitDate(String root, String commitHash)"},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws CommitNotFoundException, ParseException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(root);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String showCommand \u003d \"git show -s --format\u003d%ci \" + commitHash;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            String output \u003d runCommand(rootPath, showCommand);"},{"lineNumber":67,"author":{"gitId":"yhtMinceraft1010X"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss Z\u0027\\n\u0027\");"},{"lineNumber":68,"author":{"gitId":"yhtMinceraft1010X"},"content":"            return LocalDateTime.parse(output, format);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        } catch (RuntimeException re) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Commit not found: \" + commitHash);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns {@link LocalDateTime} of the earliest commit out of the input list of commits in {@code commitHashes},"},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * with the {@code root} string denoting the working directory."},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws CommitNotFoundException if no commit exists for a given hash in {@code commitHashes}"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * or if no date string was successfully parsed to a {@link LocalDateTime} for earliest date."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getEarliestCommitDate(String root, List\u003cString\u003e commitHashes)"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws CommitNotFoundException {"},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime earliest \u003d null;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        for (String hash : commitHashes) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":"                LocalDateTime date \u003d getCommitDate(root, hash);"},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"                if (earliest \u003d\u003d null || date.compareTo(earliest) \u003c 0) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                    earliest \u003d date;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            } catch (CommitNotFoundException e) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                logger.warning(\"Commit not found: \" + hash);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            } catch (ParseException pe) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                logger.warning(\"Could not parse date for commit: \" + hash);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (earliest \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new CommitNotFoundException(\"Date could not be retrieved for all input commits\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return earliest;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":26,"-":76}},{"path":"src/main/java/reposense/git/GitUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.StringsUtil.addQuotes;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.FileSystem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.FileSystems;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.PathMatcher;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains Git related utilities."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"class GitUtil {"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"    static final DateTimeFormatter GIT_LOG_SINCE_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\");"},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"    static final DateTimeFormatter GIT_LOG_UNTIL_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\u0027T\u0027HH:mm:ssZ\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(GitUtil.class);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // ignore check against email"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String AUTHOR_NAME_PATTERN \u003d \"^%s \u003c.*\u003e$\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // ignore check against author name"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String AUTHOR_EMAIL_PATTERN \u003d \"^.* \u003c\\\\(.*+\\\\)\\\\?%s\u003e$\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String OR_OPERATOR_PATTERN \u003d \"\\\\|\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the {@code String} command to specify the date range of commits to analyze for `git` commands."},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Date range is given by {@code sinceDate} and {@code untilDate}, with {@code zoneId} taken into account."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"    static String convertToGitDateRangeArgs(LocalDateTime sinceDate, LocalDateTime untilDate, ZoneId zoneId) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String gitDateRangeArgs \u003d \"\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (sinceDate !\u003d null) {"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"            gitDateRangeArgs +\u003d \" --since\u003d\" + addQuotes(GIT_LOG_SINCE_DATE_FORMAT.format("},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    ZonedDateTime.of(sinceDate, zoneId)));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (untilDate !\u003d null) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"            gitDateRangeArgs +\u003d \" --until\u003d\" + addQuotes(GIT_LOG_UNTIL_DATE_FORMAT.format("},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    ZonedDateTime.of(untilDate, zoneId)));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return gitDateRangeArgs;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@code String} command to specify the {@code author} to analyze for `git log` command."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    static String convertToFilterAuthorArgs(Author author) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        StringBuilder filterAuthorArgsBuilder \u003d new StringBuilder(\" --author\u003d\\\"\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // git author names and emails may contain regex meta-characters, so we need to escape those"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        author.getAuthorAliases().stream()"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .map(authorAlias -\u003e String.format(AUTHOR_NAME_PATTERN,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                        StringsUtil.replaceSpecialSymbols(authorAlias, \".\")) + OR_OPERATOR_PATTERN)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .forEach(filterAuthorArgsBuilder::append);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        author.getEmails().stream()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .map(email -\u003e String.format(AUTHOR_EMAIL_PATTERN,"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                        StringsUtil.replaceSpecialSymbols(email, \".\")) + OR_OPERATOR_PATTERN)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .forEach(filterAuthorArgsBuilder::append);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        filterAuthorArgsBuilder.append("},{"lineNumber":76,"author":{"gitId":"-"},"content":"                String.format(AUTHOR_NAME_PATTERN,"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                        StringsUtil.replaceSpecialSymbols(author.getGitId(), \".\"))).append(\"\\\"\");"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return filterAuthorArgsBuilder.toString();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@code String} command to specify the file {@code formats} to analyze for `git` commands."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static String convertToGitFormatsArgs(List\u003cFileType\u003e formats) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        StringBuilder gitFormatsArgsBuilder \u003d new StringBuilder();"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"        final String cmdFormat \u003d \" -- \" + addQuotes(\"*.%s\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        formats.stream()"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .map(format -\u003e String.format(cmdFormat, format.toString()))"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .forEach(gitFormatsArgsBuilder::append);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return gitFormatsArgsBuilder.toString();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Returns the {@code String} command to specify the globs to exclude for `git log` command."},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Also checks that every glob in {@code ignoreGlobList} only targets files within the given"},{"lineNumber":97,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * repository\u0027s {@code root} directory."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static String convertToGitExcludeGlobArgs(File root, List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        StringBuilder gitExcludeGlobArgsBuilder \u003d new StringBuilder();"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"        final String cmdFormat \u003d \" \" + addQuotes(\":(exclude)%s\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        ignoreGlobList.stream()"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .filter(item -\u003e isValidIgnoreGlob(root, item))"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .map(ignoreGlob -\u003e String.format(cmdFormat, ignoreGlob))"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                .forEach(gitExcludeGlobArgsBuilder::append);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return gitExcludeGlobArgsBuilder.toString();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns true if the {@code ignoreGlob} is inside the current repository with reference to the {@code repoRoot}"},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * directory."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Produces log messages when the invalid {@code ignoreGlob} is skipped."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private static boolean isValidIgnoreGlob(File repoRoot, String ignoreGlob) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String validPath \u003d ignoreGlob;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        FileSystem fileSystem \u003d FileSystems.getDefault();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (ignoreGlob.isEmpty()) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        } else if (ignoreGlob.startsWith(\"/\") || ignoreGlob.startsWith(\"\\\\\")) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            // Ignore globs cannot start with a slash"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, ignoreGlob + \" cannot start with / or \\\\.\");"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } else if (ignoreGlob.contains(\"/*\") || ignoreGlob.contains(\"\\\\*\")) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            // contains directories"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            validPath \u003d ignoreGlob.substring(0, ignoreGlob.indexOf(\"/*\"));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        } else if (ignoreGlob.contains(\"*\")) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            // no directories"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String fileGlobPath \u003d \"glob:\" + repoRoot.getCanonicalPath().replaceAll(\"\\\\\\\\+\", \"\\\\/\") + \"/**\";"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            PathMatcher pathMatcher \u003d fileSystem.getPathMatcher(fileGlobPath);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            validPath \u003d new File(repoRoot, validPath).getCanonicalPath();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            if (pathMatcher.matches(Paths.get(validPath))) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, ioe.getMessage(), ioe);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        logger.log(Level.WARNING, ignoreGlob + \" will be skipped as this glob points to the outside of \""},{"lineNumber":145,"author":{"gitId":"-"},"content":"                + \"the repository.\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":5,"yhtMinceraft1010X":16,"-":127}},{"path":"src/main/java/reposense/git/GitVersion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Contains git version related functionalities."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Git version is responsible for finding out the version of git the user of RepoSense is running."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class GitVersion {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    /** Regex for finding Git Version. */"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    private static final Pattern GIT_VERSION_PATTERN \u003d"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"            Pattern.compile(\"^git version (?\u003cversionNumber\u003e\\\\d+)\\\\.(?\u003creleaseNumber\u003e\\\\d+).*?\\n?$\");"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    private static final String VERSION_NUMBER_GROUP \u003d \"versionNumber\";"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    private static final String RELEASE_NUMBER_GROUP \u003d \"releaseNumber\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Get current git version of RepoSense user."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getGitVersion() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Path rootPath \u003d Paths.get(\"/\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        String versionCommand \u003d \"git --version\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return runCommand(rootPath, versionCommand);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"     * Returns the version number and release number from a git version {@code commandOutput}."},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"     * Return type is a length 2 string array with the version number at index 0, release number at index 1."},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    protected static String[] getVersionNumberAndReleaseNumberFromString(String commandOutput) {"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        Matcher matcher \u003d GIT_VERSION_PATTERN.matcher(commandOutput);"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        matcher.matches();"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        return new String[] {matcher.group(VERSION_NUMBER_GROUP), matcher.group(RELEASE_NUMBER_GROUP)};"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"     * Returns true if the {@code commandOutput} version is at least as recent as the {@code versionString} version."},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"    protected static boolean isGitVersionOutputAtLeastVersion(String commandOutput, String versionString) {"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        String[] versionStringDetails \u003d versionString.split(\"\\\\.\");"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        int requiredVersionNumber \u003d Integer.parseInt(versionStringDetails[0]);"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        int requiredReleaseNumber \u003d Integer.parseInt(versionStringDetails[1]);"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"        String[] gitVersionCommandOutputDetails \u003d getVersionNumberAndReleaseNumberFromString(commandOutput);"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"        int actualVersionNumber \u003d Integer.parseInt(gitVersionCommandOutputDetails[0]);"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"        int actualReleaseNumber \u003d Integer.parseInt(gitVersionCommandOutputDetails[1]);"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        return actualVersionNumber \u003e requiredVersionNumber"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"                || actualVersionNumber \u003d\u003d requiredVersionNumber \u0026\u0026 actualReleaseNumber \u003e\u003d requiredReleaseNumber;"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"     * Returns true if the machine\u0027s Git version is at least as recent as {@code versionString}."},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"    public static boolean isGitVersionAtLeast(String versionString) {"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        return isGitVersionOutputAtLeastVersion(getGitVersion(), versionString);"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"     * Returns true if the machine\u0027s Git version is sufficient for finding previous authors."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static boolean isGitVersionSufficientForFindingPreviousAuthors() {"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"        return isGitVersionAtLeast(\"2.23\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":39,"yhtMinceraft1010X":1,"-":29}},{"path":"src/main/java/reposense/model/Author.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.FileSystems;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.PathMatcher;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a Git Author."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Author {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String NAME_NO_AUTHOR_WITH_COMMITS_FOUND \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"NO AUTHOR WITH COMMITS FOUND WITHIN THIS PERIOD OF TIME\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String UNKNOWN_AUTHOR_GIT_ID \u003d \"-\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String STANDARD_GITHUB_EMAIL_DOMAIN \u003d \"@users.noreply.github.com\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNCOMMON_EMAIL_PATTERN \u003d \"The provided email, %s, uses uncommon pattern.\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNCOMMON_GLOB_PATTERN \u003d \"The provided ignore glob, %s, uses uncommon pattern.\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String COMMON_EMAIL_REGEX \u003d"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \"^([a-zA-Z0-9_\\\\-\\\\.\\\\+]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String COMMON_GLOB_REGEX \u003d \"^[-a-zA-Z0-9 _/\\\\\\\\*!{}\\\\[\\\\]!(),:.]*$\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final Author UNKNOWN_AUTHOR \u003d new Author(UNKNOWN_AUTHOR_GIT_ID);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final String gitId;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e emails;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private transient String displayName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e authorAliases;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e ignoreGlobList;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private transient PathMatcher ignoreGlobMatcher;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public Author(String gitId) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.gitId \u003d gitId;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.emails \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.displayName \u003d gitId;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.authorAliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        addStandardGitHubEmail(this.emails);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        updateIgnoreGlobMatcher();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Author(StandaloneAuthor sa) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String gitId \u003d sa.getGithubId();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e(sa.getEmails());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String displayName \u003d !sa.getDisplayName().isEmpty() ? sa.getDisplayName() : sa.getGithubId();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cString\u003e authorAliases \u003d sa.getAuthorNames();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoreGlobList \u003d sa.getIgnoreGlobList();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.gitId \u003d gitId;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.displayName \u003d displayName;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.authorAliases \u003d authorAliases;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        setEmails(emails);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        setIgnoreGlobList(ignoreGlobList);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Author(Author another) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.gitId \u003d another.gitId;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.emails \u003d another.emails;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.displayName \u003d another.gitId;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.authorAliases \u003d another.authorAliases;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d another.ignoreGlobList;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.ignoreGlobMatcher \u003d another.ignoreGlobMatcher;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Checks that all the strings in the {@code emails} only contains commonly used email patterns."},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if any of the values do not meet the criteria."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static void validateEmails(List\u003cString\u003e emails) throws IllegalArgumentException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        for (String email : emails) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            if (!email.matches(COMMON_EMAIL_REGEX)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                throw new IllegalArgumentException(String.format(MESSAGE_UNCOMMON_EMAIL_PATTERN, email));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Checks that all the strings in the {@code ignoreGlobList} only contains commonly used glob patterns."},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if any of the values do not meet the criteria."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static void validateIgnoreGlobs(List\u003cString\u003e ignoreGlobList) throws IllegalArgumentException {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        for (String glob : ignoreGlobList) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            if (!glob.matches(COMMON_GLOB_REGEX)) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                throw new IllegalArgumentException(String.format(MESSAGE_UNCOMMON_GLOB_PATTERN, glob));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public String getGitId() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return gitId;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getEmails() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return emails;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void setEmails(List\u003cString\u003e emails) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        validateEmails(emails);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        this.emails \u003d new ArrayList\u003c\u003e(emails);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        addStandardGitHubEmail(this.emails);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public String getDisplayName() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return displayName;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void setDisplayName(String displayName) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        this.displayName \u003d displayName;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAuthorAliases() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return authorAliases;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void setAuthorAliases(List\u003cString\u003e authorAliases) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        this.authorAliases \u003d authorAliases;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreGlobList() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return ignoreGlobList;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        validateIgnoreGlobs(ignoreGlobList);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d new ArrayList\u003c\u003e(ignoreGlobList);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        updateIgnoreGlobMatcher();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Validates and adds {@code ignoreGlobList} into the {@link Author} class instance variable without duplicates"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * and updates the ignore glob matcher."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void importIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        validateIgnoreGlobs(ignoreGlobList);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        ignoreGlobList.forEach(ignoreGlob -\u003e {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            if (!this.ignoreGlobList.contains(ignoreGlob)) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                this.ignoreGlobList.add(ignoreGlob);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        updateIgnoreGlobMatcher();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Returns true if this author is ignoring the {@code filePath} based on its ignore glob matcher."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public boolean isIgnoringFile(Path filePath) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return ignoreGlobMatcher.matches(filePath);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        if (!(other instanceof Author)) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Author otherAuthor \u003d (Author) other;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return this.gitId.equalsIgnoreCase(otherAuthor.gitId);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return gitId !\u003d null ? gitId.toLowerCase().hashCode() : 0;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return gitId;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Updates the {@link PathMatcher} to the new ignore glob list set."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     * Called after a new ignore glob list is set."},{"lineNumber":184,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    private void updateIgnoreGlobMatcher() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        String globString \u003d \"glob:{\" + String.join(\",\", ignoreGlobList) + \"}\";"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        ignoreGlobMatcher \u003d FileSystems.getDefault().getPathMatcher(globString);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * Adds the standard github email to {@code emails} if doesn\u0027t exist."},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    private void addStandardGitHubEmail(List\u003cString\u003e emails) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        String standardGitHubEmail \u003d getGitId() + STANDARD_GITHUB_EMAIL_DOMAIN;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        if (!emails.contains(standardGitHubEmail)) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            emails.add(standardGitHubEmail);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"},{"lineNumber":200,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yhtMinceraft1010X":4,"-":196}},{"path":"src/main/java/reposense/model/AuthorConfiguration.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents author configuration information from CSV config file for a single repository."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AuthorConfiguration {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_BRANCH \u003d \"HEAD\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final boolean DEFAULT_HAS_AUTHOR_CONFIG_FILE \u003d false;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(AuthorConfiguration.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Pattern EMAIL_PLUS_OPERATOR_PATTERN \u003d"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Pattern.compile(\"^(?\u003cprefix\u003e.+)\\\\+(?\u003csuffix\u003e.*)(?\u003cdomain\u003e@.+)$\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static boolean hasAuthorConfigFile \u003d DEFAULT_HAS_AUTHOR_CONFIG_FILE;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private RepoLocation location;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private String branch;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private transient List\u003cAuthor\u003e authorList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private transient Map\u003cString, Author\u003e authorDetailsToAuthorMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private transient Map\u003cAuthor, String\u003e authorDisplayNameMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AuthorConfiguration(RepoLocation location) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(location, DEFAULT_BRANCH);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public AuthorConfiguration(RepoLocation location, String branch) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.location \u003d location;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.branch \u003d location.isEmpty() ? DEFAULT_BRANCH : branch;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Clears authors information and use the information provided from {@code standaloneConfig}. Also updates each"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * author\u0027s {@code ignoreGlobList}."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void update(StandaloneConfig standaloneConfig, List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e newAuthorList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Map\u003cString, Author\u003e newAuthorDetailsToAuthorMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, String\u003e newAuthorDisplayNameMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        for (StandaloneAuthor sa : standaloneConfig.getAuthors()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            Author author \u003d new Author(sa);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            author.importIgnoreGlobList(ignoreGlobList);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"            newAuthorList.add(author);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            newAuthorDisplayNameMap.put(author, author.getDisplayName());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            List\u003cString\u003e aliases \u003d new ArrayList\u003c\u003e(author.getAuthorAliases());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e(author.getEmails());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            aliases.add(author.getGitId());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            aliases.forEach(alias -\u003e {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                checkDuplicateAliases(newAuthorDetailsToAuthorMap, alias, author.getGitId());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                newAuthorDetailsToAuthorMap.put(alias, author);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            emails.forEach(email -\u003e newAuthorDetailsToAuthorMap.put(email, author));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        setAuthorList(newAuthorList);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setAuthorDetailsToAuthorMap(newAuthorDetailsToAuthorMap);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setAuthorDisplayNameMap(newAuthorDisplayNameMap);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Checks if {@code alias} of author with {@code gitId} is already being used by another author in"},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@code authorDetailsToAuthorMap} and generates warnings."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void checkDuplicateAliases(Map\u003cString, Author\u003e authorDetailsToAuthorMap, String alias, String gitId) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (authorDetailsToAuthorMap.containsKey(alias)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            logger.warning(String.format("},{"lineNumber":79,"author":{"gitId":"-"},"content":"                    \"Duplicate alias %s found. The alias will belong to the last author - %s\", alias, gitId));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!(other instanceof AuthorConfiguration)) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        AuthorConfiguration otherAuthorConfig \u003d (AuthorConfiguration) other;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return location.equals(otherAuthorConfig.location)"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                \u0026\u0026 branch.equals(otherAuthorConfig.branch)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                \u0026\u0026 authorList.equals(otherAuthorConfig.authorList)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                \u0026\u0026 authorDetailsToAuthorMap.equals(otherAuthorConfig.authorDetailsToAuthorMap)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                \u0026\u0026 authorDisplayNameMap.equals(otherAuthorConfig.authorDisplayNameMap);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public Map\u003cAuthor, String\u003e getAuthorDisplayNameMap() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return authorDisplayNameMap;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setAuthorDisplayNameMap(Map\u003cAuthor, String\u003e authorDisplayNameMap) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.authorDisplayNameMap \u003d authorDisplayNameMap;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public String getBranch() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return branch;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void setBranch(String branch) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        this.branch \u003d branch;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public List\u003cAuthor\u003e getAuthorList() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return authorList;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Sets the details of {@code author} to {@link AuthorConfiguration} including the default alias, aliases"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * and display name."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void setAuthorDetails(Author author) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // Set GitHub Id and its corresponding email as default"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        addAuthorDetailsToAuthorMapEntry(author, Arrays.asList(author.getGitId()));"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        addAuthorDetailsToAuthorMapEntry(author, author.getAuthorAliases());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        addAuthorDetailsToAuthorMapEntry(author, author.getEmails());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        setAuthorDisplayName(author, author.getDisplayName());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Propagates {@code ignoreGlobList} to {@code author}."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static void propagateIgnoreGlobList(Author author, List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        author.importIgnoreGlobList(ignoreGlobList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds author to the {@code authorList}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void addAuthor(Author author) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        authorList.add(author);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        setAuthorDetails(author);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds {@code author} to the {@code authorList}, and propagates {@code ignoreGlobList} to the {@code author}."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void addAuthor(Author author, List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        addAuthor(author);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        propagateIgnoreGlobList(author, ignoreGlobList);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Removes the authors provided in {@code ignoredAuthorsList} from the author list."},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void removeIgnoredAuthors(List\u003cString\u003e ignoredAuthorsList) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        for (String author : ignoredAuthorsList) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            if (authorDetailsToAuthorMap.containsKey(author)) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                removeAuthorInformation(author);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Removes all information of the {@code author} from the configs."},{"lineNumber":172,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Precondition: {@code author} must be present in {@code authorDetailsToAuthorMap}."},{"lineNumber":173,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param author Can be an author\u0027s git ID, email, or alias."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void removeAuthorInformation(String author) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        Author authorToRemove \u003d authorDetailsToAuthorMap.get(author);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        authorList.remove(authorToRemove);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        authorDisplayNameMap.remove(authorToRemove);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        authorDetailsToAuthorMap.remove(authorToRemove.getGitId());"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        List\u003cString\u003e aliases \u003d authorToRemove.getAuthorAliases();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        aliases.forEach(alias -\u003e authorDetailsToAuthorMap.remove(alias));"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        List\u003cString\u003e emails \u003d authorToRemove.getEmails();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        emails.forEach(email -\u003e authorDetailsToAuthorMap.remove(email));"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds new authors from {@code authorList}."},{"lineNumber":191,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Also sets the default alias, aliases, emails and display name as well as {@code ignoreGlobList} of the new"},{"lineNumber":192,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * authors. Skips the authors that have already been added previously."},{"lineNumber":193,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void addAuthors(List\u003cAuthor\u003e authorList, List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        for (Author author : authorList) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            if (containsAuthor(author)) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                logger.warning(String.format("},{"lineNumber":198,"author":{"gitId":"-"},"content":"                        \"Skipping author as %s already in repository %s %s\", author.getGitId(), location, branch));"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"            addAuthor(author, ignoreGlobList);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public boolean containsAuthor(Author author) {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        return authorList.contains(author);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void setAuthorList(List\u003cAuthor\u003e authorList) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        this.authorList \u003d authorList;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Clears author mapping information."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public void clear() {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        authorDetailsToAuthorMap.clear();"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        authorDisplayNameMap.clear();"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     * Resets author mapping information with the details of current author list."},{"lineNumber":224,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public void buildFromAuthorList() {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        authorList.forEach(this::setAuthorDetails);"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public Map\u003cString, Author\u003e getAuthorDetailsToAuthorMap() {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        return authorDetailsToAuthorMap;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public void setAuthorDetailsToAuthorMap(Map\u003cString, Author\u003e authorDetailsToAuthorMap) {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        this.authorDetailsToAuthorMap \u003d authorDetailsToAuthorMap;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    public void setAuthorDisplayName(Author author, String displayName) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        authorDisplayNameMap.put(author, displayName);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds {@code values} as aliases of {@code author} into the map."},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    public void addAuthorDetailsToAuthorMapEntry(Author author, List\u003cString\u003e values) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        values.forEach(value -\u003e {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            checkDuplicateAliases(authorDetailsToAuthorMap, value, author.getGitId());"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            authorDetailsToAuthorMap.put(value, author);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"    public RepoLocation getLocation() {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        return location;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Attempts to find matching {@link Author} given a {@code name} and an {@code email}."},{"lineNumber":257,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * If no matching {@link Author} is found, {@link Author#UNKNOWN_AUTHOR} is returned."},{"lineNumber":258,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    public Author getAuthor(String name, String email) {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        if (authorDetailsToAuthorMap.containsKey(name)) {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            return authorDetailsToAuthorMap.get(name);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        if (authorDetailsToAuthorMap.containsKey(email)) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            return authorDetailsToAuthorMap.get(email);"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        Matcher matcher \u003d EMAIL_PLUS_OPERATOR_PATTERN.matcher(email);"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"        if (matcher.matches()) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            return authorDetailsToAuthorMap.getOrDefault(matcher.group(\"suffix\") + matcher.group(\"domain\"),"},{"lineNumber":270,"author":{"gitId":"-"},"content":"                    Author.UNKNOWN_AUTHOR);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        return Author.UNKNOWN_AUTHOR;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    public boolean isDefaultBranch() {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        return this.branch.equals(DEFAULT_BRANCH);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    public static void setHasAuthorConfigFile(boolean hasAuthorConfigFile) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        AuthorConfiguration.hasAuthorConfigFile \u003d hasAuthorConfigFile;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"    public static boolean hasAuthorConfigFile() {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        return hasAuthorConfigFile;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":17,"-":269}},{"path":"src/main/java/reposense/model/CliArguments.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents command line arguments user supplied when running the program."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public abstract class CliArguments {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    protected Path outputFilePath;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    protected Path assetsFilePath;"},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"    protected LocalDateTime sinceDate;"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"    protected LocalDateTime untilDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    protected boolean isSinceDateProvided;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    protected boolean isUntilDateProvided;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    protected List\u003cFileType\u003e formats;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    protected boolean isLastModifiedDateIncluded;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    protected boolean isShallowCloningPerformed;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    protected boolean isAutomaticallyLaunching;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    protected boolean isStandaloneConfigIgnored;"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"    protected boolean isFileSizeLimitIgnored;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    protected int numCloningThreads;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    protected int numAnalysisThreads;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    protected ZoneId zoneId;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    protected boolean isFindingPreviousAuthorsPerformed;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public ZoneId getZoneId() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return zoneId;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public Path getOutputFilePath() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return outputFilePath;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Path getAssetsFilePath() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return assetsFilePath;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public LocalDateTime getSinceDate() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return sinceDate;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public LocalDateTime getUntilDate() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return untilDate;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean isSinceDateProvided() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return isSinceDateProvided;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean isUntilDateProvided() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return isUntilDateProvided;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean isLastModifiedDateIncluded() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return isLastModifiedDateIncluded;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean isShallowCloningPerformed() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return isShallowCloningPerformed;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getFormats() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return formats;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean isAutomaticallyLaunching() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return isAutomaticallyLaunching;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean isStandaloneConfigIgnored() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return isStandaloneConfigIgnored;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"gok99"},"content":"    public boolean isFileSizeLimitIgnored() {"},{"lineNumber":78,"author":{"gitId":"gok99"},"content":"        return isFileSizeLimitIgnored;"},{"lineNumber":79,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"gok99"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public int getNumCloningThreads() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return numCloningThreads;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int getNumAnalysisThreads() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return numAnalysisThreads;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public boolean isFindingPreviousAuthorsPerformed() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return isFindingPreviousAuthorsPerformed;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!(other instanceof CliArguments)) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CliArguments otherCliArguments \u003d (CliArguments) other;"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return this.outputFilePath.equals(otherCliArguments.outputFilePath)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.sinceDate.equals(otherCliArguments.sinceDate)"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.untilDate.equals(otherCliArguments.untilDate)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isSinceDateProvided \u003d\u003d otherCliArguments.isSinceDateProvided"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isUntilDateProvided \u003d\u003d otherCliArguments.isUntilDateProvided"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.formats.equals(otherCliArguments.formats)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isLastModifiedDateIncluded \u003d\u003d otherCliArguments.isLastModifiedDateIncluded"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isShallowCloningPerformed \u003d\u003d otherCliArguments.isShallowCloningPerformed"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isAutomaticallyLaunching \u003d\u003d otherCliArguments.isAutomaticallyLaunching"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isStandaloneConfigIgnored \u003d\u003d otherCliArguments.isStandaloneConfigIgnored"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.numCloningThreads \u003d\u003d otherCliArguments.numCloningThreads"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.numAnalysisThreads \u003d\u003d otherCliArguments.numAnalysisThreads"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.zoneId.equals(otherCliArguments.zoneId)"},{"lineNumber":120,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 this.isFindingPreviousAuthorsPerformed \u003d\u003d otherCliArguments.isFindingPreviousAuthorsPerformed"},{"lineNumber":121,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 this.isFileSizeLimitIgnored \u003d\u003d otherCliArguments.isFileSizeLimitIgnored;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":5,"gok99":7,"-":111}},{"path":"src/main/java/reposense/model/CommitHash.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.git.GitRevList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a git commit hash in {@code RepoConfiguration}."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CommitHash {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String COMMIT_HASH_REGEX \u003d \"^[0-9a-f]+$\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String COMMIT_RANGED_HASH_REGEX \u003d \"^[0-9a-f]+\\\\.\\\\.[0-9a-f]+$\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String INVALID_COMMIT_HASH_MESSAGE \u003d"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \"The provided commit hash, %s, contains illegal characters.\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private String commit;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommitHash(String commit) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        validateCommit(commit);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.commit \u003d commit;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return commit;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommitHash)) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        CommitHash otherCommit \u003d (CommitHash) other;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return this.commit.equals(otherCommit.commit);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return commit.hashCode();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Converts all the strings in {@code commits} into {@link CommitHash} objects."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns null if {@code commits} is null."},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if any of the strings are in invalid formats."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static List\u003cCommitHash\u003e convertStringsToCommits(List\u003cString\u003e commits) throws IllegalArgumentException {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (commits \u003d\u003d null) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return commits.stream()"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .map(CommitHash::new)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Converts a commit {@code entry} into either itself, or a stream of {@link CommitHash} objects if a range was"},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * provided."},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Uses {@code root} as the working directory and {@code branchName} as the branch from which to obtain the hashes."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static Stream\u003cCommitHash\u003e getHashes(String root, String branchName, CommitHash entry) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (entry.toString().matches(COMMIT_HASH_REGEX)) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return Stream.of(entry);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String[] startAndEnd \u003d entry.toString().split(\"\\\\.\\\\.\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String revList \u003d GitRevList.getCommitHashInRange(root, branchName, startAndEnd[0], startAndEnd[1]);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return Arrays.stream(revList.split(\"\\n\"))"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .map(CommitHash::new);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Checks if {@code commitList} contains {@code commitHash}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static boolean isInsideCommitList(String commitHash, List\u003cCommitHash\u003e commitList) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return commitList.stream().map(CommitHash::toString).anyMatch(commitHash::startsWith);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Checks that all the strings in the {@code ignoreCommitList} are in valid formats."},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if any of the values do not meet the criteria."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static void validateCommits(List\u003cString\u003e commits) throws IllegalArgumentException {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        for (String commitHash : commits) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            validateCommit(commitHash);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Checks that {@code commitHash} is in a valid format."},{"lineNumber":104,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code commitHash} does not meet the criteria."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static void validateCommit(String commitHash) throws IllegalArgumentException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!commitHash.matches(COMMIT_HASH_REGEX) \u0026\u0026 !commitHash.matches(COMMIT_RANGED_HASH_REGEX)) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(INVALID_COMMIT_HASH_MESSAGE, commitHash));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yhtMinceraft1010X":8,"-":105}},{"path":"src/main/java/reposense/model/ConfigCliArguments.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.parser.ReportConfigJsonParser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents command line arguments user supplied when running the program with mandatory field -config."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ConfigCliArguments extends CliArguments {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Path configFolderPath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Path repoConfigFilePath;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Path authorConfigFilePath;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Path groupConfigFilePath;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path reportConfigFilePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private ReportConfiguration reportConfiguration;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public ConfigCliArguments(Path configFolderPath, Path outputFilePath, Path assetsFilePath, LocalDateTime sinceDate,"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided, int numCloningThreads,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            int numAnalysisThreads, List\u003cFileType\u003e formats, boolean isLastModifiedDateIncluded,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            boolean isShallowCloningPerformed, boolean isAutomaticallyLaunching,"},{"lineNumber":31,"author":{"gitId":"gok99"},"content":"            boolean isStandaloneConfigIgnored, boolean isFileSizeLimitIgnored, ZoneId zoneId,"},{"lineNumber":32,"author":{"gitId":"gok99"},"content":"            ReportConfiguration reportConfiguration, boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.configFolderPath \u003d configFolderPath.equals(EMPTY_PATH)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                ? configFolderPath.toAbsolutePath()"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                : configFolderPath;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.repoConfigFilePath \u003d configFolderPath.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.authorConfigFilePath \u003d configFolderPath.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.groupConfigFilePath \u003d configFolderPath.resolve(GroupConfigCsvParser.GROUP_CONFIG_FILENAME);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.reportConfigFilePath \u003d configFolderPath.resolve(ReportConfigJsonParser.REPORT_CONFIG_FILENAME);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.outputFilePath \u003d outputFilePath;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.assetsFilePath \u003d assetsFilePath;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.isSinceDateProvided \u003d isSinceDateProvided;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.isUntilDateProvided \u003d isUntilDateProvided;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.formats \u003d formats;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.isLastModifiedDateIncluded \u003d isLastModifiedDateIncluded;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":51,"author":{"gitId":"gok99"},"content":"        this.isFileSizeLimitIgnored \u003d isFileSizeLimitIgnored;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.numCloningThreads \u003d numCloningThreads;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.numAnalysisThreads \u003d numAnalysisThreads;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.reportConfiguration \u003d reportConfiguration;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.isFindingPreviousAuthorsPerformed \u003d isFindingPreviousAuthorsPerformed;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Path getConfigFolderPath() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return configFolderPath;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Path getRepoConfigFilePath() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return repoConfigFilePath;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Path getAuthorConfigFilePath() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return authorConfigFilePath;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Path getGroupConfigFilePath() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return groupConfigFilePath;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Path getReportConfigFilePath() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return reportConfigFilePath;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public ReportConfiguration getReportConfiguration() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return reportConfiguration;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!(other instanceof ConfigCliArguments)) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        ConfigCliArguments otherConfigCliArguments \u003d (ConfigCliArguments) other;"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return super.equals(other)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.repoConfigFilePath.equals(otherConfigCliArguments.repoConfigFilePath)"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.authorConfigFilePath.equals(otherConfigCliArguments.authorConfigFilePath)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.groupConfigFilePath.equals(otherConfigCliArguments.groupConfigFilePath)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.reportConfigFilePath.equals(otherConfigCliArguments.reportConfigFilePath);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":3,"gok99":3,"-":97}},{"path":"src/main/java/reposense/model/FileType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.lang.reflect.Type;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.FileSystems;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.PathMatcher;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.google.gson.JsonElement;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.google.gson.JsonPrimitive;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSerializationContext;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSerializer;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents a file type for use in {@link FileTypeManager}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class FileType {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Pattern FILE_FORMAT_VALIDATION_PATTERN \u003d Pattern.compile(\"^\\\\w+$\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ILLEGAL_FILE_FORMAT \u003d \"The provided file format, %s, contains illegal \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"characters.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private String label;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e paths;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private PathMatcher pathsGlob;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public FileType(String label, List\u003cString\u003e paths) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        validateFileTypeLabel(label);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.label \u003d label;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        setPaths(paths);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a list of {@link FileType} from {@code formats}, with each {@link FileType}"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * containing the format name and associated files ending with the format."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static List\u003cFileType\u003e convertFormatStringsToFileTypes(List\u003cString\u003e formats) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return formats.stream().map(FileType::convertStringFormatToFileType).collect(Collectors.toList());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link FileType} with label named {@code format} and globs that include all files that end"},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * with {@code format}."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static FileType convertStringFormatToFileType(String format) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        validateFileFormat(format);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new FileType(format, Collections.singletonList(\"**\" + format));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Ensures that the string {@code label} is a valid file type."},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code label} is an empty string."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void validateFileTypeLabel(String label) throws IllegalArgumentException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (label.isEmpty()) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Ensures that {@code format} is a valid file format."},{"lineNumber":65,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code format} is not alphanumeric."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static void validateFileFormat(String format) throws IllegalArgumentException {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!FILE_FORMAT_VALIDATION_PATTERN.matcher(format).matches()) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(MESSAGE_ILLEGAL_FILE_FORMAT, format));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private void setPaths(List\u003cString\u003e paths) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.paths \u003d paths;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setPathsGlobMatcher(paths);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isFileGlobMatching(String fileName) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return pathsGlob.matches(Paths.get(fileName));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setPathsGlobMatcher(List\u003cString\u003e filePaths) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String globString \u003d \"glob:{\" + String.join(\",\", filePaths) + \"}\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.pathsGlob \u003d FileSystems.getDefault().getPathMatcher(globString);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return label;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this.label.hashCode();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!(other instanceof FileType)) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        FileType otherFileType \u003d (FileType) other;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return this.label.equals(otherFileType.label) \u0026\u0026 this.paths.equals(otherFileType.paths);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Overrides the Gson serializer to serialize only the label of each file type instead on the entire object."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static class FileTypeSerializer implements JsonSerializer\u003cFileType\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public JsonElement serialize(FileType fileType, Type typeOfSource, JsonSerializationContext context) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return new JsonPrimitive(fileType.toString());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"},{"lineNumber":123,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yhtMinceraft1010X":6,"-":117}},{"path":"src/main/java/reposense/model/FileTypeManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Holds a list of whitelisted formats and user-specified custom"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * groupings."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class FileTypeManager {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String DEFAULT_GROUP \u003d \"other\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final FileType DEFAULT_GROUP_TYPE \u003d new FileType(DEFAULT_GROUP, Collections.singletonList(\"**\"));"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private List\u003cFileType\u003e formats;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private List\u003cFileType\u003e groups;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public FileTypeManager(List\u003cFileType\u003e formats) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        this.formats \u003d formats;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        groups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the assigned file type of the file {@code fileName}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public FileType getFileType(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!hasCustomGroups()) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            return getFileFormat(fileName);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        FileType result \u003d DEFAULT_GROUP_TYPE;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        for (FileType group : groups) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            if (group.isFileGlobMatching(fileName)) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                result \u003d group;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return result;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the file format of the given {@code fileName}."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the file type \"other\" if the format of the file is not of the standard type."},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws AssertionError if whitelisted formats check somehow fails, which may be due to bugs."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private FileType getFileFormat(String fileName) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (hasSpecifiedFormats()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            for (FileType format : formats) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                if (format.isFileGlobMatching(fileName)) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                    return format;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new AssertionError("},{"lineNumber":54,"author":{"gitId":"-"},"content":"                    \"This exception should not happen as we have performed the whitelisted formats check.\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            String[] tok \u003d fileName.split(\"[./\\\\\\\\]+\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            String label \u003d tok[tok.length - 1];"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                FileType.validateFileFormat(label);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                return new FileType(label, Collections.singletonList(\"**\" + label));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            } catch (IllegalArgumentException iae) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                return DEFAULT_GROUP_TYPE;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getAllFileTypes() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return hasCustomGroups() ? groups : formats;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns true if the {@code fileName}\u0027s file type is inside the list of specified formats to be analyzed."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean isInsideWhitelistedFormats(String fileName) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return !hasSpecifiedFormats() || getFormats().stream().anyMatch(format -\u003e format.isFileGlobMatching(fileName));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getFormats() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return formats;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setFormats(List\u003cFileType\u003e formats) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.formats \u003d formats;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public boolean hasSpecifiedFormats() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return !formats.isEmpty();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getGroups() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return groups;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Adds new groups from {@code groupList}. Skips groups that have already been added previously."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void addGroups(List\u003cFileType\u003e groupList) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        groupList.stream().filter(group -\u003e !this.containsGroup(group)).forEach(groups::add);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public boolean containsGroup(FileType group) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return groups.contains(group);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setGroups(List\u003cFileType\u003e groups) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.groups \u003d groups;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private boolean hasCustomGroups() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return !groups.isEmpty();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!(other instanceof FileTypeManager)) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        FileTypeManager otherFileType \u003d (FileTypeManager) other;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return this.groups.equals(otherFileType.groups) \u0026\u0026 this.formats.equals(otherFileType.formats);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":3,"-":126}},{"path":"src/main/java/reposense/model/LocationsCliArguments.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents command line arguments user supplied when running the program with mandatory field -repos."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class LocationsCliArguments extends CliArguments {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e locations;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public LocationsCliArguments(List\u003cString\u003e locations, Path outputFilePath, Path assetsFilePath,"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime sinceDate, LocalDateTime untilDate, boolean isSinceDateProvided,"},{"lineNumber":16,"author":{"gitId":"yhtMinceraft1010X"},"content":"            boolean isUntilDateProvided, int numCloningThreads,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            int numAnalysisThreads, List\u003cFileType\u003e formats, boolean isLastModifiedDateIncluded,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            boolean isShallowCloningPerformed, boolean isAutomaticallyLaunching,"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":"            boolean isStandaloneConfigIgnored, boolean isFileSizeLimitIgnored, ZoneId zoneId,"},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"            boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.locations \u003d locations;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.outputFilePath \u003d outputFilePath;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.assetsFilePath \u003d assetsFilePath;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.isSinceDateProvided \u003d isSinceDateProvided;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.isUntilDateProvided \u003d isUntilDateProvided;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.isLastModifiedDateIncluded \u003d isLastModifiedDateIncluded;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.formats \u003d formats;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":33,"author":{"gitId":"gok99"},"content":"        this.isFileSizeLimitIgnored \u003d isFileSizeLimitIgnored;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.numCloningThreads \u003d numCloningThreads;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.numAnalysisThreads \u003d numAnalysisThreads;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.isFindingPreviousAuthorsPerformed \u003d isFindingPreviousAuthorsPerformed;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getLocations() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return locations;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof LocationsCliArguments)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        LocationsCliArguments otherLocationsCliArguments \u003d (LocationsCliArguments) other;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return super.equals(other)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.locations.equals(otherLocationsCliArguments.locations);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":4,"gok99":3,"-":54}},{"path":"src/main/java/reposense/model/RepoConfiguration.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.git.GitBranch;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents configuration information from CSV config file for a single repository."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class RepoConfiguration {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_BRANCH \u003d \"HEAD\";"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"    public static final long DEFAULT_FILE_SIZE_LIMIT \u003d 500000;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(RepoConfiguration.class);"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private RepoLocation location;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private String branch;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private String displayName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private String outputFolderName;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private transient ZoneId zoneId;"},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private transient LocalDateTime sinceDate;"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private transient LocalDateTime untilDate;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private transient String repoFolderName;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private transient FileTypeManager fileTypeManager;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e ignoreGlobList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e ignoredAuthorsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private transient AuthorConfiguration authorConfig;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private transient boolean isStandaloneConfigIgnored;"},{"lineNumber":40,"author":{"gitId":"gok99"},"content":"    private transient boolean isFileSizeLimitIgnored;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private transient List\u003cCommitHash\u003e ignoreCommitList;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private transient boolean isLastModifiedDateIncluded;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private transient boolean isShallowCloningPerformed;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private transient boolean isFindingPreviousAuthorsPerformed;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private transient boolean isFormatsOverriding;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private transient boolean isIgnoreGlobListOverriding;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private transient boolean isIgnoreCommitListOverriding;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private transient boolean isIgnoredAuthorsListOverriding \u003d false;"},{"lineNumber":49,"author":{"gitId":"gok99"},"content":"    private transient long fileSizeLimit;"},{"lineNumber":50,"author":{"gitId":"gok99"},"content":"    private transient boolean isFileSizeLimitOverriding;"},{"lineNumber":51,"author":{"gitId":"gok99"},"content":"    private transient boolean isIgnoredFileAnalysisSkipped;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public RepoConfiguration(RepoLocation location) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this(location, DEFAULT_BRANCH);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public RepoConfiguration(RepoLocation location, String branch) {"},{"lineNumber":58,"author":{"gitId":"gok99"},"content":"        this(location, branch, Collections.emptyList(), Collections.emptyList(),"},{"lineNumber":59,"author":{"gitId":"gok99"},"content":"                RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT, false, false, Collections.emptyList(), false, false, false,"},{"lineNumber":60,"author":{"gitId":"gok99"},"content":"                false, false, false, false);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public RepoConfiguration(RepoLocation location, String branch, List\u003cFileType\u003e formats, List\u003cString\u003e ignoreGlobList,"},{"lineNumber":64,"author":{"gitId":"gok99"},"content":"            long fileSizeLimit, boolean isStandaloneConfigIgnored, boolean isFileSizeLimitIgnored,"},{"lineNumber":65,"author":{"gitId":"gok99"},"content":"            List\u003cCommitHash\u003e ignoreCommitList, boolean isFormatsOverriding, boolean isIgnoreGlobListOverriding,"},{"lineNumber":66,"author":{"gitId":"gok99"},"content":"            boolean isIgnoreCommitListOverriding, boolean isFileSizeLimitOverriding, boolean isShallowCloningPerformed,"},{"lineNumber":67,"author":{"gitId":"gok99"},"content":"            boolean isFindingPreviousAuthorsPerformed, boolean isIgnoredFileAnalysisSkipped) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.authorConfig \u003d new AuthorConfiguration(location, branch);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.location \u003d location;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.branch \u003d location.isEmpty() ? DEFAULT_BRANCH : branch;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d ignoreGlobList;"},{"lineNumber":72,"author":{"gitId":"gok99"},"content":"        this.fileSizeLimit \u003d fileSizeLimit;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":74,"author":{"gitId":"gok99"},"content":"        this.isFileSizeLimitIgnored \u003d isFileSizeLimitIgnored;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.fileTypeManager \u003d new FileTypeManager(formats);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.ignoreCommitList \u003d ignoreCommitList;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.isFormatsOverriding \u003d isFormatsOverriding;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.isIgnoreGlobListOverriding \u003d isIgnoreGlobListOverriding;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.isIgnoreCommitListOverriding \u003d isIgnoreCommitListOverriding;"},{"lineNumber":80,"author":{"gitId":"gok99"},"content":"        this.isFileSizeLimitOverriding \u003d isFileSizeLimitOverriding;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        this.isFindingPreviousAuthorsPerformed \u003d isFindingPreviousAuthorsPerformed;"},{"lineNumber":83,"author":{"gitId":"gok99"},"content":"        this.isIgnoredFileAnalysisSkipped \u003d isIgnoredFileAnalysisSkipped;"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String organization \u003d location.getOrganization();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String repoName \u003d location.getRepoName();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        displayName \u003d repoName + \"[\" + branch + \"]\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        outputFolderName \u003d repoName + \"_\" + branch;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        repoFolderName \u003d repoName;"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"        if (!organization.isEmpty()) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            repoFolderName \u003d organization + \"_\" + repoFolderName;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            displayName \u003d organization + \"/\" + displayName;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            outputFolderName \u003d organization + \"_\" + outputFolderName;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void setDatesToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime sinceDate, LocalDateTime untilDate) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            config.setSinceDate(sinceDate);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            config.setUntilDate(untilDate);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void setZoneIdToRepoConfigs(List\u003cRepoConfiguration\u003e configs, ZoneId zoneId) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            config.setZoneId(zoneId);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static void setIsLastModifiedDateIncludedToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                                                                  boolean isLastModifiedDateIncluded) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            config.setIsLastModifiedDateIncluded(isLastModifiedDateIncluded);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static void setIsShallowCloningPerformedToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                                                                 boolean isShallowCloningPerformed) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (isShallowCloningPerformed) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            configs.stream().forEach(config -\u003e config.setIsShallowCloningPerformed(true));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public static void setIsFindingPreviousAuthorsPerformedToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                                                                         boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (isFindingPreviousAuthorsPerformed) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            configs.stream().forEach(config -\u003e config.setIsFindingPreviousAuthorsPerformed(true));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static void setToFalseIsFindingPreviousAuthorsPerformedToRepoConfigs(List\u003cRepoConfiguration\u003e configs) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        configs.stream().forEach(config -\u003e config.setIsFindingPreviousAuthorsPerformed(false));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Merges a {@link RepoConfiguration} from {@code repoConfigs} with an {@link AuthorConfiguration} from"},{"lineNumber":139,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@code authorConfigs} if their {@link RepoLocation} and branch matches."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static void merge(List\u003cRepoConfiguration\u003e repoConfigs, List\u003cAuthorConfiguration\u003e authorConfigs) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        for (AuthorConfiguration authorConfig : authorConfigs) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            if (authorConfig.getLocation().isEmpty()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                for (RepoConfiguration repoConfig : repoConfigs) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                    repoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e locationMatchingRepoConfigs \u003d"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    getMatchingRepoConfigsByLocation(repoConfigs, authorConfig.getLocation());"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"            if (locationMatchingRepoConfigs.isEmpty()) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                logger.warning(String.format("},{"lineNumber":155,"author":{"gitId":"-"},"content":"                        \"Repository %s is not found in repo-config.csv.\","},{"lineNumber":156,"author":{"gitId":"-"},"content":"                        authorConfig.getLocation()));"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            if (authorConfig.isDefaultBranch()) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                locationMatchingRepoConfigs.forEach(matchingRepoConfig -\u003e {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                    matchingRepoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                });"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"            RepoConfiguration branchMatchingRepoConfig \u003d getMatchingRepoConfig(repoConfigs, authorConfig);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"            if (branchMatchingRepoConfig \u003d\u003d null) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                if (!authorConfig.isDefaultBranch()) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                    logger.warning(String.format("},{"lineNumber":171,"author":{"gitId":"-"},"content":"                            \"Repository %s (branch %s) is not found in repo-config.csv.\","},{"lineNumber":172,"author":{"gitId":"-"},"content":"                            authorConfig.getLocation(), authorConfig.getBranch()));"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"            branchMatchingRepoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Sets the list of groups in {@code groupConfigs} to the respective {@code repoConfigs}."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public static void setGroupConfigsToRepos(List\u003cRepoConfiguration\u003e repoConfigs,"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            List\u003cGroupConfiguration\u003e groupConfigs) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        for (GroupConfiguration groupConfig : groupConfigs) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e matchingRepoConfigs;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            if (groupConfig.getLocation().isEmpty()) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                matchingRepoConfigs \u003d repoConfigs;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                matchingRepoConfigs \u003d getMatchingRepoConfigsByLocation(repoConfigs,"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                        groupConfig.getLocation());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            if (matchingRepoConfigs.isEmpty()) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                logger.warning(String.format("},{"lineNumber":196,"author":{"gitId":"-"},"content":"                        \"Repository %s is not found in repo-config.csv.\", groupConfig.getLocation()));"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            matchingRepoConfigs.forEach(matchingRepoConfig -\u003e {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                matchingRepoConfig.addGroups(groupConfig.getGroupsList());"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Iterates through {@code repoConfigs} to find a {@link RepoConfiguration} with {@link RepoLocation} and branch"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * that matches {@code authorConfig}. Returns {@code null} if no match is found."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static RepoConfiguration getMatchingRepoConfig(List\u003cRepoConfiguration\u003e repoConfigs,"},{"lineNumber":210,"author":{"gitId":"yhtMinceraft1010X"},"content":"            AuthorConfiguration authorConfig) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        if (authorConfig.isDefaultBranch()) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        for (RepoConfiguration repoConfig : repoConfigs) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            if (repoConfig.getLocation().equals(authorConfig.getLocation())"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                    \u0026\u0026 repoConfig.getBranch().equals(authorConfig.getBranch())) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                return repoConfig;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a list of {@link RepoConfiguration} where the {@link RepoLocation} of a {@link RepoConfiguration}"},{"lineNumber":225,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * in the list of {@code configs} matches {@code targetRepoLocation}."},{"lineNumber":226,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static List\u003cRepoConfiguration\u003e getMatchingRepoConfigsByLocation(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":228,"author":{"gitId":"yhtMinceraft1010X"},"content":"            RepoLocation targetRepoLocation) {"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        return configs.stream().filter(config -\u003e config.getLocation().equals(targetRepoLocation))"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Sets {@code formats} to {@link RepoConfiguration} in {@code configs} if its format list is empty."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public static void setFormatsToRepoConfigs(List\u003cRepoConfiguration\u003e configs, List\u003cFileType\u003e formats) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            if (!config.fileTypeManager.hasSpecifiedFormats()) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                config.fileTypeManager.setFormats(formats);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Sets each {@link RepoConfiguration} in {@code configs} to ignore its standalone config, if"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * {@code ignoreAllStandaloneConfigs} is true."},{"lineNumber":247,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void setStandaloneConfigIgnoredToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":249,"author":{"gitId":"yhtMinceraft1010X"},"content":"            boolean ignoreAllStandaloneConfigs) {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        if (ignoreAllStandaloneConfigs) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            configs.forEach(config -\u003e config.setStandaloneConfigIgnored(true));"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"gok99"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"gok99"},"content":"     * Sets each {@link RepoConfiguration} in {@code configs} to ignore its filesize limit, if"},{"lineNumber":257,"author":{"gitId":"gok99"},"content":"     * {@code ignoreFilesizeLimit} is true."},{"lineNumber":258,"author":{"gitId":"gok99"},"content":"     */"},{"lineNumber":259,"author":{"gitId":"gok99"},"content":"    public static void setFileSizeLimitIgnoredToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":260,"author":{"gitId":"gok99"},"content":"                                                            boolean ignoreFileSizeLimit) {"},{"lineNumber":261,"author":{"gitId":"gok99"},"content":"        if (ignoreFileSizeLimit) {"},{"lineNumber":262,"author":{"gitId":"gok99"},"content":"            configs.forEach(config -\u003e config.setFileSizeLimitIgnored(true));"},{"lineNumber":263,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":264,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"gok99"},"content":""},{"lineNumber":266,"author":{"gitId":"yhtMinceraft1010X"},"content":"    /**"},{"lineNumber":267,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Checks if any of the {@code configs} is finding previous authors for commit analysis."},{"lineNumber":268,"author":{"gitId":"yhtMinceraft1010X"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public static boolean isAnyRepoFindingPreviousAuthors(List\u003cRepoConfiguration\u003e configs) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        return configs.stream().anyMatch(RepoConfiguration::isFindingPreviousAuthorsPerformed);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Clears existing information related to this repository and its authors, and replaces it with information from"},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * {@code standaloneConfig}."},{"lineNumber":276,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    public void update(StandaloneConfig standaloneConfig) {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        // only assign the new values when all the fields in {@code standaloneConfig} pass the validations."},{"lineNumber":279,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e replacementFileTypes \u003d FileType.convertFormatStringsToFileTypes(standaloneConfig.getFormats());"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        CommitHash.validateCommits(standaloneConfig.getIgnoreCommitList());"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"        if (!isIgnoreGlobListOverriding) {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            ignoreGlobList \u003d standaloneConfig.getIgnoreGlobList();"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        if (!isFormatsOverriding) {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            fileTypeManager.setFormats(replacementFileTypes);"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        if (!isIgnoreCommitListOverriding) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"            ignoreCommitList \u003d CommitHash.convertStringsToCommits(standaloneConfig.getIgnoreCommitList());"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        if (!isIgnoredAuthorsListOverriding) {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            ignoredAuthorsList \u003d standaloneConfig.getIgnoreAuthorList();"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":294,"author":{"gitId":"gok99"},"content":"        if (!isFileSizeLimitOverriding) {"},{"lineNumber":295,"author":{"gitId":"gok99"},"content":"            fileSizeLimit \u003d standaloneConfig.getFileSizeLimit();"},{"lineNumber":296,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        authorConfig.update(standaloneConfig, ignoreGlobList);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":301,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the matching {@link Author} given a {@code name} and an {@code email}."},{"lineNumber":302,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * If no matching {@link Author} is found, {@link Author#UNKNOWN_AUTHOR} is returned."},{"lineNumber":303,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    public Author getAuthor(String name, String email) {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthor(name, email);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitId":"-"},"content":"     * Updates branch with {@code currentBranch} if default branch is specified."},{"lineNumber":310,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    public void updateBranch(String currentBranch) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        if (branch.equals(DEFAULT_BRANCH)) {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            setBranch(currentBranch);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":318,"author":{"gitId":"-"},"content":"     * Gets the current branch and updates branch with current branch if default branch is specified."},{"lineNumber":319,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":320,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws GitBranchException if current branch cannot be retrieved."},{"lineNumber":321,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    public void updateBranch() throws GitBranchException {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        if (branch.equals(DEFAULT_BRANCH)) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            String currentBranch \u003d GitBranch.getCurrentBranch(getRepoRoot());"},{"lineNumber":325,"author":{"gitId":"-"},"content":"            setBranch(currentBranch);"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":330,"author":{"gitId":"-"},"content":"     * Gets the path to the root folder of the repository."},{"lineNumber":331,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public String getRepoRoot() {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        String path \u003d FileUtil.REPOS_ADDRESS + File.separator + getRepoFolderName() + File.separator;"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"        if (!getRepoName().isEmpty()) {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"            path +\u003d getRepoName() + File.separator;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":343,"author":{"gitId":"-"},"content":"     * Gets the name of the folder containing the cloned repository; the parent directory of the repo\u0027s root folder."},{"lineNumber":344,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    public String getRepoFolderName() {"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        return repoFolderName;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":353,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"        if (!(other instanceof RepoConfiguration)) {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"        RepoConfiguration otherRepoConfig \u003d (RepoConfiguration) other;"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"        return location.equals(otherRepoConfig.location)"},{"lineNumber":363,"author":{"gitId":"-"},"content":"                \u0026\u0026 branch.equals(otherRepoConfig.branch)"},{"lineNumber":364,"author":{"gitId":"-"},"content":"                \u0026\u0026 authorConfig.equals(otherRepoConfig.authorConfig)"},{"lineNumber":365,"author":{"gitId":"-"},"content":"                \u0026\u0026 ignoreGlobList.equals(otherRepoConfig.ignoreGlobList)"},{"lineNumber":366,"author":{"gitId":"-"},"content":"                \u0026\u0026 ignoredAuthorsList.equals(otherRepoConfig.ignoredAuthorsList)"},{"lineNumber":367,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 fileSizeLimit \u003d\u003d otherRepoConfig.fileSizeLimit"},{"lineNumber":368,"author":{"gitId":"-"},"content":"                \u0026\u0026 isStandaloneConfigIgnored \u003d\u003d otherRepoConfig.isStandaloneConfigIgnored"},{"lineNumber":369,"author":{"gitId":"-"},"content":"                \u0026\u0026 fileTypeManager.equals(otherRepoConfig.fileTypeManager)"},{"lineNumber":370,"author":{"gitId":"-"},"content":"                \u0026\u0026 isLastModifiedDateIncluded \u003d\u003d otherRepoConfig.isLastModifiedDateIncluded"},{"lineNumber":371,"author":{"gitId":"-"},"content":"                \u0026\u0026 isFormatsOverriding \u003d\u003d otherRepoConfig.isFormatsOverriding"},{"lineNumber":372,"author":{"gitId":"-"},"content":"                \u0026\u0026 isShallowCloningPerformed \u003d\u003d otherRepoConfig.isShallowCloningPerformed"},{"lineNumber":373,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoreGlobListOverriding \u003d\u003d otherRepoConfig.isIgnoreGlobListOverriding"},{"lineNumber":374,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoreCommitListOverriding \u003d\u003d otherRepoConfig.isIgnoreCommitListOverriding"},{"lineNumber":375,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 isIgnoredAuthorsListOverriding \u003d\u003d otherRepoConfig.isIgnoredAuthorsListOverriding"},{"lineNumber":376,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 isFileSizeLimitOverriding \u003d\u003d otherRepoConfig.isFileSizeLimitOverriding"},{"lineNumber":377,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 isFileSizeLimitIgnored \u003d\u003d otherRepoConfig.isFileSizeLimitIgnored"},{"lineNumber":378,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 isIgnoredFileAnalysisSkipped \u003d\u003d otherRepoConfig.isIgnoredFileAnalysisSkipped;"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"    public Map\u003cAuthor, String\u003e getAuthorDisplayNameMap() {"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorDisplayNameMap();"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"    public void setAuthorDisplayNameMap(Map\u003cAuthor, String\u003e authorDisplayNameMap) {"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorDisplayNameMap(authorDisplayNameMap);"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"    public String getBranch() {"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        return branch;"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"    public void setBranch(String branch) {"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        updateDisplayName(branch);"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        updateOutputFolderName(branch);"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        this.branch \u003d branch;"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        authorConfig.setBranch(branch);"},{"lineNumber":398,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":401,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Updates the branch in the {@code displayName} to the current {@code branch}."},{"lineNumber":402,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":403,"author":{"gitId":"-"},"content":"    public void updateDisplayName(String branch) {"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        this.displayName \u003d displayName.substring(0, displayName.lastIndexOf(\u0027[\u0027) + 1) + branch + \"]\";"},{"lineNumber":405,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":408,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Updates the branch in the {@code outputFolderName} to the current {@code branch}."},{"lineNumber":409,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    public void updateOutputFolderName(String branch) {"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        this.outputFolderName \u003d outputFolderName.substring(0, outputFolderName.lastIndexOf(\u0027_\u0027) + 1) + branch;"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreGlobList() {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        return ignoreGlobList;"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d ignoreGlobList;"},{"lineNumber":420,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"    public List\u003cCommitHash\u003e getIgnoreCommitList() {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        return ignoreCommitList;"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"gok99"},"content":"    public long getFileSizeLimit() {"},{"lineNumber":427,"author":{"gitId":"gok99"},"content":"        return fileSizeLimit;"},{"lineNumber":428,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":429,"author":{"gitId":"gok99"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"    public void setIgnoreCommitList(List\u003cCommitHash\u003e ignoreCommitList) {"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        this.ignoreCommitList \u003d ignoreCommitList;"},{"lineNumber":432,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":433,"author":{"gitId":"-"},"content":""},{"lineNumber":434,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoredAuthorsList() {"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        return this.ignoredAuthorsList;"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":437,"author":{"gitId":"-"},"content":""},{"lineNumber":438,"author":{"gitId":"-"},"content":"    public void setIgnoredAuthorsList(List\u003cString\u003e ignoredAuthorsList) {"},{"lineNumber":439,"author":{"gitId":"-"},"content":"        this.ignoredAuthorsList \u003d ignoredAuthorsList;"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"    public boolean isIgnoredAuthorsListOverriding() {"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        return this.isIgnoredAuthorsListOverriding;"},{"lineNumber":444,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"    public void setIsLastModifiedDateIncluded(boolean lastModifiedDateIncluded) {"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        this.isLastModifiedDateIncluded \u003d lastModifiedDateIncluded;"},{"lineNumber":448,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"    public void setIsShallowCloningPerformed(boolean isShallowCloningPerformed) {"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":453,"author":{"gitId":"-"},"content":""},{"lineNumber":454,"author":{"gitId":"-"},"content":"    public void setIsFindingPreviousAuthorsPerformed(boolean isFindingPreviousAuthorsPerformed) {"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        this.isFindingPreviousAuthorsPerformed \u003d isFindingPreviousAuthorsPerformed;"},{"lineNumber":456,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":457,"author":{"gitId":"-"},"content":""},{"lineNumber":458,"author":{"gitId":"-"},"content":"    public boolean isLastModifiedDateIncluded() {"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        return this.isLastModifiedDateIncluded;"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":"    public boolean isShallowCloningPerformed() {"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        return this.isShallowCloningPerformed;"},{"lineNumber":464,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"    public void setIsIgnoredAuthorsListOverriding(boolean isIgnoredAuthorsListOverriding) {"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        this.isIgnoredAuthorsListOverriding \u003d isIgnoredAuthorsListOverriding;"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"-"},"content":"    public void removeIgnoredAuthors() {"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        authorConfig.removeIgnoredAuthors(ignoredAuthorsList);"},{"lineNumber":472,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"    public List\u003cAuthor\u003e getAuthorList() {"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorList();"},{"lineNumber":476,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"    public void addAuthor(Author author) {"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        authorConfig.addAuthor(author, this.getIgnoreGlobList());"},{"lineNumber":480,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"    public void addAuthors(List\u003cAuthor\u003e authorList) {"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        authorConfig.addAuthors(authorList, this.getIgnoreGlobList());"},{"lineNumber":484,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"    public void setAuthorConfiguration(AuthorConfiguration authorConfig) {"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        this.authorConfig \u003d authorConfig;"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        for (Author author : authorConfig.getAuthorList()) {"},{"lineNumber":489,"author":{"gitId":"-"},"content":"            AuthorConfiguration.propagateIgnoreGlobList(author, ignoreGlobList);"},{"lineNumber":490,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":491,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":492,"author":{"gitId":"-"},"content":""},{"lineNumber":493,"author":{"gitId":"-"},"content":"    public boolean containsAuthor(Author author) {"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        return authorConfig.containsAuthor(author);"},{"lineNumber":495,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":496,"author":{"gitId":"-"},"content":""},{"lineNumber":497,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":498,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Clears authors information and sets the {@code authorList} to {@link RepoConfiguration}."},{"lineNumber":499,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":500,"author":{"gitId":"-"},"content":"    public void setAuthorList(List\u003cAuthor\u003e authorList) {"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        authorConfig.clear();"},{"lineNumber":502,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorList(authorList);"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        authorConfig.buildFromAuthorList();"},{"lineNumber":504,"author":{"gitId":"-"},"content":"        authorList.forEach(author -\u003e AuthorConfiguration.propagateIgnoreGlobList(author, this.getIgnoreGlobList()));"},{"lineNumber":505,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":506,"author":{"gitId":"-"},"content":""},{"lineNumber":507,"author":{"gitId":"-"},"content":"    public Map\u003cString, Author\u003e getAuthorDetailsToAuthorMap() {"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorDetailsToAuthorMap();"},{"lineNumber":509,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"    public void setAuthorDetailsToAuthorMap(Map\u003cString, Author\u003e authorDetailsToAuthorMap) {"},{"lineNumber":512,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorDetailsToAuthorMap(authorDetailsToAuthorMap);"},{"lineNumber":513,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":514,"author":{"gitId":"-"},"content":""},{"lineNumber":515,"author":{"gitId":"-"},"content":"    public void setFormats(List\u003cFileType\u003e formats) {"},{"lineNumber":516,"author":{"gitId":"-"},"content":"        fileTypeManager.setFormats(formats);"},{"lineNumber":517,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"-"},"content":"    private void setGroups(List\u003cFileType\u003e groups) {"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        fileTypeManager.setGroups(groups);"},{"lineNumber":521,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":522,"author":{"gitId":"-"},"content":""},{"lineNumber":523,"author":{"gitId":"-"},"content":"    public void addGroups(List\u003cFileType\u003e groups) {"},{"lineNumber":524,"author":{"gitId":"-"},"content":"        fileTypeManager.addGroups(groups);"},{"lineNumber":525,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":526,"author":{"gitId":"-"},"content":""},{"lineNumber":527,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":528,"author":{"gitId":"-"},"content":"     * Returns all format or group types (depending on whether the user has specified a custom grouping)."},{"lineNumber":529,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":530,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getAllFileTypes() {"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        return fileTypeManager.getAllFileTypes();"},{"lineNumber":532,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"-"},"content":"    public FileType getFileType(String fileName) {"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        return fileTypeManager.getFileType(fileName);"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"-"},"content":"    public FileTypeManager getFileTypeManager() {"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        return fileTypeManager;"},{"lineNumber":540,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public LocalDateTime getSinceDate() {"},{"lineNumber":543,"author":{"gitId":"-"},"content":"        return sinceDate;"},{"lineNumber":544,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":545,"author":{"gitId":"-"},"content":""},{"lineNumber":546,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void setSinceDate(LocalDateTime sinceDate) {"},{"lineNumber":547,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":548,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":549,"author":{"gitId":"-"},"content":""},{"lineNumber":550,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public LocalDateTime getUntilDate() {"},{"lineNumber":551,"author":{"gitId":"-"},"content":"        return untilDate;"},{"lineNumber":552,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":553,"author":{"gitId":"-"},"content":""},{"lineNumber":554,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void setUntilDate(LocalDateTime untilDate) {"},{"lineNumber":555,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":556,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":557,"author":{"gitId":"-"},"content":""},{"lineNumber":558,"author":{"gitId":"-"},"content":"    public ZoneId getZoneId() {"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        return zoneId;"},{"lineNumber":560,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"    public void setZoneId(ZoneId zoneId) {"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":564,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":565,"author":{"gitId":"-"},"content":""},{"lineNumber":566,"author":{"gitId":"-"},"content":"    public void setAuthorDisplayName(Author author, String displayName) {"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorDisplayName(author, displayName);"},{"lineNumber":568,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":569,"author":{"gitId":"-"},"content":""},{"lineNumber":570,"author":{"gitId":"-"},"content":"    public void addAuthorDetailsToAuthorMapEntry(Author author, List\u003cString\u003e values) {"},{"lineNumber":571,"author":{"gitId":"-"},"content":"        authorConfig.addAuthorDetailsToAuthorMapEntry(author, values);"},{"lineNumber":572,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":573,"author":{"gitId":"-"},"content":""},{"lineNumber":574,"author":{"gitId":"-"},"content":"    public String getDisplayName() {"},{"lineNumber":575,"author":{"gitId":"-"},"content":"        return displayName;"},{"lineNumber":576,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":577,"author":{"gitId":"-"},"content":""},{"lineNumber":578,"author":{"gitId":"-"},"content":"    public String getRepoName() {"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        return location.getRepoName();"},{"lineNumber":580,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":581,"author":{"gitId":"-"},"content":""},{"lineNumber":582,"author":{"gitId":"-"},"content":"    public String getOutputFolderName() {"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        return outputFolderName;"},{"lineNumber":584,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":585,"author":{"gitId":"-"},"content":""},{"lineNumber":586,"author":{"gitId":"-"},"content":"    public void setStandaloneConfigIgnored(boolean isStandaloneConfigIgnored) {"},{"lineNumber":587,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":588,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":589,"author":{"gitId":"-"},"content":""},{"lineNumber":590,"author":{"gitId":"gok99"},"content":"    public void setFileSizeLimitIgnored(boolean isFileSizeLimitIgnored) {"},{"lineNumber":591,"author":{"gitId":"gok99"},"content":"        this.isFileSizeLimitIgnored \u003d isFileSizeLimitIgnored;"},{"lineNumber":592,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":593,"author":{"gitId":"gok99"},"content":""},{"lineNumber":594,"author":{"gitId":"-"},"content":"    public RepoLocation getLocation() {"},{"lineNumber":595,"author":{"gitId":"-"},"content":"        return location;"},{"lineNumber":596,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":597,"author":{"gitId":"-"},"content":""},{"lineNumber":598,"author":{"gitId":"-"},"content":"    public String getOrganization() {"},{"lineNumber":599,"author":{"gitId":"-"},"content":"        return location.getOrganization();"},{"lineNumber":600,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":601,"author":{"gitId":"-"},"content":""},{"lineNumber":602,"author":{"gitId":"-"},"content":"    public boolean isStandaloneConfigIgnored() {"},{"lineNumber":603,"author":{"gitId":"-"},"content":"        return isStandaloneConfigIgnored;"},{"lineNumber":604,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":605,"author":{"gitId":"-"},"content":""},{"lineNumber":606,"author":{"gitId":"gok99"},"content":"    public boolean isFileSizeLimitIgnored() {"},{"lineNumber":607,"author":{"gitId":"gok99"},"content":"        return isFileSizeLimitIgnored;"},{"lineNumber":608,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":609,"author":{"gitId":"gok99"},"content":""},{"lineNumber":610,"author":{"gitId":"gok99"},"content":"    public boolean isIgnoredFileAnalysisSkipped() {"},{"lineNumber":611,"author":{"gitId":"gok99"},"content":"        return isIgnoredFileAnalysisSkipped;"},{"lineNumber":612,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":613,"author":{"gitId":"gok99"},"content":""},{"lineNumber":614,"author":{"gitId":"-"},"content":"    public boolean isFormatsOverriding() {"},{"lineNumber":615,"author":{"gitId":"-"},"content":"        return isFormatsOverriding;"},{"lineNumber":616,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":617,"author":{"gitId":"-"},"content":""},{"lineNumber":618,"author":{"gitId":"-"},"content":"    public boolean isIgnoreGlobListOverriding() {"},{"lineNumber":619,"author":{"gitId":"-"},"content":"        return isIgnoreGlobListOverriding;"},{"lineNumber":620,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":621,"author":{"gitId":"-"},"content":""},{"lineNumber":622,"author":{"gitId":"-"},"content":"    public boolean isIgnoreCommitListOverriding() {"},{"lineNumber":623,"author":{"gitId":"-"},"content":"        return isIgnoreCommitListOverriding;"},{"lineNumber":624,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":625,"author":{"gitId":"-"},"content":""},{"lineNumber":626,"author":{"gitId":"gok99"},"content":"    public boolean isFileSizeLimitOverriding() {"},{"lineNumber":627,"author":{"gitId":"gok99"},"content":"        return isFileSizeLimitOverriding;"},{"lineNumber":628,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":629,"author":{"gitId":"gok99"},"content":""},{"lineNumber":630,"author":{"gitId":"-"},"content":"    public boolean isFindingPreviousAuthorsPerformed() {"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        return isFindingPreviousAuthorsPerformed;"},{"lineNumber":632,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"    public AuthorConfiguration getAuthorConfig() {"},{"lineNumber":635,"author":{"gitId":"-"},"content":"        return authorConfig;"},{"lineNumber":636,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":637,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":1,"yhtMinceraft1010X":33,"gok99":55,"-":548}},{"path":"src/main/java/reposense/model/RepoLocation.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.FileUtil.isValidPath;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import java.net.URI;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import java.net.URISyntaxException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import java.nio.file.FileSystems;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"gok99"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"gok99"},"content":"import reposense.git.GitRemote;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.parser.InvalidLocationException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents a repository location."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class RepoLocation {"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    protected static final String UNSUPPORTED_DOMAIN_NAME \u003d \"NOT_RECOGNIZED\";"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_LOCATION \u003d \"%s is an invalid location.\";"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private static final String MESSAGE_INVALID_REMOTE_URL \u003d \"%s is an invalid remote URL.\";"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    private static final String REPO_NAME_REGEX \u003d \"(?\u003crepoName\u003e[^/]+?)(/?\\\\.git)?/?\";"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    private static final String PATH_TO_REPO_REGEX \u003d \"(?\u003cpath\u003e.*?)/?\" + REPO_NAME_REGEX;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern GIT_REPOSITORY_LOCATION_PATTERN \u003d"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"            Pattern.compile(\"^(ssh|git|https?|ftps?)://(?\u003cdomain\u003e[^/]*?)/\" + PATH_TO_REPO_REGEX + \"$\");"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    private static final Pattern SCP_LIKE_SSH_REPOSITORY_LOCATION_PATTERN \u003d"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"            Pattern.compile(\"^(.*@)?(?\u003cdomain\u003e.*?):(?\u003cpath\u003e[^/].*?)??/??\" + REPO_NAME_REGEX + \"$\");"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    private static final Pattern LOCAL_REPOSITORY_NON_WINDOWS_LOCATION_PATTERN \u003d"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"            Pattern.compile(\"^(file://)?\" + PATH_TO_REPO_REGEX + \"$\");"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    private static final Pattern LOCAL_REPOSITORY_WINDOWS_LOCATION_PATTERN \u003d"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"            Pattern.compile(\"^\" + PATH_TO_REPO_REGEX.replaceAll(\"/\", \"\\\\\\\\\\\\\\\\\") + \"$\");"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"    private static final Pattern DOMAIN_NAME_PATTERN \u003d Pattern.compile(\"^(ww.\\\\.)?+(.*@)?(?\u003cdomainName\u003e[^.]+)\\\\..+$\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"    private static final String GROUP_REPO_NAME \u003d \"repoName\";"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"    private static final String GROUP_PATH \u003d \"path\";"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"    private static final String GROUP_DOMAIN_NAME \u003d \"domainName\";"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    private static final String GROUP_DOMAIN \u003d \"domain\";"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    private static final String PATH_SEPARATOR_REPLACEMENT \u003d \"-\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"gok99"},"content":"    // Used for remote link generation (serialized)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private final String location;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private final String repoName;"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    private final String organization;"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"    private final String domainName;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"gok99"},"content":"    // Used for generation of local repository report output directory"},{"lineNumber":55,"author":{"gitId":"gok99"},"content":"    private final transient String outputFolderRepoName;"},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"    private final transient String outputFolderOrganization;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates {@link RepoLocation} based on the {@code location}, which is represented by a {@code URL}"},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * or {@link Path}."},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws InvalidLocationException if {@code location} cannot be represented by a {@code URL} or {@link Path}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public RepoLocation(String location) throws InvalidLocationException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (SystemUtil.isWindows()) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            location \u003d StringsUtil.removeTrailingBackslash(location);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.location \u003d location;"},{"lineNumber":70,"author":{"gitId":"gok99"},"content":"        String[] remoteRepoNameAndOrg;"},{"lineNumber":71,"author":{"gitId":"gok99"},"content":"        String[] outputFolderRepoNameAndOrg;"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"        if (location.isEmpty()) {"},{"lineNumber":73,"author":{"gitId":"gok99"},"content":"            remoteRepoNameAndOrg \u003d new String[] {\"\", \"\", UNSUPPORTED_DOMAIN_NAME};"},{"lineNumber":74,"author":{"gitId":"gok99"},"content":"            outputFolderRepoNameAndOrg \u003d remoteRepoNameAndOrg;"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"        } else if (isLocalRepo(location)) {"},{"lineNumber":76,"author":{"gitId":"gok99"},"content":"            outputFolderRepoNameAndOrg \u003d getLocalRepoNameAndOrg(location);"},{"lineNumber":77,"author":{"gitId":"gok99"},"content":""},{"lineNumber":78,"author":{"gitId":"gok99"},"content":"            Map\u003cString, String\u003e remotes \u003d GitRemote.getRemotes(location);"},{"lineNumber":79,"author":{"gitId":"gok99"},"content":"            String newLocation \u003d GitRemote.getAvailableRemoteLocation(remotes).orElse(location);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"gok99"},"content":"            remoteRepoNameAndOrg \u003d remotes.size() \u003d\u003d 0"},{"lineNumber":82,"author":{"gitId":"gok99"},"content":"                ? outputFolderRepoNameAndOrg"},{"lineNumber":83,"author":{"gitId":"gok99"},"content":"                : getRemoteRepoNameAndOrg(newLocation);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"gok99"},"content":"            remoteRepoNameAndOrg \u003d getRemoteRepoNameAndOrg(location);"},{"lineNumber":86,"author":{"gitId":"gok99"},"content":"            outputFolderRepoNameAndOrg \u003d remoteRepoNameAndOrg;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"gok99"},"content":"        this.repoName \u003d remoteRepoNameAndOrg[0];"},{"lineNumber":90,"author":{"gitId":"gok99"},"content":"        this.organization \u003d remoteRepoNameAndOrg[1];"},{"lineNumber":91,"author":{"gitId":"gok99"},"content":"        this.domainName \u003d remoteRepoNameAndOrg[2];"},{"lineNumber":92,"author":{"gitId":"gok99"},"content":""},{"lineNumber":93,"author":{"gitId":"gok99"},"content":"        this.outputFolderRepoName \u003d outputFolderRepoNameAndOrg[0];"},{"lineNumber":94,"author":{"gitId":"gok99"},"content":"        this.outputFolderOrganization \u003d outputFolderRepoNameAndOrg[1];"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean isEmpty() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return location.isEmpty();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public String getRepoName() {"},{"lineNumber":102,"author":{"gitId":"gok99"},"content":"        return outputFolderRepoName;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public String getOrganization() {"},{"lineNumber":106,"author":{"gitId":"gok99"},"content":"        return outputFolderOrganization;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"    public String getDomainName() {"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"        return domainName;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"     * Returns true if {@code repoArgument} is a valid local repository argument."},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"     * This implementation follows directly from the {@code git clone}"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"     * \u003ca href\u003d\"https://git-scm.com/docs/git-clone#_git_urls\"\u003especification\u003c/a\u003e."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"    public static boolean isLocalRepo(String repoArgument) {"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"        if (!repoArgument.contains(\":\")) {"},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"        boolean hasSlashBeforeFirstColon \u003d repoArgument.split(\":\", 2)[0].contains(\"/\");"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"        if (hasSlashBeforeFirstColon) {"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":"            return true;"},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"        // checks if it is a URL file protocol"},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"        String urlProtocol \u003d repoArgument.split(\"://\", 2)[0];"},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":"        if (urlProtocol.equals(\"file\")) {"},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":"            return true;"},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"        // catch disk drive arguments such as C:\\"},{"lineNumber":135,"author":{"gitId":"chan-j-d"},"content":"        if (SystemUtil.isWindows() \u0026\u0026 isValidPath(repoArgument)) {"},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":"        return false;"},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"     * Returns a best-guess repo name and organization from the given local repo {@code location}."},{"lineNumber":144,"author":{"gitId":"gok99"},"content":"     * The return is a length-3 string array with the repo name at index 0, organization at index 1"},{"lineNumber":145,"author":{"gitId":"gok99"},"content":"     * and domain name (unsupported domain) at index 2."},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidLocationException if the location specified is not a proper local repository."},{"lineNumber":148,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"chan-j-d"},"content":"    private String[] getLocalRepoNameAndOrg(String location) throws InvalidLocationException {"},{"lineNumber":150,"author":{"gitId":"chan-j-d"},"content":"        boolean isWindows \u003d SystemUtil.isWindows();"},{"lineNumber":151,"author":{"gitId":"chan-j-d"},"content":"        if (isWindows) {"},{"lineNumber":152,"author":{"gitId":"chan-j-d"},"content":"            location \u003d location.replaceAll(\"file://\", \"\");"},{"lineNumber":153,"author":{"gitId":"chan-j-d"},"content":"            location \u003d location.replaceAll(\"/\", \"\\\\\\\\\");"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"            location \u003d location.replaceAll(\"[|:]\", \"-\");"},{"lineNumber":155,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":"        Pattern localRepoPattern \u003d isWindows"},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":"                ? LOCAL_REPOSITORY_WINDOWS_LOCATION_PATTERN"},{"lineNumber":158,"author":{"gitId":"chan-j-d"},"content":"                : LOCAL_REPOSITORY_NON_WINDOWS_LOCATION_PATTERN;"},{"lineNumber":159,"author":{"gitId":"chan-j-d"},"content":"        Matcher localRepoMatcher \u003d localRepoPattern.matcher(location);"},{"lineNumber":160,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":161,"author":{"gitId":"chan-j-d"},"content":"        if (!localRepoMatcher.matches()) {"},{"lineNumber":162,"author":{"gitId":"chan-j-d"},"content":"            ErrorSummary.getInstance().addErrorMessage(location,"},{"lineNumber":163,"author":{"gitId":"chan-j-d"},"content":"                    String.format(MESSAGE_INVALID_LOCATION, location));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new InvalidLocationException(String.format(MESSAGE_INVALID_LOCATION, location));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":167,"author":{"gitId":"chan-j-d"},"content":"        String tempRepoName \u003d localRepoMatcher.group(GROUP_REPO_NAME);"},{"lineNumber":168,"author":{"gitId":"chan-j-d"},"content":"        String tempOrganization \u003d getOrganizationFromMatcher(localRepoMatcher);"},{"lineNumber":169,"author":{"gitId":"chan-j-d"},"content":"        return new String[] {tempRepoName, tempOrganization, UNSUPPORTED_DOMAIN_NAME};"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"gok99"},"content":"     * Returns a best-guess repo name, organization and domain name from the given remote repo"},{"lineNumber":174,"author":{"gitId":"gok99"},"content":"     * {@code location}. The return is a length-3 string array with the repo name at index 0,"},{"lineNumber":175,"author":{"gitId":"gok99"},"content":"     * organization at index 1 and domain name at index 2."},{"lineNumber":176,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidLocationException if the location specified is not a proper remote repository."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"chan-j-d"},"content":"    private String[] getRemoteRepoNameAndOrg(String location) throws InvalidLocationException {"},{"lineNumber":180,"author":{"gitId":"chan-j-d"},"content":"        Matcher remoteRepoMatcher \u003d GIT_REPOSITORY_LOCATION_PATTERN.matcher(location);"},{"lineNumber":181,"author":{"gitId":"chan-j-d"},"content":"        Matcher sshRepoMatcher \u003d SCP_LIKE_SSH_REPOSITORY_LOCATION_PATTERN.matcher(location);"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"chan-j-d"},"content":"        boolean isNormalUrl \u003d remoteRepoMatcher.matches();"},{"lineNumber":184,"author":{"gitId":"chan-j-d"},"content":"        if (isNormalUrl) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":186,"author":{"gitId":"chan-j-d"},"content":"                new URI(location);"},{"lineNumber":187,"author":{"gitId":"chan-j-d"},"content":"            } catch (URISyntaxException e) {"},{"lineNumber":188,"author":{"gitId":"chan-j-d"},"content":"                ErrorSummary.getInstance().addErrorMessage(location,"},{"lineNumber":189,"author":{"gitId":"chan-j-d"},"content":"                        String.format(MESSAGE_INVALID_REMOTE_URL, location));"},{"lineNumber":190,"author":{"gitId":"chan-j-d"},"content":"                throw new InvalidLocationException(String.format(MESSAGE_INVALID_REMOTE_URL, location));"},{"lineNumber":191,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":192,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"chan-j-d"},"content":"        boolean isValidRemoteRepoUrl \u003d remoteRepoMatcher.matches() || sshRepoMatcher.matches();"},{"lineNumber":194,"author":{"gitId":"chan-j-d"},"content":"        if (!isValidRemoteRepoUrl) {"},{"lineNumber":195,"author":{"gitId":"chan-j-d"},"content":"            ErrorSummary.getInstance().addErrorMessage(location,"},{"lineNumber":196,"author":{"gitId":"chan-j-d"},"content":"                    String.format(MESSAGE_INVALID_REMOTE_URL, location));"},{"lineNumber":197,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidLocationException(String.format(MESSAGE_INVALID_REMOTE_URL, location));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"chan-j-d"},"content":"        // priority for standard URL matches over SSH as SSH matcher will normally also match standard URL"},{"lineNumber":201,"author":{"gitId":"chan-j-d"},"content":"        Matcher actualMatcher \u003d remoteRepoMatcher.matches() ? remoteRepoMatcher : sshRepoMatcher;"},{"lineNumber":202,"author":{"gitId":"chan-j-d"},"content":"        String tempRepoName \u003d actualMatcher.group(GROUP_REPO_NAME);"},{"lineNumber":203,"author":{"gitId":"chan-j-d"},"content":"        String tempOrganization \u003d getOrganizationFromMatcher(actualMatcher);"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"chan-j-d"},"content":"        return new String[] {tempRepoName, tempOrganization,"},{"lineNumber":206,"author":{"gitId":"chan-j-d"},"content":"                getDomainNameFromDomain(actualMatcher.group(GROUP_DOMAIN))};"},{"lineNumber":207,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":209,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"chan-j-d"},"content":"     * Returns the organization string from the {@code matcher} if one exists."},{"lineNumber":211,"author":{"gitId":"chan-j-d"},"content":"     * If no match was found for it, returns an empty string instead."},{"lineNumber":212,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"chan-j-d"},"content":"    private static String getOrganizationFromMatcher(Matcher matcher) {"},{"lineNumber":214,"author":{"gitId":"chan-j-d"},"content":"        return Optional.ofNullable(matcher.group(GROUP_PATH))"},{"lineNumber":215,"author":{"gitId":"chan-j-d"},"content":"                .map(s -\u003e Paths.get(s).normalize().toString())"},{"lineNumber":216,"author":{"gitId":"chan-j-d"},"content":"                .map(s -\u003e s.replaceAll(Pattern.quote(FileSystems.getDefault().getSeparator()),"},{"lineNumber":217,"author":{"gitId":"chan-j-d"},"content":"                        PATH_SEPARATOR_REPLACEMENT))"},{"lineNumber":218,"author":{"gitId":"chan-j-d"},"content":"                .orElse(\"\");"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":221,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"chan-j-d"},"content":"     * Returns the domain name of the URL from the {@code matcher} if it is one of the recognised ones."},{"lineNumber":223,"author":{"gitId":"chan-j-d"},"content":"     * Returns {@code UNRECOGNISED_DOMAIN_NAME} if it is a local repo or not recognised."},{"lineNumber":224,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"chan-j-d"},"content":"     * @throws InvalidLocationException if the domain specified is not a proper domain name."},{"lineNumber":226,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"chan-j-d"},"content":"    public static String getDomainNameFromDomain(String domain) throws InvalidLocationException {"},{"lineNumber":228,"author":{"gitId":"chan-j-d"},"content":"        Matcher domainNameMatcher \u003d DOMAIN_NAME_PATTERN.matcher(domain);"},{"lineNumber":229,"author":{"gitId":"chan-j-d"},"content":"        if (!domainNameMatcher.matches()) {"},{"lineNumber":230,"author":{"gitId":"chan-j-d"},"content":"            throw new InvalidLocationException(MESSAGE_INVALID_REMOTE_URL);"},{"lineNumber":231,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":232,"author":{"gitId":"chan-j-d"},"content":"        String domainName \u003d domainNameMatcher.group(GROUP_DOMAIN_NAME);"},{"lineNumber":233,"author":{"gitId":"chan-j-d"},"content":"        return isSupportedDomainName(domainName)"},{"lineNumber":234,"author":{"gitId":"chan-j-d"},"content":"                ? domainName"},{"lineNumber":235,"author":{"gitId":"chan-j-d"},"content":"                : UNSUPPORTED_DOMAIN_NAME;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"chan-j-d"},"content":"    private static boolean isSupportedDomainName(String domainName) {"},{"lineNumber":239,"author":{"gitId":"chan-j-d"},"content":"        return SupportedDomainUrlMap.isSupportedDomainName(domainName);"},{"lineNumber":240,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        return location;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        if (!(other instanceof RepoLocation)) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"        RepoLocation otherLocation \u003d (RepoLocation) other;"},{"lineNumber":260,"author":{"gitId":"chan-j-d"},"content":"        return this.location.equals(otherLocation.location)"},{"lineNumber":261,"author":{"gitId":"chan-j-d"},"content":"                \u0026\u0026 this.repoName.equals(otherLocation.repoName)"},{"lineNumber":262,"author":{"gitId":"chan-j-d"},"content":"                \u0026\u0026 this.organization.equals(otherLocation.organization)"},{"lineNumber":263,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 this.domainName.equals(otherLocation.domainName)"},{"lineNumber":264,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 this.outputFolderRepoName.equals(otherLocation.outputFolderRepoName)"},{"lineNumber":265,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 this.outputFolderOrganization.equals(otherLocation.outputFolderOrganization);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        return location.hashCode();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":139,"yhtMinceraft1010X":5,"gok99":35,"-":93}},{"path":"src/main/java/reposense/model/StandaloneAuthor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Represents an author in {@link StandaloneConfig}."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class StandaloneAuthor {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private String githubId;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e emails;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String displayName;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e authorNames;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e ignoreGlobList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public String getGithubId() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return githubId;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getEmails() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return (emails \u003d\u003d null) ? Collections.emptyList() : emails;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public String getDisplayName() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return (displayName \u003d\u003d null) ? \"\" : displayName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAuthorNames() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return (authorNames \u003d\u003d null) ? Collections.emptyList() : authorNames;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreGlobList() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return (ignoreGlobList \u003d\u003d null) ? Collections.emptyList() : ignoreGlobList;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!(other instanceof StandaloneAuthor)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StandaloneAuthor otherStandaloneAuthor \u003d (StandaloneAuthor) other;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return githubId.equals(otherStandaloneAuthor.githubId)"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                \u0026\u0026 getEmails().equals(otherStandaloneAuthor.getEmails())"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 getDisplayName().equals(otherStandaloneAuthor.getDisplayName())"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \u0026\u0026 getAuthorNames().equals(otherStandaloneAuthor.getAuthorNames())"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 getIgnoreGlobList().equals(otherStandaloneAuthor.getIgnoreGlobList());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":52}},{"path":"src/main/java/reposense/model/StandaloneConfig.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Represents the structure of a config.json in the _reposense folder."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class StandaloneConfig {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private List\u003cStandaloneAuthor\u003e authors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e ignoreGlobList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e formats;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e ignoreCommitsList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e ignoreAuthorsList;"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":"    private Long fileSizeLimit;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public List\u003cStandaloneAuthor\u003e getAuthors() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (authors \u003d\u003d null) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        authors.removeIf(Objects::isNull);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return authors;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreGlobList() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        if (ignoreGlobList \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ignoreGlobList.removeIf(Objects::isNull);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return ignoreGlobList;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getFormats() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (formats \u003d\u003d null) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        formats.removeIf(Objects::isNull);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return formats;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreCommitList() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (ignoreCommitsList \u003d\u003d null) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ignoreCommitsList.removeIf(Objects::isNull);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return ignoreCommitsList;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreAuthorList() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (ignoreAuthorsList \u003d\u003d null) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        ignoreAuthorsList.removeIf(Objects::isNull);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return ignoreAuthorsList;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"gok99"},"content":"    public Long getFileSizeLimit() {"},{"lineNumber":63,"author":{"gitId":"gok99"},"content":"        if (fileSizeLimit \u003d\u003d null || fileSizeLimit \u003c\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"gok99"},"content":"            return RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT;"},{"lineNumber":65,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"gok99"},"content":"        return fileSizeLimit;"},{"lineNumber":67,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"gok99"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof StandaloneConfig)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StandaloneConfig otherStandaloneConfig \u003d (StandaloneConfig) other;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return authors.equals(otherStandaloneConfig.authors)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 getIgnoreGlobList().equals(otherStandaloneConfig.getIgnoreGlobList())"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 getFormats().equals(otherStandaloneConfig.getFormats())"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                \u0026\u0026 getIgnoreCommitList().equals(otherStandaloneConfig.getIgnoreCommitList())"},{"lineNumber":84,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 getIgnoreAuthorList().equals(otherStandaloneConfig.getIgnoreAuthorList())"},{"lineNumber":85,"author":{"gitId":"gok99"},"content":"                \u0026\u0026 getFileSizeLimit().equals(otherStandaloneConfig.getFileSizeLimit());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"gok99":10,"-":76}},{"path":"src/main/java/reposense/model/SupportedDomainUrlMap.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import java.util.TreeMap;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import java.util.TreeSet;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":" * Represents the map of supported remote repo domain names."},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"public class SupportedDomainUrlMap {"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    private static final String BASE_URL_KEY \u003d \"BASE_URL\";"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    private static final String REPO_URL_KEY \u003d \"REPO_URL\";"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"    private static final String BRANCH_KEY \u003d \"BRANCH\";"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    private static final String COMMIT_PATH_KEY \u003d \"COMMIT_PATH\";"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    private static final String BLAME_PATH_KEY \u003d \"BLAME_PATH\";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    private static final String HISTORY_PATH_KEY \u003d \"HISTORY_PATH\";"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    private static final String ORGANIZATION_PLACEHOLDER \u003d \"$ORGANIZATION\";"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    private static final String REPO_NAME_PLACEHOLDER \u003d \"$REPO_NAME\";"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    private static final String BRANCH_PLACEHOLDER \u003d \"$BRANCH\";"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    private static final String COMMIT_HASH_PLACEHOLDER \u003d \"$COMMIT_HASH\";"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    private static final String FILE_PATH_PLACEHOLDER \u003d \"$FILE_PATH\";"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    protected static final Map\u003cString, String\u003e GITHUB_MAP \u003d new HashMap\u003cString, String\u003e() {"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        {"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"            put(BASE_URL_KEY, \"https://github.com/\");"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"            put(REPO_URL_KEY, \"https://github.com/\" + ORGANIZATION_PLACEHOLDER + \"/\" + REPO_NAME_PLACEHOLDER + \"/\");"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"            put(BRANCH_KEY, \"tree/\" + BRANCH_PLACEHOLDER);"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"            put(COMMIT_PATH_KEY, \"commit/\" + COMMIT_HASH_PLACEHOLDER);"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"            put(BLAME_PATH_KEY, \"blame/\" + BRANCH_PLACEHOLDER + \"/\" + FILE_PATH_PLACEHOLDER);"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"            put(HISTORY_PATH_KEY, \"commits/\" + BRANCH_PLACEHOLDER + \"/\" + FILE_PATH_PLACEHOLDER);"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    };"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    protected static final Map\u003cString, String\u003e GITLAB_MAP \u003d new HashMap\u003cString, String\u003e() {"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        {"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"            put(BASE_URL_KEY, \"https://gitlab.com/\");"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"            put(REPO_URL_KEY, \"https://gitlab.com/\" + ORGANIZATION_PLACEHOLDER + \"/\" + REPO_NAME_PLACEHOLDER + \"/\");"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            put(BRANCH_KEY, \"-/tree/\" + BRANCH_PLACEHOLDER);"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"            put(COMMIT_PATH_KEY, \"-/commit/\" + COMMIT_HASH_PLACEHOLDER);"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            put(BLAME_PATH_KEY, \"-/blame/\" + BRANCH_PLACEHOLDER + \"/\" + FILE_PATH_PLACEHOLDER);"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"            put(HISTORY_PATH_KEY, \"-/commits/\" + BRANCH_PLACEHOLDER + \"/\" + FILE_PATH_PLACEHOLDER);"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    };"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"    protected static final Map\u003cString, String\u003e BITBUCKET_MAP \u003d new HashMap\u003cString, String\u003e() {"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        {"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"            put(BASE_URL_KEY, \"https://bitbucket.org/\");"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"            put(REPO_URL_KEY, \"https://bitbucket.org/\" + ORGANIZATION_PLACEHOLDER + \"/\" + REPO_NAME_PLACEHOLDER + \"/\");"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"            put(BRANCH_KEY, \"src/\" + BRANCH_PLACEHOLDER);"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"            put(COMMIT_PATH_KEY, \"commits/\" + COMMIT_HASH_PLACEHOLDER);"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"            put(BLAME_PATH_KEY, \"annotate/\" + BRANCH_PLACEHOLDER + \"/\" + FILE_PATH_PLACEHOLDER);"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"            put(HISTORY_PATH_KEY, \"history-node/HEAD/\" + FILE_PATH_PLACEHOLDER + \"?at\u003d\" + BRANCH_PLACEHOLDER);"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    };"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    protected static final Map\u003cString, String\u003e NOT_SUPPORTED_MAP \u003d new HashMap\u003cString, String\u003e() {"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"            put(BASE_URL_KEY, \"UNSUPPORTED\");"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"            put(REPO_URL_KEY, \"UNSUPPORTED\");"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"            put(BRANCH_KEY, \"\");"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"            put(COMMIT_PATH_KEY, \"\");"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"            put(BLAME_PATH_KEY, \"\");"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"            put(HISTORY_PATH_KEY, \"\");"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"    };"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    private static final SupportedDomainUrlMap DEFAULT_DOMAIN_URL_MAP \u003d new SupportedDomainUrlMap();"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"    private final Map\u003cString, Map\u003cString, String\u003e\u003e domainUrlMap;"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"    private final Set\u003cString\u003e domainAccessedSet;"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"     * Creates an instance of {@code SupportedDomainUrlMap} and pre-fills the {@code domainUrlMap} with entries."},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"     * By default, {@code domainAccessedSet} always includes the {@code RepoLocation#UNSUPPORTED_DOMAIN_NAME}"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"     * for local repository support."},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"    protected SupportedDomainUrlMap() {"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"        domainUrlMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"        domainAccessedSet \u003d new TreeSet\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"        domainAccessedSet.add(RepoLocation.UNSUPPORTED_DOMAIN_NAME);"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"        domainUrlMap.put(\"github\", GITHUB_MAP);"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"        domainUrlMap.put(\"gitlab\", GITLAB_MAP);"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"        domainUrlMap.put(\"bitbucket\", BITBUCKET_MAP);"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"        domainUrlMap.put(RepoLocation.UNSUPPORTED_DOMAIN_NAME, NOT_SUPPORTED_MAP);"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"    public Map\u003cString, Map\u003cString, String\u003e\u003e getRequiredDomainUrlMap() {"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"        Map\u003cString, Map\u003cString, String\u003e\u003e necessaryDomainUrlMap \u003d new TreeMap\u003c\u003e();"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"        for (String domain : getDomainsAccessed()) {"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"            necessaryDomainUrlMap.put(domain, domainUrlMap.get(domain));"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":"        return necessaryDomainUrlMap;"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"     * Returns true if {@code domainName} is currently supported."},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"    public boolean isSupportedDomain(String domainName) {"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":"        boolean doesContain \u003d domainUrlMap.containsKey(domainName);"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"        if (doesContain) {"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":"            domainAccessedSet.add(domainName);"},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"        return doesContain;"},{"lineNumber":105,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"     * Returns true if {@code domainName} is currently supported."},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"    public static boolean isSupportedDomainName(String domainName) {"},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"        return DEFAULT_DOMAIN_URL_MAP.isSupportedDomain(domainName);"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"    protected Set\u003cString\u003e getDomainsAccessed() {"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"        return domainAccessedSet;"},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"     * Clears the accessed set back to the default."},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"    public static void clearAccessedSet() {"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"        DEFAULT_DOMAIN_URL_MAP.domainAccessedSet.clear();"},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"        DEFAULT_DOMAIN_URL_MAP.domainAccessedSet.add(RepoLocation.UNSUPPORTED_DOMAIN_NAME);"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"     * Returns the URL mappings for required domains."},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"    public static Map\u003cString, Map\u003cString, String\u003e\u003e getDefaultDomainUrlMap() {"},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":"        return DEFAULT_DOMAIN_URL_MAP.getRequiredDomainUrlMap();"},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":132}},{"path":"src/main/java/reposense/parser/AlphanumericArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Represents an alphanumeric type {@code String} argument."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class AlphanumericArgumentType implements ArgumentType\u003cString\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_NOT_IN_ALPLANUMERIC \u003d"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            \"Invalid format. It must be in alphanumeric.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final Pattern ALPHANUMERIC_PATTERN \u003d Pattern.compile(\"[A-Za-z0-9]+\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public String convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        if (!ALPHANUMERIC_PATTERN.matcher(value).matches()) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            throw new ArgumentParserException("},{"lineNumber":22,"author":{"gitId":"-"},"content":"                    String.format(PARSE_EXCEPTION_MESSAGE_NOT_IN_ALPLANUMERIC, value), parser);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":26}},{"path":"src/main/java/reposense/parser/AnalysisThreadsArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Verifies and parses a string-formatted integer to an {@link Integer} object."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AnalysisThreadsArgumentType implements ArgumentType\u003cInteger\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public Integer convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        return Integer.parseInt(value);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":14}},{"path":"src/main/java/reposense/parser/ArgsParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.ArgumentParsers;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.Arguments;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.action.HelpArgumentAction;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.action.VersionArgumentAction;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.FeatureControl;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.MutuallyExclusiveGroup;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Namespace;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.model.LocationsCliArguments;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.model.ViewCliArguments;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Verifies and parses a string-formatted date to a {@link CliArguments} object."},{"lineNumber":38,"author":{"gitId":"-"},"content":" */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class ArgsParser {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_REPORT_NAME \u003d \"reposense-report\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final int DEFAULT_NUM_CLONING_THREADS \u003d 4;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final int DEFAULT_NUM_ANALYSIS_THREADS \u003d Runtime.getRuntime().availableProcessors();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String[] HELP_FLAGS \u003d new String[]{\"--help\", \"-h\"};"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String[] CONFIG_FLAGS \u003d new String[]{\"--config\", \"-c\"};"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String[] REPO_FLAGS \u003d new String[]{\"--repo\", \"--repos\", \"-r\"};"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String[] VIEW_FLAGS \u003d new String[]{\"--view\", \"-v\"};"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String[] OUTPUT_FLAGS \u003d new String[]{\"--output\", \"-o\"};"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String[] ASSETS_FLAGS \u003d new String[]{\"--assets\", \"-a\"};"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String[] SINCE_FLAGS \u003d new String[]{\"--since\", \"-s\"};"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String[] UNTIL_FLAGS \u003d new String[]{\"--until\", \"-u\"};"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String[] PERIOD_FLAGS \u003d new String[]{\"--period\", \"-p\"};"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String[] SHALLOW_CLONING_FLAGS \u003d new String[]{\"--shallow-cloning\", \"-S\"};"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String[] FORMAT_FLAGS \u003d new String[]{\"--formats\", \"-f\"};"},{"lineNumber":55,"author":{"gitId":"gok99"},"content":"    public static final String[] IGNORE_CONFIG_FLAGS \u003d new String[]{\"--ignore-standalone-config\", \"-i\"};"},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"    public static final String[] IGNORE_SIZELIMIT_FLAGS \u003d new String[]{\"--ignore-filesize-limit\", \"-I\"};"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String[] TIMEZONE_FLAGS \u003d new String[]{\"--timezone\", \"-t\"};"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String[] VERSION_FLAGS \u003d new String[]{\"--version\", \"-V\"};"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String[] LAST_MODIFIED_DATE_FLAGS \u003d new String[]{\"--last-modified-date\", \"-l\"};"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String[] FIND_PREVIOUS_AUTHORS_FLAGS \u003d new String[]{\"--find-previous-authors\", \"-F\"};"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String[] CLONING_THREADS_FLAG \u003d new String[]{\"--cloning-threads\"};"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String[] ANALYSIS_THREADS_FLAG \u003d new String[]{\"--analysis-threads\"};"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ArgsParser.class);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final String PROGRAM_USAGE \u003d \"java -jar RepoSense.jar\";"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final String PROGRAM_DESCRIPTION \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            \"RepoSense is a contribution analysis tool for Git repositories.\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_HEADER_MUTEX \u003d \"mutual exclusive arguments\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_HAVE_SINCE_DATE_UNTIL_DATE_AND_PERIOD \u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\", \\\"Until Date\\\", and \\\"Period\\\" cannot be applied together.\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_USING_DEFAULT_CONFIG_PATH \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \"Config path not provided, using the config folder as default.\";"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_PATH \u003d \"%s is malformed.\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the report config provided.\";"},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final String MESSAGE_SINCE_D1_WITH_PERIOD \u003d \"You may be using --since d1 with the --period flag. \""},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"            + \"This may result in an incorrect date range being analysed.\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final Path DEFAULT_CONFIG_PATH \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            + File.separator + \"config\" + File.separator);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static final Path DEFAULT_ASSETS_PATH \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            + File.separator + \"assets\" + File.separator);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static ArgumentParser getArgumentParser() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentParser parser \u003d ArgumentParsers"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .newFor(PROGRAM_USAGE)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .addHelp(false)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build()"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .description(PROGRAM_DESCRIPTION);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        MutuallyExclusiveGroup mutexParser \u003d parser"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                .addMutuallyExclusiveGroup(MESSAGE_HEADER_MUTEX)"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                .required(false);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        MutuallyExclusiveGroup mutexParser2 \u003d parser"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .addMutuallyExclusiveGroup(MESSAGE_HEADER_MUTEX)"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .required(false);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Boolean flags"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        parser.addArgument(HELP_FLAGS)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .help(\"Show help message.\")"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .action(new HelpArgumentAction());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        parser.version(\"RepoSense \" + RepoSense.getVersion());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        parser.addArgument(VERSION_FLAGS)"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                .help(\"Show the version of RepoSense.\")"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .action(new VersionArgumentAction());"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"gok99"},"content":"        parser.addArgument(IGNORE_CONFIG_FLAGS)"},{"lineNumber":111,"author":{"gitId":"gok99"},"content":"                .dest(IGNORE_CONFIG_FLAGS[0])"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .help(\"A flag to ignore the standalone config file in the repo.\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"gok99"},"content":"        parser.addArgument(IGNORE_SIZELIMIT_FLAGS)"},{"lineNumber":116,"author":{"gitId":"gok99"},"content":"                .dest(IGNORE_SIZELIMIT_FLAGS[0])"},{"lineNumber":117,"author":{"gitId":"gok99"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":118,"author":{"gitId":"gok99"},"content":"                .help(\"A flag to ignore the filesize limit for analyzed files.\");"},{"lineNumber":119,"author":{"gitId":"gok99"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        parser.addArgument(VIEW_FLAGS)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .dest(VIEW_FLAGS[0])"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .nargs(\"?\")"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .type(new ReportFolderArgumentType())"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .setConst(EMPTY_PATH)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .help(\"Starts a server to display the report in the provided directory. \""},{"lineNumber":127,"author":{"gitId":"-"},"content":"                        + \"If used as a flag (with no argument), \""},{"lineNumber":128,"author":{"gitId":"-"},"content":"                        + \"generates a report and automatically displays the report.\");"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        parser.addArgument(OUTPUT_FLAGS)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .dest(OUTPUT_FLAGS[0])"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .type(new OutputFolderArgumentType())"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .setDefault(Paths.get(ArgsParser.DEFAULT_REPORT_NAME))"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .help(\"The directory to output the report folder, reposense-report. \""},{"lineNumber":136,"author":{"gitId":"-"},"content":"                        + \"If not provided, the report folder will be created in the current working directory.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        parser.addArgument(ASSETS_FLAGS)"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .dest(ASSETS_FLAGS[0])"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .type(new AssetsFolderArgumentType())"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_ASSETS_PATH)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .help(\"The directory to place assets files to customize report generation. \""},{"lineNumber":144,"author":{"gitId":"-"},"content":"                        + \"If not provided, the assets folder in the current working directory will be used.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        parser.addArgument(SINCE_FLAGS)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .dest(SINCE_FLAGS[0])"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .metavar(\"dd/MM/yyyy\")"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .type(new SinceDateArgumentType())"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                .help(\"The date to start filtering.\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        parser.addArgument(UNTIL_FLAGS)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .dest(UNTIL_FLAGS[0])"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .metavar(\"dd/MM/yyyy\")"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                .type(new UntilDateArgumentType())"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                .help(\"The date to stop filtering.\");"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        parser.addArgument(PERIOD_FLAGS)"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                .dest(PERIOD_FLAGS[0])"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                .metavar(\"PERIOD\")"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .type(new PeriodArgumentType())"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                .help(\"The number of days of the filtering window.\");"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        parser.addArgument(FORMAT_FLAGS)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                .dest(FORMAT_FLAGS[0])"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                .nargs(\"*\")"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                .metavar(\"FORMAT\")"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                .type(new AlphanumericArgumentType())"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                .setDefault(Collections.emptyList())"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .help(\"The alphanumeric file formats to process.\\n\""},{"lineNumber":174,"author":{"gitId":"-"},"content":"                        + \"If not provided, default file formats will be used.\\n\""},{"lineNumber":175,"author":{"gitId":"-"},"content":"                        + \"Please refer to userguide for more information.\");"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        parser.addArgument(TIMEZONE_FLAGS)"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                .dest(TIMEZONE_FLAGS[0])"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                .metavar(\"ZONE_ID[±hh[mm]]\")"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                .type(new ZoneIdArgumentType())"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                .setDefault(ZoneId.systemDefault())"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                .help(\"The timezone to use for the generated report. \""},{"lineNumber":183,"author":{"gitId":"-"},"content":"                        + \"One kind of valid timezones is relative to UTC. E.g. UTC, UTC+08, UTC-1030. \\n\""},{"lineNumber":184,"author":{"gitId":"-"},"content":"                        + \"If not provided, system default timezone will be used.\");"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        parser.addArgument(FIND_PREVIOUS_AUTHORS_FLAGS)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                .dest(FIND_PREVIOUS_AUTHORS_FLAGS[0])"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                .help(\"A flag to make RepoSense utilize Git blame\u0027s ignore revisions functionality, RepoSense \""},{"lineNumber":190,"author":{"gitId":"-"},"content":"                        + \"will attempt to blame the line changes caused by commits in the ignore commit list to the \""},{"lineNumber":191,"author":{"gitId":"-"},"content":"                        + \"previous authors who altered those lines (if available)\");"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // Mutex flags - these will always be the last parameters in help message."},{"lineNumber":194,"author":{"gitId":"-"},"content":"        mutexParser.addArgument(CONFIG_FLAGS)"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                .dest(CONFIG_FLAGS[0])"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .type(new ConfigFolderArgumentType())"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_CONFIG_PATH)"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                .help(\"The directory containing the config files.\""},{"lineNumber":200,"author":{"gitId":"-"},"content":"                        + \"If not provided, the config files will be obtained from the config folder.\");"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        mutexParser.addArgument(REPO_FLAGS)"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                .nargs(\"+\")"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                .dest(REPO_FLAGS[0])"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                .metavar(\"LOCATION\")"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                .help(\"The GitHub URL or disk locations to clone repository.\");"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        mutexParser2.addArgument(LAST_MODIFIED_DATE_FLAGS)"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                .dest(LAST_MODIFIED_DATE_FLAGS[0])"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                .help(\"A flag to keep track of the last modified date of each line of code.\");"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"        mutexParser2.addArgument(SHALLOW_CLONING_FLAGS)"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                .dest(SHALLOW_CLONING_FLAGS[0])"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                .help(\"A flag to make RepoSense employ Git\u0027s shallow cloning functionality, which can significantly \""},{"lineNumber":217,"author":{"gitId":"-"},"content":"                        + \"reduce the time taken to clone large repositories. This flag should not be used for \""},{"lineNumber":218,"author":{"gitId":"-"},"content":"                        + \"smaller repositories, where the .git file is smaller than 500 MB.\");"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        parser.addArgument(CLONING_THREADS_FLAG)"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                .dest(CLONING_THREADS_FLAG[0])"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                .type(new CloningThreadsArgumentType())"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_NUM_CLONING_THREADS)"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                .help(FeatureControl.SUPPRESS);"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        parser.addArgument(ANALYSIS_THREADS_FLAG)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                .dest(ANALYSIS_THREADS_FLAG[0])"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                .type(new AnalysisThreadsArgumentType())"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_NUM_ANALYSIS_THREADS)"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                .help(FeatureControl.SUPPRESS);"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        return parser;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Parses the given string {@code args} to a {@link CliArguments} object."},{"lineNumber":237,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     * @throws HelpScreenException if given args contain the --help flag. Help message will be printed out"},{"lineNumber":239,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * by the {@link ArgumentParser} hence this is to signal to the caller that the program is safe to exit."},{"lineNumber":240,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws ParseException if the given string arguments fails to parse to a {@link CliArguments} object."},{"lineNumber":241,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public static CliArguments parse(String[] args) throws HelpScreenException, ParseException {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig \u003d new ReportConfiguration();"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            ArgumentParser parser \u003d getArgumentParser();"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            Namespace results \u003d parser.parseArgs(args);"},{"lineNumber":247,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime sinceDate;"},{"lineNumber":248,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime untilDate;"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"            Path configFolderPath \u003d results.get(CONFIG_FLAGS[0]);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            Path reportFolderPath \u003d results.get(VIEW_FLAGS[0]);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            Path outputFolderPath \u003d results.get(OUTPUT_FLAGS[0]);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            ZoneId zoneId \u003d results.get(TIMEZONE_FLAGS[0]);"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            Path assetsFolderPath \u003d results.get(ASSETS_FLAGS[0]);"},{"lineNumber":255,"author":{"gitId":"yhtMinceraft1010X"},"content":"            Optional\u003cLocalDateTime\u003e cliSinceDate \u003d results.get(SINCE_FLAGS[0]);"},{"lineNumber":256,"author":{"gitId":"yhtMinceraft1010X"},"content":"            Optional\u003cLocalDateTime\u003e cliUntilDate \u003d results.get(UNTIL_FLAGS[0]);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            Optional\u003cInteger\u003e cliPeriod \u003d results.get(PERIOD_FLAGS[0]);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            List\u003cString\u003e locations \u003d results.get(REPO_FLAGS[0]);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            List\u003cFileType\u003e formats \u003d FileType.convertFormatStringsToFileTypes(results.get(FORMAT_FLAGS[0]));"},{"lineNumber":260,"author":{"gitId":"gok99"},"content":"            boolean isStandaloneConfigIgnored \u003d results.get(IGNORE_CONFIG_FLAGS[0]);"},{"lineNumber":261,"author":{"gitId":"gok99"},"content":"            boolean isFileSizeLimitIgnored \u003d results.get(IGNORE_SIZELIMIT_FLAGS[0]);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            boolean shouldIncludeLastModifiedDate \u003d results.get(LAST_MODIFIED_DATE_FLAGS[0]);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            boolean shouldPerformShallowCloning \u003d results.get(SHALLOW_CLONING_FLAGS[0]);"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            boolean shouldFindPreviousAuthors \u003d results.get(FIND_PREVIOUS_AUTHORS_FLAGS[0]);"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"            // Report config is ignored if --repos is provided"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            if (locations \u003d\u003d null) {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                Path reportConfigFilePath \u003d configFolderPath.resolve(ReportConfigJsonParser.REPORT_CONFIG_FILENAME);"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                    reportConfig \u003d new ReportConfigJsonParser().parse(reportConfigFilePath);"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                } catch (JsonSyntaxException jse) {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"                    logger.warning(String.format(MESSAGE_INVALID_CONFIG_PATH, reportConfigFilePath));"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                } catch (IllegalArgumentException iae) {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"                    logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON, iae.getMessage()));"},{"lineNumber":276,"author":{"gitId":"-"},"content":"                } catch (IOException ioe) {"},{"lineNumber":277,"author":{"gitId":"-"},"content":"                    // IOException thrown as report-config.json is not found."},{"lineNumber":278,"author":{"gitId":"-"},"content":"                    // Ignore exception as the file is optional."},{"lineNumber":279,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":280,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"            boolean isSinceDateProvided \u003d cliSinceDate.isPresent();"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            boolean isUntilDateProvided \u003d cliUntilDate.isPresent();"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            boolean isPeriodProvided \u003d cliPeriod.isPresent();"},{"lineNumber":285,"author":{"gitId":"yhtMinceraft1010X"},"content":"            boolean isUsingArbitraryDate \u003d false;"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            if (isSinceDateProvided \u0026\u0026 isUntilDateProvided \u0026\u0026 isPeriodProvided) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"                throw new ParseException(MESSAGE_HAVE_SINCE_DATE_UNTIL_DATE_AND_PERIOD);"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":289,"author":{"gitId":"-"},"content":"            int numCloningThreads \u003d results.get(CLONING_THREADS_FLAG[0]);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"            int numAnalysisThreads \u003d results.get(ANALYSIS_THREADS_FLAG[0]);"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime currentDate \u003d TimeUtil.getCurrentDate(zoneId);"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"            if (isSinceDateProvided) {"},{"lineNumber":295,"author":{"gitId":"yhtMinceraft1010X"},"content":"                sinceDate \u003d TimeUtil.getSinceDate(cliSinceDate.get());"},{"lineNumber":296,"author":{"gitId":"yhtMinceraft1010X"},"content":"                // For --since d1, need to adjust the arbitrary date based on timezone"},{"lineNumber":297,"author":{"gitId":"yhtMinceraft1010X"},"content":"                if (TimeUtil.isEqualToArbitraryFirstDateUtc(sinceDate)) {"},{"lineNumber":298,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    isUsingArbitraryDate \u003d true;"},{"lineNumber":299,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    sinceDate \u003d TimeUtil.getArbitraryFirstCommitDateConverted(zoneId);"},{"lineNumber":300,"author":{"gitId":"yhtMinceraft1010X"},"content":"                }"},{"lineNumber":301,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":302,"author":{"gitId":"yhtMinceraft1010X"},"content":"                if (isUntilDateProvided) {"},{"lineNumber":303,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    sinceDate \u003d isPeriodProvided"},{"lineNumber":304,"author":{"gitId":"yhtMinceraft1010X"},"content":"                            ? TimeUtil.getDateMinusNDays(cliUntilDate.get(), cliPeriod.get())"},{"lineNumber":305,"author":{"gitId":"yhtMinceraft1010X"},"content":"                            : TimeUtil.getDateMinusAMonth(cliUntilDate.get());"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"                    sinceDate \u003d isPeriodProvided"},{"lineNumber":308,"author":{"gitId":"yhtMinceraft1010X"},"content":"                            ? TimeUtil.getDateMinusNDays(currentDate, cliPeriod.get())"},{"lineNumber":309,"author":{"gitId":"yhtMinceraft1010X"},"content":"                            : TimeUtil.getDateMinusAMonth(currentDate);"},{"lineNumber":310,"author":{"gitId":"yhtMinceraft1010X"},"content":"                }"},{"lineNumber":311,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"yhtMinceraft1010X"},"content":"            if (isPeriodProvided \u0026\u0026 isUsingArbitraryDate) {"},{"lineNumber":315,"author":{"gitId":"yhtMinceraft1010X"},"content":"                logger.warning(MESSAGE_SINCE_D1_WITH_PERIOD);"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"            if (isUntilDateProvided) {"},{"lineNumber":319,"author":{"gitId":"yhtMinceraft1010X"},"content":"                untilDate \u003d TimeUtil.getUntilDate(cliUntilDate.get());"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"                untilDate \u003d (isSinceDateProvided \u0026\u0026 isPeriodProvided)"},{"lineNumber":322,"author":{"gitId":"yhtMinceraft1010X"},"content":"                        ? TimeUtil.getDatePlusNDays(cliSinceDate.get(), cliPeriod.get())"},{"lineNumber":323,"author":{"gitId":"-"},"content":"                        : currentDate;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"            untilDate \u003d untilDate.compareTo(currentDate) \u003c 0"},{"lineNumber":327,"author":{"gitId":"-"},"content":"                    ? untilDate"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                    : currentDate;"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"            LogsManager.setLogFolderLocation(outputFolderPath);"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TimeUtil.verifySinceDateIsValid(sinceDate, currentDate);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"            TimeUtil.verifyDatesRangeIsCorrect(sinceDate, untilDate);"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"            if (reportFolderPath !\u003d null \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH)"},{"lineNumber":336,"author":{"gitId":"-"},"content":"                    \u0026\u0026 configFolderPath.equals(DEFAULT_CONFIG_PATH) \u0026\u0026 locations \u003d\u003d null) {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"                return new ViewCliArguments(reportFolderPath);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"            boolean isAutomaticallyLaunching \u003d reportFolderPath !\u003d null;"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"            if (isAutomaticallyLaunching \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH)) {"},{"lineNumber":343,"author":{"gitId":"-"},"content":"                logger.info(String.format(\"Ignoring argument \u0027%s\u0027 for --view.\", reportFolderPath.toString()));"},{"lineNumber":344,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"            if (locations !\u003d null) {"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                return new LocationsCliArguments(locations, outputFolderPath, assetsFolderPath, sinceDate, untilDate,"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                        isSinceDateProvided, isUntilDateProvided, numCloningThreads, numAnalysisThreads, formats,"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                        shouldIncludeLastModifiedDate, shouldPerformShallowCloning, isAutomaticallyLaunching,"},{"lineNumber":350,"author":{"gitId":"gok99"},"content":"                        isStandaloneConfigIgnored, isFileSizeLimitIgnored, zoneId, shouldFindPreviousAuthors);"},{"lineNumber":351,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"            if (configFolderPath.equals(EMPTY_PATH)) {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"                logger.info(MESSAGE_USING_DEFAULT_CONFIG_PATH);"},{"lineNumber":355,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":356,"author":{"gitId":"-"},"content":"            return new ConfigCliArguments(configFolderPath, outputFolderPath, assetsFolderPath, sinceDate, untilDate,"},{"lineNumber":357,"author":{"gitId":"-"},"content":"                    isSinceDateProvided, isUntilDateProvided, numCloningThreads, numAnalysisThreads, formats,"},{"lineNumber":358,"author":{"gitId":"-"},"content":"                    shouldIncludeLastModifiedDate, shouldPerformShallowCloning, isAutomaticallyLaunching,"},{"lineNumber":359,"author":{"gitId":"gok99"},"content":"                    isStandaloneConfigIgnored, isFileSizeLimitIgnored, zoneId, reportConfig, shouldFindPreviousAuthors);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        } catch (HelpScreenException hse) {"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            throw hse;"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        } catch (ArgumentParserException ape) {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"            throw new ParseException(getArgumentParser().formatUsage() + ape.getMessage() + \"\\n\");"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":366,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":32,"gok99":13,"-":321}},{"path":"src/main/java/reposense/parser/AuthorConfigCsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Container for the values parsed from {@code author-config.csv} file."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AuthorConfigCsvParser extends CsvParser\u003cAuthorConfiguration\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String AUTHOR_CONFIG_FILENAME \u003d \"author-config.csv\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Positions of the elements of a line in author-config.csv config file."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String[] LOCATION_HEADER \u003d {\"Repository\u0027s Location\"};"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String[] BRANCH_HEADER \u003d {\"Branch\"};"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String[] GIT_ID_HEADERS \u003d {\"Author\u0027s Git Host ID\", \"Author\u0027s GitHub ID\"};"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String[] EMAIL_HEADER \u003d {\"Author\u0027s Emails\"};"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String[] DISPLAY_NAME_HEADER \u003d {\"Author\u0027s Display Name\"};"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String[] ALIAS_HEADER \u003d {\"Author\u0027s Git Author Name\"};"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_GLOB_LIST_HEADER \u003d {\"Ignore Glob List\"};"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public AuthorConfigCsvParser(Path csvFilePath) throws FileNotFoundException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super(csvFilePath);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    protected String[][] mandatoryHeaders() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                GIT_ID_HEADERS,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected String[][] optionalHeaders() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                LOCATION_HEADER, BRANCH_HEADER, EMAIL_HEADER, DISPLAY_NAME_HEADER, ALIAS_HEADER,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                IGNORE_GLOB_LIST_HEADER,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Processes the csv {@code record} line by line and add created {@link AuthorConfiguration} into {@code results}"},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * but skips {@code author} already exists in a {@link AuthorConfiguration} that has same {@code location}"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * and {@code branch}."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"    protected void processLine(List\u003cAuthorConfiguration\u003e results, CSVRecord record) throws ParseException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String location \u003d get(record, LOCATION_HEADER);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String branch \u003d getOrDefault(record, BRANCH_HEADER, AuthorConfiguration.DEFAULT_BRANCH);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String gitId \u003d get(record, GIT_ID_HEADERS);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        List\u003cString\u003e emails \u003d getAsList(record, EMAIL_HEADER);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String displayName \u003d get(record, DISPLAY_NAME_HEADER);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        List\u003cString\u003e aliases \u003d getAsList(record, ALIAS_HEADER);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoreGlobList \u003d getAsList(record, IGNORE_GLOB_LIST_HEADER);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d findMatchingAuthorConfiguration(results, location, branch);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(gitId);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (config.containsAuthor(author)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            logger.warning(String.format("},{"lineNumber":77,"author":{"gitId":"-"},"content":"                    \"Skipping author as %s already in repository %s %s\","},{"lineNumber":78,"author":{"gitId":"-"},"content":"                    author.getGitId(), config.getLocation(), config.getBranch()));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        author.setEmails(new ArrayList\u003c\u003e(emails));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        author.setDisplayName(!displayName.isEmpty() ? displayName : author.getGitId());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!aliases.isEmpty()) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            author.setAuthorAliases(aliases);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!ignoreGlobList.isEmpty()) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            author.setIgnoreGlobList(ignoreGlobList);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        config.addAuthor(author);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Gets an existing {@link AuthorConfiguration} from {@code results} if {@code location} and {@code branch} matches."},{"lineNumber":97,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Otherwise, adds a newly created {@link AuthorConfiguration} into {@code results} and returns it."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if {@code location} is invalid."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static AuthorConfiguration findMatchingAuthorConfiguration(List\u003cAuthorConfiguration\u003e results,"},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":"            String location, String branch) throws InvalidLocationException {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d new AuthorConfiguration(new RepoLocation(location), branch);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        for (AuthorConfiguration authorConfig : results) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            if (authorConfig.getLocation().equals(config.getLocation())"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                    \u0026\u0026 authorConfig.getBranch().equals(config.getBranch())) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                return authorConfig;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        results.add(config);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":10,"-":105}},{"path":"src/main/java/reposense/parser/CloningThreadsArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Verifies and parses a string-formatted integer to an {@link Integer} object."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CloningThreadsArgumentType implements ArgumentType\u003cInteger\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public Integer convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        return Integer.parseInt(value);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":14}},{"path":"src/main/java/reposense/parser/CsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.StringJoiner;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVFormat;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains CSV parsing related functionalities."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public abstract class CsvParser\u003cT\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    protected static final String COLUMN_VALUES_SEPARATOR \u003d \";\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    protected static final Logger logger \u003d LogsManager.getLogger(CsvParser.class);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String OVERRIDE_KEYWORD \u003d \"override:\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_EMPTY_LINE \u003d \"[EMPTY LINE]\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_UNABLE_TO_READ_CSV_FILE \u003d \"Unable to read the supplied CSV file.\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MALFORMED_LINE_FORMAT \u003d \"Line %d in CSV file, %s, is malformed.\\n\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Content: %s\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINE_PARSE_EXCEPTION_FORMAT \u003d \"Error parsing line %d in CSV file, %s.\\n\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Content: %s\\n\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Error: %s\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_EMPTY_CSV_FORMAT \u003d \"The CSV file, %s, is empty.\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MANDATORY_HEADER_MISSING \u003d \"Required column header, %s, not found in \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"CSV file, %s\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_DUPLICATE_COLUMN_HEADER \u003d \"Duplicate columns are present in CSV file, %s.\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COLUMNS_RECOGNIZED \u003d \"Parsed header of CSV file, %s, and recognized columns: \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"%s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ZERO_VALID_CONFIGS \u003d \"No valid configurations in the %s.\";"},{"lineNumber":52,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static final String MESSAGE_UNKNOWN_COLUMN \u003d \"Unknown column(s) found: %s (%s)\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Path csvFilePath;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Map\u003cString, Integer\u003e headerMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private int numOfLinesBeforeFirstRecord \u003d 0;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates {@link CsvParser} with given {@code csvFilepath}."},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws FileNotFoundException if the csv file cannot be found in the provided {@code csvFilePath}."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public CsvParser(Path csvFilePath) throws FileNotFoundException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (csvFilePath \u003d\u003d null || !Files.exists(csvFilePath)) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new FileNotFoundException(\"Csv file does not exist at the given path.\\n\""},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    + \"Use \u0027-help\u0027 to list all the available subcommands and some concept guides.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.csvFilePath \u003d csvFilePath;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Parses the csv file associated with this instance of the {@link CsvParser} and returns a {@link List}"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * containing the records in this file."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws IOException if there are errors accessing the given csv file."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if the csv is malformed."},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws InvalidHeaderException if header of csv file cannot be read."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public List\u003cT\u003e parse() throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        List\u003cT\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Iterable\u003cCSVRecord\u003e records;"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        try (BufferedReader csvReader \u003d new BufferedReader(new FileReader(csvFilePath.toFile()))) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            String[] header \u003d getHeader(csvReader);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"                records \u003d CSVFormat.Builder.create(CSVFormat.DEFAULT).setIgnoreEmptyLines(false).setHeader(header)"},{"lineNumber":88,"author":{"gitId":"yhtMinceraft1010X"},"content":"                        .setTrim(true).setIgnoreHeaderCase(true).build().parse(csvReader);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            } catch (IllegalArgumentException iae) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                throw new InvalidCsvException("},{"lineNumber":91,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_DUPLICATE_COLUMN_HEADER, csvFilePath.getFileName()));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"            for (CSVRecord record : records) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                if (isLineMalformed(record)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                    processLine(results, record);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                } catch (ParseException pe) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                    logger.warning(String.format(MESSAGE_LINE_PARSE_EXCEPTION_FORMAT, getLineNumber(record),"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                            csvFilePath.getFileName(), getRowContentAsRawString(record), pe.getMessage()));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                } catch (IllegalArgumentException iae) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                    logger.log(Level.WARNING, iae.getMessage(), iae);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new IOException(MESSAGE_UNABLE_TO_READ_CSV_FILE, ioe);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (results.isEmpty()) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new InvalidCsvException(String.format(MESSAGE_ZERO_VALID_CONFIGS, csvFilePath.getFileName()));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return results;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the header of a CSV file, which is assumed to be the first non-empty / non-whitespace line in the file"},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * read by {@code reader}."},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The line is split into an array of {@code String}s, using the comma symbol as delimiter."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @throws IOException if there is an error accessing the file."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if the file has only empty or blank lines."},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws InvalidHeaderException if header of csv file cannot be read."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private String[] getHeader(BufferedReader reader) throws IOException, InvalidCsvException, InvalidHeaderException {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String currentLine \u003d \"\";"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // read from file until we encounter a line that is neither blank nor empty"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        while (currentLine.isEmpty()) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            currentLine \u003d Optional.ofNullable(reader.readLine())"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                    .map(String::trim)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                    .orElseThrow(() -\u003e new InvalidCsvException(String.format("},{"lineNumber":134,"author":{"gitId":"-"},"content":"                            MESSAGE_EMPTY_CSV_FORMAT, csvFilePath.getFileName())));"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"            numOfLinesBeforeFirstRecord++;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String[] header \u003d currentLine.split(\",\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        validateHeader(header);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return header;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Returns true if {@code record} does not contain the same number of columns as the header or contains missing"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * values at the mandatory columns in CSV format."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private boolean isLineMalformed(CSVRecord record) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        if (!record.isConsistent()) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, getLineNumber(record),"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                    csvFilePath.getFileName(), getRowContentAsRawString(record)));"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        for (String[] equivalentHeaders : mandatoryHeaders()) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            boolean isLineFormatMalformed \u003d"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                    Arrays.stream(equivalentHeaders).allMatch(header -\u003e get(record, header).isEmpty());"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            if (isLineFormatMalformed) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, getLineNumber(record),"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                        csvFilePath.getFileName(), getRowContentAsRawString(record)));"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return false;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column with the header {@code header}."},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    protected String get(final CSVRecord record, String header) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return headerMap.containsKey(header) ? record.get(headerMap.get(header)).trim() : EMPTY_STRING;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders}."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    protected String get(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        for (String header : equivalentHeaders) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            if (headerMap.containsKey(header)) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                return record.get(headerMap.get(header)).trim();"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return EMPTY_STRING;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders} if present, or returns {@code defaultValue} otherwise."},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    protected String getOrDefault(final CSVRecord record, String[] equivalentHeaders, String defaultValue) {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        String value \u003d get(record, equivalentHeaders);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return value.isEmpty() ? defaultValue : value;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Returns the value of {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders} as a {@link List} if it is in {@code record} and not empty."},{"lineNumber":200,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * The column is delimited by {@code COLUMN_VALUES_SEPARATOR}."},{"lineNumber":201,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns an empty {@link List} otherwise."},{"lineNumber":202,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e getAsList(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String value \u003d get(record, equivalentHeaders);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        if (value.isEmpty()) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            return Collections.emptyList();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return Arrays.stream(value.split(COLUMN_VALUES_SEPARATOR))"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                .map(String::trim)"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Returns the values in {@code record} as a list with the {@link CsvParser#OVERRIDE_KEYWORD} prefix removed."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * Returns an empty list if {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders} is empty."},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e getAsListWithoutOverridePrefix(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        List\u003cString\u003e data \u003d getAsList(record, equivalentHeaders);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (isElementOverridingStandaloneConfig(record, equivalentHeaders)) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            data.set(0, data.get(0).replaceFirst(OVERRIDE_KEYWORD, \"\"));"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            data.removeIf(String::isEmpty);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        return data;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    private long getLineNumber(final CSVRecord record) {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        return record.getRecordNumber() + numOfLinesBeforeFirstRecord;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * Returns true if the {@code record} at the column that match any of the equivalent headers in"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * {@code equivalentHeaders} is prefixed with the override keyword."},{"lineNumber":236,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    protected boolean isElementOverridingStandaloneConfig(final CSVRecord record, String[] equivalentHeaders) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        return get(record, equivalentHeaders).startsWith(OVERRIDE_KEYWORD);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"-"},"content":"     * Returns the contents of {@code record} as a raw string."},{"lineNumber":243,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    private String getRowContentAsRawString(final CSVRecord record) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        StringJoiner inputRowString \u003d new StringJoiner(\",\");"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        for (String value : record) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            inputRowString.add(value);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        String contentAsString \u003d inputRowString.toString();"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return (contentAsString.trim().isEmpty()) ? MESSAGE_EMPTY_LINE : contentAsString;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * Generates map of column header to position number for input {@code possibleHeader}."},{"lineNumber":255,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":256,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if {@code possibleHeader} does not contain all the mandatory headers."},{"lineNumber":257,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws InvalidHeaderException if a column in {@code possibleHeader} cannot be parsed."},{"lineNumber":258,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private void validateHeader(String[] possibleHeader) throws InvalidCsvException, InvalidHeaderException {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        int headerSize \u003d possibleHeader.length;"},{"lineNumber":261,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        Set\u003cString\u003e knownColumns \u003d new HashSet\u003c\u003e();"},{"lineNumber":262,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        ArrayList\u003cString\u003e unknownColumns \u003d new ArrayList\u003c\u003e();"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parsedHeaders \u003d mandatoryAndOptionalHeaders();"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c headerSize; i++) {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            String possible \u003d possibleHeader[i].trim();"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            for (String parsedHeader : parsedHeaders) {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                if (possible.equalsIgnoreCase(parsedHeader)) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                    headerMap.put(parsedHeader, i);"},{"lineNumber":270,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                    knownColumns.add(possible);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            if (!knownColumns.contains(possible)) {"},{"lineNumber":276,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                unknownColumns.add(possible);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":279,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":280,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        if (unknownColumns.size() \u003e 0) {"},{"lineNumber":281,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            String errorMessage \u003d String.join(\", \", unknownColumns);"},{"lineNumber":282,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            throw new InvalidHeaderException("},{"lineNumber":283,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                    String.format(MESSAGE_UNKNOWN_COLUMN, errorMessage, csvFilePath.toString()));"},{"lineNumber":284,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"        for (String[] equivalentHeaders : mandatoryHeaders()) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"            boolean isAnyEquivalentHeaderPresent \u003d"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                    Arrays.stream(equivalentHeaders).anyMatch(header -\u003e headerMap.containsKey(header));"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"            if (!isAnyEquivalentHeaderPresent) {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                throw new InvalidCsvException(String.format("},{"lineNumber":292,"author":{"gitId":"-"},"content":"                        MESSAGE_MANDATORY_HEADER_MISSING, Arrays.toString(equivalentHeaders),"},{"lineNumber":293,"author":{"gitId":"-"},"content":"                        csvFilePath.getFileName()));"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_COLUMNS_RECOGNIZED, csvFilePath.getFileName(),"},{"lineNumber":298,"author":{"gitId":"-"},"content":"                String.join(\",  \", headerMap.keySet())));"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":302,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":303,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    protected abstract String[][] mandatoryHeaders();"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":307,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":308,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    protected abstract String[][] optionalHeaders();"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitId":"-"},"content":"     * Gets the list of all mandatory and optional headers that can be parsed."},{"lineNumber":313,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    protected List\u003cString\u003e mandatoryAndOptionalHeaders() {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        return Stream.concat(Arrays.stream(mandatoryHeaders()), Arrays.stream(optionalHeaders()))"},{"lineNumber":316,"author":{"gitId":"-"},"content":"                .flatMap(Stream::of)"},{"lineNumber":317,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":321,"author":{"gitId":"-"},"content":"     * Processes the csv file line by line."},{"lineNumber":322,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * All {@link CsvParser}s must use {@link CsvParser#get}, {@link CsvParser#getOrDefault},"},{"lineNumber":323,"author":{"gitId":"-"},"content":"     * {@link CsvParser#getAsList} or {@link CsvParser#getAsListWithoutOverridePrefix} to read contents in"},{"lineNumber":324,"author":{"gitId":"-"},"content":"     * {@code record} and add created objects into {@code results}."},{"lineNumber":325,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":326,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws ParseException if any line does not get read successfully."},{"lineNumber":327,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    protected abstract void processLine(List\u003cT\u003e results, final CSVRecord record) throws ParseException;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":19,"Zhou-Jiahao-1998":18,"-":292}},{"path":"src/main/java/reposense/parser/DateArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Verifies and parses a string-formatted date to a {@link LocalDateTime} object."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"public class DateArgumentType implements ArgumentType\u003cOptional\u003cLocalDateTime\u003e\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_INVALID_DATE_STRING_FORMAT \u003d \"Invalid Date: %s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public Optional\u003cLocalDateTime\u003e convert(ArgumentParser parser, Argument arg, String value)"},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws ArgumentParserException {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return Optional.of(TimeUtil.parseDate(value));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (java.text.ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ArgumentParserException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(PARSE_EXCEPTION_MESSAGE_INVALID_DATE_STRING_FORMAT, value), parser);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":5,"-":23}},{"path":"src/main/java/reposense/parser/GroupConfigCsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Container for the values parsed from {@code group-config.csv} file."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class GroupConfigCsvParser extends CsvParser\u003cGroupConfiguration\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String GROUP_CONFIG_FILENAME \u003d \"group-config.csv\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Positions of the elements of a line in group-config.csv config file"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String[] LOCATION_HEADER \u003d {\"Repository\u0027s Location\"};"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String[] GROUP_NAME_HEADER \u003d {\"Group Name\"};"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String[] FILES_GLOB_HEADER \u003d {\"Globs\"};"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public GroupConfigCsvParser(Path csvFilePath) throws FileNotFoundException {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(csvFilePath);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    protected String[][] mandatoryHeaders() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                GROUP_NAME_HEADER, FILES_GLOB_HEADER,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected String[][] optionalHeaders() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                LOCATION_HEADER,"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Processes the csv {@code record} line by line and adds created {@link GroupConfiguration} into {@code results}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    protected void processLine(List\u003cGroupConfiguration\u003e results, CSVRecord record) throws InvalidLocationException {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String location \u003d get(record, LOCATION_HEADER);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String groupName \u003d get(record, GROUP_NAME_HEADER);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cString\u003e globList \u003d getAsList(record, FILES_GLOB_HEADER);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GroupConfiguration groupConfig \u003d null;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        groupConfig \u003d findMatchingGroupConfiguration(results, location);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FileType group \u003d new FileType(groupName, globList);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (groupConfig.containsGroup(group)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            logger.warning(String.format("},{"lineNumber":65,"author":{"gitId":"-"},"content":"                    \"Skipping group as %s has already been specified for the repository %s\","},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    group.toString(), groupConfig.getLocation()));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        groupConfig.addGroup(group);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Gets an existing {@link GroupConfiguration} from {@code results} if {@code location} matches."},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Otherwise, adds a newly created {@link GroupConfiguration} into {@code results} and returns it."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws InvalidLocationException if {@code location} is invalid."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static GroupConfiguration findMatchingGroupConfiguration(List\u003cGroupConfiguration\u003e results,"},{"lineNumber":80,"author":{"gitId":"yhtMinceraft1010X"},"content":"            String location) throws InvalidLocationException {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        GroupConfiguration config \u003d new GroupConfiguration(new RepoLocation(location));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        for (GroupConfiguration groupConfig : results) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            if (groupConfig.getLocation().equals(config.getLocation())) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                return groupConfig;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        results.add(config);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":7,"-":85}},{"path":"src/main/java/reposense/parser/InvalidHeaderException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":3,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Zhou-Jiahao-1998"},"content":" * Signals that there is a problem in the header of csv config file."},{"lineNumber":5,"author":{"gitId":"Zhou-Jiahao-1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"public class InvalidHeaderException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public InvalidHeaderException(String message) {"},{"lineNumber":8,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":10}},{"path":"src/main/java/reposense/parser/JsonParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.lang.reflect.Type;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.google.gson.Gson;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.google.gson.stream.JsonReader;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Represents a json parser that is able to parse json file from a {@link Path} into an object of type {@code T}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public abstract class JsonParser\u003cT\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Gets the type of {@code T} for json conversion."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public abstract Type getType();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Converts json file from the given {@code path} into an object and returns it."},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code path} is invalid."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public abstract T parse(Path path) throws IOException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    protected T fromJson(Path path) throws IOException {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return fromJson(new Gson(), path, getType());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    protected T fromJson(Gson gson, Path path, Type type) throws IOException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        try (JsonReader jsonReader \u003d new JsonReader(new FileReader(path.toString()))) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            return gson.fromJson(jsonReader, type);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":2,"-":35}},{"path":"src/main/java/reposense/parser/PeriodArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted period to an integer."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class PeriodArgumentType implements ArgumentType\u003cOptional\u003cInteger\u003e\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_NOT_IN_NUMERIC \u003d"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \"Invalid format. Period must be in the format of nd (n days) or nw (n weeks), \""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"where n is a number greater than 0.\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_SMALLER_THAN_ZERO \u003d"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \"Invalid format. Period must be greater than 0.\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String PARSE_EXCEPTION_MESSAGE_NUMBER_TOO_LARGE \u003d"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            \"Invalid format. Input number may be too large.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Pattern PERIOD_PATTERN \u003d Pattern.compile(\"[0-9]+[dw]\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Optional\u003cInteger\u003e convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            return parse(value);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            throw new ArgumentParserException(pe.getMessage(), parser);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Parses a {@code period} String and returns an {@link Integer} representing the number of days."},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws ParseException if period format or number is invalid."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Optional\u003cInteger\u003e parse(String period) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!PERIOD_PATTERN.matcher(period).matches()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(PARSE_EXCEPTION_MESSAGE_NOT_IN_NUMERIC, period));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        int multiplier \u003d period.substring(period.length() - 1).equals(\"d\") ? 1 : 7;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            int convertedValue \u003d Integer.parseInt(period.substring(0, period.length() - 1)) * multiplier;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            if (convertedValue \u003c\u003d 0) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                throw new ParseException(String.format(PARSE_EXCEPTION_MESSAGE_SMALLER_THAN_ZERO, period));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.of(convertedValue);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(PARSE_EXCEPTION_MESSAGE_NUMBER_TOO_LARGE, period));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":3,"-":53}},{"path":"src/main/java/reposense/parser/RepoConfigCsvParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.apache.commons.csv.CSVRecord;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"gok99"},"content":"import reposense.util.StringsUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Container for the values parsed from {@code repo-config.csv} file."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class RepoConfigCsvParser extends CsvParser\u003cRepoConfiguration\u003e {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String REPO_CONFIG_FILENAME \u003d \"repo-config.csv\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String IGNORE_STANDALONE_CONFIG_KEYWORD \u003d \"yes\";"},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"    private static final String IGNORE_FILESIZE_LIMIT_KEYWORD \u003d \"yes\";"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"    private static final String SKIP_IGNORED_FILE_ANALYSIS_KEYWORD \u003d \"yes\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String SHALLOW_CLONING_CONFIG_KEYWORD \u003d \"yes\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String FIND_PREVIOUS_AUTHORS_KEYWORD \u003d \"yes\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Positions of the elements of a line in repo-config.csv config file"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String[] LOCATION_HEADER \u003d {\"Repository\u0027s Location\"};"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String[] BRANCH_HEADER \u003d {\"Branch\"};"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String[] FILE_FORMATS_HEADER \u003d {\"File formats\"};"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_GLOB_LIST_HEADER \u003d {\"Ignore Glob List\"};"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_STANDALONE_CONFIG_HEADER \u003d {\"Ignore Standalone Config\"};"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_FILESIZE_LIMIT_HEADER \u003d {\"Ignore File Size Limit\"};"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_COMMIT_LIST_CONFIG_HEADER \u003d {\"Ignore Commits List\"};"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String[] IGNORE_AUTHOR_LIST_CONFIG_HEADER \u003d {\"Ignore Authors List\"};"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String[] SKIP_IGNORED_FILE_ANALYSIS_HEADER \u003d {\"Skip Ignored File Analysis\"};"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String[] SHALLOW_CLONING_CONFIG_HEADER \u003d {\"Shallow Cloning\"};"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String[] FIND_PREVIOUS_AUTHORS_CONFIG_HEADER \u003d {\"Find Previous Authors\"};"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String[] FILESIZE_LIMIT_HEADER \u003d {\"File Size Limit\"};"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public RepoConfigCsvParser(Path csvFilePath) throws FileNotFoundException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        super(csvFilePath);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Gets the list of headers that are mandatory for verification."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected String[][] mandatoryHeaders() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                LOCATION_HEADER,"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Gets the list of optional headers that can be parsed."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    protected String[][] optionalHeaders() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new String[][] {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                BRANCH_HEADER, FILE_FORMATS_HEADER, IGNORE_GLOB_LIST_HEADER, IGNORE_STANDALONE_CONFIG_HEADER,"},{"lineNumber":64,"author":{"gitId":"gok99"},"content":"                IGNORE_FILESIZE_LIMIT_HEADER, IGNORE_COMMIT_LIST_CONFIG_HEADER, IGNORE_AUTHOR_LIST_CONFIG_HEADER,"},{"lineNumber":65,"author":{"gitId":"gok99"},"content":"                SHALLOW_CLONING_CONFIG_HEADER, FIND_PREVIOUS_AUTHORS_CONFIG_HEADER, FILESIZE_LIMIT_HEADER,"},{"lineNumber":66,"author":{"gitId":"gok99"},"content":"                SKIP_IGNORED_FILE_ANALYSIS_HEADER"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Processes the csv {@code record} line by line and add created {@link RepoConfiguration} into {@code results} but"},{"lineNumber":72,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * ignores duplicated {@link RepoConfiguration} if there exists one that has same {@code location} and"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * {@code branch}."},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws InvalidLocationException if the location represented in {@code record} is invalid."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    protected void processLine(List\u003cRepoConfiguration\u003e results, CSVRecord record) throws InvalidLocationException {"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"        // The variable expansion is performed to simulate running the same location from command line."},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"        // This helps to support things like tilde expansion and other Bash/CMD features."},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"        RepoLocation location \u003d new RepoLocation(FileUtil.getVariableExpandedFilePath(get(record, LOCATION_HEADER)));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String branch \u003d getOrDefault(record, BRANCH_HEADER, RepoConfiguration.DEFAULT_BRANCH);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        boolean isFormatsOverriding \u003d isElementOverridingStandaloneConfig(record, FILE_FORMATS_HEADER);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e formats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":86,"author":{"gitId":"-"},"content":"                getAsListWithoutOverridePrefix(record, FILE_FORMATS_HEADER));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        boolean isIgnoreGlobListOverriding \u003d isElementOverridingStandaloneConfig(record, IGNORE_GLOB_LIST_HEADER);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoreGlobList \u003d getAsListWithoutOverridePrefix(record, IGNORE_GLOB_LIST_HEADER);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        boolean isIgnoreCommitListOverriding \u003d"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                isElementOverridingStandaloneConfig(record, IGNORE_COMMIT_LIST_CONFIG_HEADER);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e ignoreCommitList \u003d CommitHash.convertStringsToCommits("},{"lineNumber":94,"author":{"gitId":"-"},"content":"                getAsListWithoutOverridePrefix(record, IGNORE_COMMIT_LIST_CONFIG_HEADER));"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        boolean isIgnoredAuthorsListOverriding \u003d"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                isElementOverridingStandaloneConfig(record, IGNORE_AUTHOR_LIST_CONFIG_HEADER);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoredAuthorsList \u003d getAsListWithoutOverridePrefix(record, IGNORE_AUTHOR_LIST_CONFIG_HEADER);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"gok99"},"content":"        String ignoreFileSizeLimit \u003d get(record, IGNORE_FILESIZE_LIMIT_HEADER);"},{"lineNumber":101,"author":{"gitId":"gok99"},"content":"        boolean isFileSizeLimitIgnored \u003d ignoreFileSizeLimit.equalsIgnoreCase(IGNORE_FILESIZE_LIMIT_KEYWORD);"},{"lineNumber":102,"author":{"gitId":"gok99"},"content":""},{"lineNumber":103,"author":{"gitId":"gok99"},"content":"        if (!isFileSizeLimitIgnored \u0026\u0026 !ignoreFileSizeLimit.isEmpty()) {"},{"lineNumber":104,"author":{"gitId":"gok99"},"content":"            logger.warning("},{"lineNumber":105,"author":{"gitId":"gok99"},"content":"                    \"Ignoring unknown value \" + ignoreFileSizeLimit + \" in ignore filesize limit column.\");"},{"lineNumber":106,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"gok99"},"content":""},{"lineNumber":108,"author":{"gitId":"gok99"},"content":"        String skipIgnoredFileAnalysis \u003d get(record, SKIP_IGNORED_FILE_ANALYSIS_HEADER);"},{"lineNumber":109,"author":{"gitId":"gok99"},"content":"        boolean isIgnoredFileAnalysisSkipped \u003d skipIgnoredFileAnalysis.equalsIgnoreCase("},{"lineNumber":110,"author":{"gitId":"gok99"},"content":"                SKIP_IGNORED_FILE_ANALYSIS_KEYWORD);"},{"lineNumber":111,"author":{"gitId":"gok99"},"content":""},{"lineNumber":112,"author":{"gitId":"gok99"},"content":"        if (!isIgnoredFileAnalysisSkipped \u0026\u0026 !skipIgnoredFileAnalysis.isEmpty()) {"},{"lineNumber":113,"author":{"gitId":"gok99"},"content":"            logger.warning("},{"lineNumber":114,"author":{"gitId":"gok99"},"content":"                    \"Ignoring unknown value \" + skipIgnoredFileAnalysis + \" in skip ignored file analysis column.\");"},{"lineNumber":115,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"gok99"},"content":""},{"lineNumber":117,"author":{"gitId":"gok99"},"content":"        if (isFileSizeLimitIgnored \u0026\u0026 isIgnoredFileAnalysisSkipped) {"},{"lineNumber":118,"author":{"gitId":"gok99"},"content":"            logger.warning(\"Ignoring skip ignored file analysis column since file size limit is ignored\");"},{"lineNumber":119,"author":{"gitId":"gok99"},"content":"            isIgnoredFileAnalysisSkipped \u003d false;"},{"lineNumber":120,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"gok99"},"content":""},{"lineNumber":122,"author":{"gitId":"gok99"},"content":"        boolean isFileSizeLimitOverriding \u003d isElementOverridingStandaloneConfig(record, FILESIZE_LIMIT_HEADER);"},{"lineNumber":123,"author":{"gitId":"gok99"},"content":"        List\u003cString\u003e fileSizeLimitStringList \u003d getAsListWithoutOverridePrefix(record, FILESIZE_LIMIT_HEADER);"},{"lineNumber":124,"author":{"gitId":"gok99"},"content":"        long fileSizeLimit \u003d RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT;"},{"lineNumber":125,"author":{"gitId":"gok99"},"content":""},{"lineNumber":126,"author":{"gitId":"gok99"},"content":"        // If file diff limit is specified"},{"lineNumber":127,"author":{"gitId":"gok99"},"content":"        if (isFileSizeLimitIgnored \u0026\u0026 fileSizeLimitStringList.size() \u003e 0) {"},{"lineNumber":128,"author":{"gitId":"gok99"},"content":"            logger.warning(\"Ignoring file size limit column since file size limit is ignored\");"},{"lineNumber":129,"author":{"gitId":"gok99"},"content":"            isFileSizeLimitOverriding \u003d false;"},{"lineNumber":130,"author":{"gitId":"gok99"},"content":"        } else if (fileSizeLimitStringList.size() \u003e 0) {"},{"lineNumber":131,"author":{"gitId":"gok99"},"content":"            String fileSizeLimitString \u003d fileSizeLimitStringList.get(0).trim();"},{"lineNumber":132,"author":{"gitId":"gok99"},"content":"            int parseValue;"},{"lineNumber":133,"author":{"gitId":"gok99"},"content":"            if (!StringsUtil.isNumeric(fileSizeLimitString)"},{"lineNumber":134,"author":{"gitId":"gok99"},"content":"                    || (parseValue \u003d Integer.parseInt(fileSizeLimitString)) \u003c\u003d 0) {"},{"lineNumber":135,"author":{"gitId":"gok99"},"content":"                logger.warning(String.format(\"Values in \\\"%s\\\" column should be positive integers.\","},{"lineNumber":136,"author":{"gitId":"gok99"},"content":"                        FILESIZE_LIMIT_HEADER));"},{"lineNumber":137,"author":{"gitId":"gok99"},"content":"                isFileSizeLimitOverriding \u003d false;"},{"lineNumber":138,"author":{"gitId":"gok99"},"content":"            } else {"},{"lineNumber":139,"author":{"gitId":"gok99"},"content":"                fileSizeLimit \u003d parseValue;"},{"lineNumber":140,"author":{"gitId":"gok99"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"gok99"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"gok99"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String ignoreStandaloneConfig \u003d get(record, IGNORE_STANDALONE_CONFIG_HEADER);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        boolean isStandaloneConfigIgnored \u003d ignoreStandaloneConfig.equalsIgnoreCase(IGNORE_STANDALONE_CONFIG_KEYWORD);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (!isStandaloneConfigIgnored \u0026\u0026 !ignoreStandaloneConfig.isEmpty()) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            logger.warning("},{"lineNumber":148,"author":{"gitId":"-"},"content":"                    \"Ignoring unknown value \" + ignoreStandaloneConfig + \" in ignore standalone config column.\");"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        String shallowCloningConfig \u003d get(record, SHALLOW_CLONING_CONFIG_HEADER);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        boolean isShallowCloningPerformed \u003d shallowCloningConfig.equalsIgnoreCase(SHALLOW_CLONING_CONFIG_KEYWORD);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        if (!isShallowCloningPerformed \u0026\u0026 !shallowCloningConfig.isEmpty()) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            logger.warning("},{"lineNumber":156,"author":{"gitId":"-"},"content":"                    \"Ignoring unknown value \" + shallowCloningConfig + \" in shallow cloning column.\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        String findPreviousAuthorsConfig \u003d get(record, FIND_PREVIOUS_AUTHORS_CONFIG_HEADER);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        boolean isFindingPreviousAuthorsPerformed \u003d findPreviousAuthorsConfig"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                                                        .equalsIgnoreCase(FIND_PREVIOUS_AUTHORS_KEYWORD);"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        if (!isFindingPreviousAuthorsPerformed \u0026\u0026 !findPreviousAuthorsConfig.isEmpty()) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            logger.warning("},{"lineNumber":165,"author":{"gitId":"-"},"content":"                    \"Ignoring unknown value \" + findPreviousAuthorsConfig + \" in find previous authors column.\");"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d new RepoConfiguration("},{"lineNumber":169,"author":{"gitId":"gok99"},"content":"                location, branch, formats, ignoreGlobList, fileSizeLimit, isStandaloneConfigIgnored,"},{"lineNumber":170,"author":{"gitId":"gok99"},"content":"                isFileSizeLimitIgnored, ignoreCommitList, isFormatsOverriding, isIgnoreGlobListOverriding,"},{"lineNumber":171,"author":{"gitId":"gok99"},"content":"                isIgnoreCommitListOverriding, isFileSizeLimitOverriding, isShallowCloningPerformed,"},{"lineNumber":172,"author":{"gitId":"gok99"},"content":"                isFindingPreviousAuthorsPerformed, isIgnoredFileAnalysisSkipped);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        config.setIgnoredAuthorsList(ignoredAuthorsList);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        config.setIsIgnoredAuthorsListOverriding(isIgnoredAuthorsListOverriding);"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        if (results.contains(config)) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            logger.warning(\"Ignoring duplicated repository \" + location + \" \" + branch);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        results.add(config);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":4,"yhtMinceraft1010X":6,"gok99":53,"-":120}},{"path":"src/main/java/reposense/parser/ReportConfigJsonParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.lang.reflect.Type;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.google.gson.reflect.TypeToken;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Parses json file from {@link Path} and creates a new {@link ReportConfiguration} object."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ReportConfigJsonParser extends JsonParser\u003cReportConfiguration\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String REPORT_CONFIG_FILENAME \u003d \"report-config.json\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Gets the type of {@link ReportConfiguration} for json conversion."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Type getType() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new TypeToken\u003cReportConfiguration\u003e(){}.getType();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Converts json file from the given {@code path} and returns a {@link ReportConfiguration} object."},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code path} is invalid."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ReportConfiguration parse(Path path) throws IOException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return fromJson(path);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":4,"-":30}},{"path":"src/main/java/reposense/parser/SinceDateArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Verifies and parses a string-formatted since date to a {@link LocalDateTime} object."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class SinceDateArgumentType extends DateArgumentType {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * When user specifies \"d1\", arbitrary first commit date will be returned."},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * This date is equivalent to 1970-01-01 00:00:00 in UTC time."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Then, ReportGenerator will replace the arbitrary since date with the earliest commit date."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String FIRST_COMMIT_DATE_SHORTHAND \u003d \"d1\";"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final ZonedDateTime ARBITRARY_FIRST_COMMIT_DATE_UTC \u003d ZonedDateTime.ofInstant("},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"            Instant.ofEpochMilli(0), ZoneId.of(\"Z\"));"},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime ARBITRARY_FIRST_COMMIT_DATE_LOCAL \u003d ARBITRARY_FIRST_COMMIT_DATE_UTC"},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"            .toLocalDateTime();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns an arbitrary year {@link SinceDateArgumentType#ARBITRARY_FIRST_COMMIT_DATE_LOCAL} if user specifies"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND} in {@code value}, or attempts to return the"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * desired date otherwise."},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws ArgumentParserException if the given date cannot be parsed."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public Optional\u003cLocalDateTime\u003e convert(ArgumentParser parser, Argument arg, String value)"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws ArgumentParserException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (FIRST_COMMIT_DATE_SHORTHAND.equals(value)) {"},{"lineNumber":40,"author":{"gitId":"yhtMinceraft1010X"},"content":"            return Optional.of(ARBITRARY_FIRST_COMMIT_DATE_LOCAL);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String sinceDate \u003d TimeUtil.extractDate(value);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return super.convert(parser, arg, sinceDate + \" 00:00:00\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@link SinceDateArgumentType#ARBITRARY_FIRST_COMMIT_DATE_LOCAL}, which is the"},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@link LocalDateTime} of {@link SinceDateArgumentType#ARBITRARY_FIRST_COMMIT_DATE_UTC}."},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateLocal() {"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return ARBITRARY_FIRST_COMMIT_DATE_LOCAL;"},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@link SinceDateArgumentType#ARBITRARY_FIRST_COMMIT_DATE_UTC} adjusted for the time zone based on"},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@code toZoneId} and converted to a {@link LocalDateTime} object."},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateConverted(ZoneId toZoneId) {"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return ARBITRARY_FIRST_COMMIT_DATE_UTC.withZoneSameInstant(toZoneId).toLocalDateTime();"},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":32,"-":29}},{"path":"src/main/java/reposense/parser/StandaloneConfigJsonParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.lang.reflect.Type;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.google.gson.reflect.TypeToken;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.StandaloneConfig;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Parses json file from {@link Path} and creates a new {@link StandaloneConfig} object."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class StandaloneConfigJsonParser extends JsonParser\u003cStandaloneConfig\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Gets the type of {@link StandaloneConfig} for json conversion."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public Type getType() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new TypeToken\u003cStandaloneConfig\u003e(){}.getType();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Converts json file from the given {@code path} and returns a {@link StandaloneConfig} object."},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code path} is invalid."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public StandaloneConfig parse(Path path) throws IOException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return fromJson(path);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":4,"-":29}},{"path":"src/main/java/reposense/parser/UntilDateArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Verifies and parses a string-formatted until date to a {@link LocalDateTime} object."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class UntilDateArgumentType extends DateArgumentType {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public Optional\u003cLocalDateTime\u003e convert(ArgumentParser parser, Argument arg, String value)"},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws ArgumentParserException {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String untilDate \u003d TimeUtil.extractDate(value);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return super.convert(parser, arg, untilDate + \" 23:59:59\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":4,"-":18}},{"path":"src/main/java/reposense/parser/ZoneIdArgumentType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Argument;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentType;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Verifies and parses a string-formatted zone id to a {@link ZoneId} object."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ZoneIdArgumentType implements ArgumentType\u003cZoneId\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_TIMEZONE_INVALID \u003d"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \"The timezone provided is invalid, please use a more widely accepted format. E.g. UTC[±hh[mm]]\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ZoneId convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            return ZoneId.of(value);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new ArgumentParserException(MESSAGE_TIMEZONE_INVALID, parser);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":25}},{"path":"src/main/java/reposense/report/ErrorSummary.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":" * Holds the data of set of repos that failed to analyze and the reasons for the failed operation."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ErrorSummary {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static ErrorSummary instance \u003d null;"},{"lineNumber":13,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static Set\u003cMap\u003cString, String\u003e\u003e errorSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static ErrorSummary getInstance() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            instance \u003d new ErrorSummary();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return instance;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"     * Adds an error message for {@code repoName} with the reason {@code errorMessage} into a set of errors."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void addErrorMessage(String repoName, String errorMessage) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e errorDetails \u003d new HashMap\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        errorDetails.put(\"repoName\", repoName);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        errorDetails.put(\"errorMessage\", errorMessage);"},{"lineNumber":29,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        errorSet.add(errorDetails);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"     * Returns a compiled set of repos that failed to analyze and the corresponding reasons."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public Set\u003cMap\u003cString, String\u003e\u003e getErrorSet() {"},{"lineNumber":36,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        return errorSet;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"     * Clears all previously stored set of errors in {@link ErrorSummary#errorSet}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void clearErrorSet() {"},{"lineNumber":43,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        errorSet.clear();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Zhou-Jiahao-1998":12,"-":33}},{"path":"src/main/java/reposense/report/RepoCloner.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.FileUtil.getRepoParentFolder;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.git.GitBranch;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.git.GitCatFile;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.git.GitClone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.git.GitRevList;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.git.GitShow;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitCloneException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.system.CommandRunnerProcess;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.system.CommandRunnerProcessException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Handles asynchronous cloning of repos to allow multiple repos to be cloned and analyzed concurrently."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class RepoCloner {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_CLONING \u003d \"Cloning in parallel from %s...\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_CLONING_SHALLOW \u003d \"Shallow cloning in parallel from %s...\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_CLONING_SHALLOW \u003d"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \"Exception met while running shallow clone of repo \\\"%s\\\".\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_CLONING_PARTIAL \u003d \"Partial cloning from %s...\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_CLONING_PARTIAL \u003d"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \"Exception met while running partial clone of repo \\\"%s\\\".\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_CLONING_SHALLOW_PARTIAL \u003d \"Shallow partial cloning from %s...\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_CLONING_SHALLOW_PARTIAL \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \"Exception met while running shallow partial clone of repo \\\"%s\\\".\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_WAITING_FOR_CLONING \u003d \"Waiting for cloning of %s to complete...\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COMPLETE_CLONING \u003d \"Cloning of %s completed!\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_DELETING_DIRECTORY \u003d \"Error deleting report directory.\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_CLONING \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \"Exception met while trying to clone the repo \\\"%s\\\", will skip this repo.\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_GETTING_BRANCH \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \"Exception met while trying to get current branch of %s (%s), will skip this repo.\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final int MAX_NO_OF_REPOS \u003d 2;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(RepoCloner.class);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final boolean DEFAULT_IS_FRESH_CLONE_FOR_TEST_REQUIRED \u003d false;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private RepoConfiguration[] configs \u003d new RepoConfiguration[MAX_NO_OF_REPOS];"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private int currentIndex \u003d 0;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private int previousIndex \u003d 0;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private boolean isCurrentRepoCloned \u003d false;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private String currentRepoDefaultBranch;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private CommandRunnerProcess crp;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Spawns a process to clone the bare repository specified by {@code config}."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Does not wait for process to finish executing."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void cloneBare(RepoConfiguration config) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        cloneBare(config, DEFAULT_IS_FRESH_CLONE_FOR_TEST_REQUIRED);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Spawns a process to clone the bare repository specified by {@code config}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Does not wait for process to finish executing."},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void cloneBare(RepoConfiguration config, boolean shouldFreshClone) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        configs[currentIndex] \u003d config;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!config.isShallowCloningPerformed()) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            isCurrentRepoCloned \u003d spawnCloneProcess(config, shouldFreshClone);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            boolean didShallowPartialCloneSucceed \u003d"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                    spawnShallowPartialCloneProcess(config, shouldFreshClone);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            String shallowPartialBareRoot \u003d FileUtil.getShallowPartialBareRepoPath(config).toString();"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"            if (!didShallowPartialCloneSucceed || GitRevList.checkIsEmptyRepo(shallowPartialBareRoot)) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                isCurrentRepoCloned \u003d spawnCloneProcess(config, shouldFreshClone);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"            List\u003cString\u003e graftedCommits \u003d GitRevList.getRootCommits(shallowPartialBareRoot);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            List\u003cString\u003e graftedCommitParents \u003d GitCatFile.getParentsOfCommits(shallowPartialBareRoot, graftedCommits);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"            boolean didPartialCloneSucceed \u003d spawnPartialCloneProcess(config, shouldFreshClone);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            if (!didPartialCloneSucceed) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                isCurrentRepoCloned \u003d spawnCloneProcess(config, shouldFreshClone);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"            String partialBareRoot \u003d FileUtil.getPartialBareRepoPath(config).toString();"},{"lineNumber":103,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime sinceDate;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                List\u003cString\u003e distinctParents \u003d graftedCommitParents.stream().distinct().collect(Collectors.toList());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                sinceDate \u003d GitShow.getEarliestCommitDate(partialBareRoot, distinctParents);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            } catch (CommitNotFoundException e) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                sinceDate \u003d null;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"            isCurrentRepoCloned \u003d (sinceDate !\u003d null)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                    ? spawnShallowCloneProcess(config, sinceDate, shouldFreshClone)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                    : spawnCloneProcess(config, shouldFreshClone);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Waits for current clone process to finish executing and returns the {@link RepoLocation} of the corresponding"},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@link RepoConfiguration}."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public RepoLocation getClonedRepoLocation() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (isCurrentRepoCloned) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            isCurrentRepoCloned \u003d waitForCloneProcess(configs[currentIndex]);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!isCurrentRepoCloned) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            deleteDirectory(configs[currentIndex].getRepoRoot());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String bareRepoPath \u003d FileUtil.getBareRepoPath(configs[currentIndex]).toString();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            currentRepoDefaultBranch \u003d GitBranch.getCurrentBranch(bareRepoPath);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        } catch (GitBranchException gbe) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            // GitBranch will throw this exception when repository is empty"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_ERROR_GETTING_BRANCH,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                    configs[currentIndex].getLocation(), configs[currentIndex].getBranch()), gbe);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        cleanupPrevRepoFolder();"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        previousIndex \u003d currentIndex;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        currentIndex \u003d (currentIndex + 1) % configs.length;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return configs[previousIndex].getLocation();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Cleans up data associated with a particular repo given by {@code config}."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void cleanupRepo(RepoConfiguration config) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        deleteDirectory(getRepoParentFolder(config).toString());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Cleans up after all repos have been cloned and analyzed."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void cleanup() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        deleteDirectory(FileUtil.REPOS_ADDRESS);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Spawns a process to clone repo specified in {@code config}. Does not wait for process to finish executing."},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Should only handle a maximum of one spawned process at any time."},{"lineNumber":164,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private boolean spawnCloneProcess(RepoConfiguration config, boolean shouldFreshClone) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assert(crp \u003d\u003d null);"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            if (!SystemUtil.isTestEnvironment()) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                FileUtil.deleteDirectory(FileUtil.getBareRepoPath(config).toString());"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"            Path repoDirectoryPath \u003d getRepoParentFolder(config);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            Path repoPath \u003d Paths.get(repoDirectoryPath.toString(), config.getRepoName());"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"            if (SystemUtil.isTestEnvironment() \u0026\u0026 Files.exists(repoPath) \u0026\u0026 !shouldFreshClone) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                logger.info(\"Skipped cloning from \" + config.getLocation()"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                        + \" as it was cloned before and cloning is not forced.\");"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"            Files.createDirectories(repoDirectoryPath);"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_START_CLONING, config.getLocation()));"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"            Path outputDirectory \u003d Paths.get(repoDirectoryPath.toString(),"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                    FileUtil.getBareRepoFolderName(config));"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"            crp \u003d GitClone.cloneBareAsync(config, Paths.get(\".\"), outputDirectory.toString());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        } catch (GitCloneException | IOException e) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_ERROR_CLONING, config.getDisplayName()), e);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Spawns a process to shallow clone repo specified in {@code config} based on {@code shallowSinceDate}."},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * Does not wait for process to finish executing."},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Should only handle a maximum of one spawned process at any time."},{"lineNumber":202,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private boolean spawnShallowCloneProcess(RepoConfiguration config, LocalDateTime shallowSinceDate,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            boolean shouldFreshClone) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assert(crp \u003d\u003d null);"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            if (!SystemUtil.isTestEnvironment()) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                FileUtil.deleteDirectory(FileUtil.getBareRepoPath(config).toString());"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"            Path repoDirectoryPath \u003d getRepoParentFolder(config);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            Path repoPath \u003d Paths.get(repoDirectoryPath.toString(), config.getRepoName());"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"            if (SystemUtil.isTestEnvironment() \u0026\u0026 Files.exists(repoPath) \u0026\u0026 !shouldFreshClone) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                logger.info(\"Skipped cloning from \" + config.getLocation()"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                        + \" as it was cloned before and cloning is not forced.\");"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"            Files.createDirectories(repoDirectoryPath);"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"            Path outputDirectory \u003d Paths.get(repoDirectoryPath.toString(),"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                    FileUtil.getBareRepoFolderName(config));"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_START_CLONING_SHALLOW, config.getLocation()));"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            crp \u003d GitClone.cloneShallowBareAsync(config, Paths.get(\".\"), outputDirectory.toString(),"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    shallowSinceDate);"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        } catch (GitCloneException | IOException e) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_ERROR_CLONING_SHALLOW, config.getDisplayName()), e);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     * Spawns a process to create partial clone of repo specified in {@code config}."},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * Waits for process to finish executing."},{"lineNumber":240,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":241,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    private boolean spawnPartialCloneProcess(RepoConfiguration config, boolean shouldFreshClone) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        assert(crp \u003d\u003d null);"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            if (!SystemUtil.isTestEnvironment()) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                FileUtil.deleteDirectory(FileUtil.getPartialBareRepoPath(config).toString());"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"            Path repoDirectoryPath \u003d getRepoParentFolder(config);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            Path repoPath \u003d Paths.get(repoDirectoryPath.toString(), config.getRepoName());"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"            if (SystemUtil.isTestEnvironment() \u0026\u0026 Files.exists(repoPath) \u0026\u0026 !shouldFreshClone) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                logger.info(\"Skipped cloning from \" + config.getLocation()"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                        + \" as it was cloned before and cloning is not forced.\");"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"            Files.createDirectories(repoDirectoryPath);"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"            Path outputDirectory \u003d Paths.get(repoDirectoryPath.toString(),"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                    FileUtil.getPartialBareRepoFolderName(config));"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_START_CLONING_PARTIAL, config.getLocation()));"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            GitClone.clonePartialBare(config, Paths.get(\".\"), outputDirectory.toString());"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        } catch (GitCloneException | IOException e) {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_ERROR_CLONING_PARTIAL, config.getDisplayName()), e);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"-"},"content":"     * Spawns a process to create shallow partial clone of repo specified in {@code config}."},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * Waits for process to finish executing."},{"lineNumber":276,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":277,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    private boolean spawnShallowPartialCloneProcess(RepoConfiguration config, boolean shouldFreshClone) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        assert(crp \u003d\u003d null);"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            if (!SystemUtil.isTestEnvironment()) {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                FileUtil.deleteDirectory(FileUtil.getShallowPartialBareRepoPath(config).toString());"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":285,"author":{"gitId":"-"},"content":"            Path repoDirectoryPath \u003d getRepoParentFolder(config);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            Path repoPath \u003d Paths.get(repoDirectoryPath.toString(), config.getRepoName());"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"            if (SystemUtil.isTestEnvironment() \u0026\u0026 Files.exists(repoPath) \u0026\u0026 !shouldFreshClone) {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                logger.info(\"Skipped cloning from \" + config.getLocation()"},{"lineNumber":290,"author":{"gitId":"-"},"content":"                        + \" as it was cloned before and cloning is not forced.\");"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"            Files.createDirectories(repoDirectoryPath);"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"            Path outputDirectory \u003d Paths.get(repoDirectoryPath.toString(),"},{"lineNumber":297,"author":{"gitId":"-"},"content":"                    FileUtil.getShallowPartialBareRepoFolderName(config));"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_START_CLONING_SHALLOW_PARTIAL, config.getLocation()));"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            GitClone.cloneShallowPartialBare(config, Paths.get(\".\"), outputDirectory.toString(),"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                    config.getSinceDate());"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        } catch (GitCloneException | IOException e) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_ERROR_CLONING_SHALLOW_PARTIAL, config.getDisplayName()), e);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":310,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Waits for previously spawned clone process to finish executing. Uses {@code config} to find the locations of"},{"lineNumber":311,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * both the original and cloned repo as well as repo name."},{"lineNumber":312,"author":{"gitId":"-"},"content":"     * Should only be called after {@code spawnCloneProcess} has been called."},{"lineNumber":313,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    private boolean waitForCloneProcess(RepoConfiguration config) {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"            Path repoPath \u003d Paths.get(FileUtil.REPOS_ADDRESS, config.getRepoFolderName(), config.getRepoName());"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"            if (SystemUtil.isTestEnvironment() \u0026\u0026 Files.exists(repoPath)) {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_WAITING_FOR_CLONING, config.getLocation()));"},{"lineNumber":323,"author":{"gitId":"-"},"content":"            crp.waitForProcess();"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_COMPLETE_CLONING, config.getLocation()));"},{"lineNumber":325,"author":{"gitId":"-"},"content":"        } catch (RuntimeException | CommandRunnerProcessException e) {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            crp \u003d null;"},{"lineNumber":327,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_ERROR_CLONING, config.getDisplayName()), e);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        crp \u003d null;"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":335,"author":{"gitId":"-"},"content":"     * Deletes previously cloned repo directories that are not in use anymore."},{"lineNumber":336,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    private void cleanupPrevRepoFolder() {"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        if (previousIndex !\u003d currentIndex) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"            deleteDirectory(configs[previousIndex].getRepoRoot());"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":344,"author":{"gitId":"-"},"content":"     * Deletes the {@code root} directory, unless RepoSense is currently being tested."},{"lineNumber":345,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    private void deleteDirectory(String root) {"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        if (SystemUtil.isTestEnvironment()) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":352,"author":{"gitId":"-"},"content":"            FileUtil.deleteDirectory(root);"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, MESSAGE_ERROR_DELETING_DIRECTORY, ioe);"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"    public String getCurrentRepoDefaultBranch() {"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return currentRepoDefaultBranch;"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":14,"-":347}},{"path":"src/main/java/reposense/report/ReportGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.concurrent.ExecutorService;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.concurrent.Executors;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.authorship.AuthorshipReporter;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.authorship.model.AuthorshipSummary;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.commits.CommitsReporter;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitContributionSummary;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.git.GitBlame;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.git.GitClone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import reposense.git.GitRevParse;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import reposense.git.GitShortlog;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import reposense.git.GitShow;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitCloneException;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import reposense.model.StandaloneConfig;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import reposense.parser.StandaloneConfigJsonParser;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import reposense.report.exception.NoAuthorsWithCommitsFoundException;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import reposense.util.ProgressTracker;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":57,"author":{"gitId":"-"},"content":" * Contains report generation related functionalities."},{"lineNumber":58,"author":{"gitId":"-"},"content":" */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"public class ReportGenerator {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String REPOSENSE_CONFIG_FOLDER \u003d \"_reposense\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final String REPOSENSE_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ReportGenerator.class);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    // zip file which contains all the report template files"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final String TEMPLATE_FILE \u003d \"/templateZip.zip\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the config provided by %s (%s).\";"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_CREATING_DIRECTORY \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            \"Error has occurred while creating repo directory for %s (%s), will skip this repo.\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_STANDALONE_CONFIG \u003d \"%s (%s) does not contain a standalone config file.\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_IGNORING_STANDALONE_CONFIG \u003d \"Ignoring standalone config file in %s (%s).\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MALFORMED_STANDALONE_CONFIG \u003d \"%s/%s/%s is malformed for %s (%s).\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_AUTHORS_SPECIFIED \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            \"%s (%s) has no authors specified, using all authors by default.\";"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            \"No authors found with commits for %s (%s).\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_ANALYSIS \u003d \"Analyzing %s (%s)...\";"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COMPLETE_ANALYSIS \u003d \"Analysis of %s (%s) completed!\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_REPORT_GENERATED \u003d \"The report is generated at %s\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_BRANCH_DOES_NOT_EXIST \u003d \"Branch %s does not exist in %s! Analysis terminated.\";"},{"lineNumber":81,"author":{"gitId":"gok99"},"content":"    private static final String MESSAGE_MISSING_TEMPLATE \u003d"},{"lineNumber":82,"author":{"gitId":"gok99"},"content":"            \"Unable to find template file. Proceeding to generate report...\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_CLONING \u003d \"Failed to clone from %s\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_EXPANDING_COMMIT \u003d \"Cannot expand %s, it shall remain unexpanded\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static final String LOG_BRANCH_DOES_NOT_EXIST \u003d \"Branch \\\"%s\\\" does not exist.\";"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_CLONING_OR_BRANCHING \u003d \"Exception met while cloning or checking out.\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static final String LOG_UNEXPECTED_ERROR \u003d \"Unexpected error stack trace for %s:\\n\u003e%s\";"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static LocalDateTime earliestSinceDate \u003d null;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static ProgressTracker progressTracker \u003d null;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e assetsFilesWhiteList \u003d"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            Collections.unmodifiableList(Arrays.asList(new String[] {\"favicon.ico\"}));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static final boolean DEFAULT_SHOULD_FRESH_CLONE \u003d false;"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Generates the authorship and commits JSON file for each repo in {@code configs} at {@code outputPath}, as"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * well as the summary JSON file of all the repos."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param configs The list of repos to analyze."},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param outputPath The location at which to save the report."},{"lineNumber":103,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param assetsPath The location at which assets for generating the report are stored."},{"lineNumber":104,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param reportConfig The config for the output report."},{"lineNumber":105,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param generationDate The time at which the report was generated."},{"lineNumber":106,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param cliSinceDate The date-time from which to start analyzing commits."},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param untilDate The cut-off date-time for analyzing commits."},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param isSinceDateProvided The boolean variable for whether client provided a sinceDate."},{"lineNumber":109,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param isUntilDateProvided The boolean variable for whether client provided an untilDate."},{"lineNumber":110,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param numCloningThreads The number of threads to use to clone the repos."},{"lineNumber":111,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param numAnalysisThreads The number of threads to use to analyze the repos."},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param reportGenerationTimeProvider Supplier for time taken to generate the report."},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param zoneId The timezone to adjust all date-times to."},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return The list of file paths that were generated."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @throws IOException if templateZip.zip does not exists in jar file."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static List\u003cPath\u003e generateReposReport(List\u003cRepoConfiguration\u003e configs, String outputPath, String assetsPath,"},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":"            ReportConfiguration reportConfig, String generationDate, LocalDateTime cliSinceDate,"},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided, int numCloningThreads,"},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"            int numAnalysisThreads, Supplier\u003cString\u003e reportGenerationTimeProvider, ZoneId zoneId) throws IOException {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return generateReposReport(configs, outputPath, assetsPath, reportConfig, generationDate,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                cliSinceDate, untilDate, isSinceDateProvided, isUntilDateProvided, numCloningThreads,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                numAnalysisThreads, reportGenerationTimeProvider, zoneId, DEFAULT_SHOULD_FRESH_CLONE);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Generates the authorship and commits JSON file for each repo in {@code configs} at {@code outputPath}, as"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * well as the summary JSON file of all the repos."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param configs The list of repos to analyze."},{"lineNumber":131,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param outputPath The location at which to save the report."},{"lineNumber":132,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param assetsPath The location at which assets for generating the report are stored."},{"lineNumber":133,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param reportConfig The config for the output report."},{"lineNumber":134,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param generationDate The time at which the report was generated."},{"lineNumber":135,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param cliSinceDate The date-time from which to start analyzing commits."},{"lineNumber":136,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param untilDate The cut-off date-time for analyzing commits."},{"lineNumber":137,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param isSinceDateProvided The boolean variable for whether client provided a sinceDate."},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param isUntilDateProvided The boolean variable for whether client provided an untilDate."},{"lineNumber":139,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param numCloningThreads The number of threads to use to clone the repos."},{"lineNumber":140,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param numAnalysisThreads The number of threads to use to analyze the repos."},{"lineNumber":141,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param reportGenerationTimeProvider Supplier for time taken to generate the report."},{"lineNumber":142,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param zoneId The timezone to adjust all date-times to."},{"lineNumber":143,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param shouldFreshClone The boolean variable for whether to clone a repo again during tests."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @return the list of file paths that were generated."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @throws IOException if templateZip.zip does not exists in jar file."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static List\u003cPath\u003e generateReposReport(List\u003cRepoConfiguration\u003e configs, String outputPath, String assetsPath,"},{"lineNumber":148,"author":{"gitId":"yhtMinceraft1010X"},"content":"            ReportConfiguration reportConfig, String generationDate, LocalDateTime cliSinceDate,"},{"lineNumber":149,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided, int numCloningThreads,"},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"            int numAnalysisThreads, Supplier\u003cString\u003e reportGenerationTimeProvider, ZoneId zoneId,"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            boolean shouldFreshClone) throws IOException {"},{"lineNumber":152,"author":{"gitId":"gok99"},"content":"        prepareTemplateFile(outputPath);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        if (Files.exists(Paths.get(assetsPath))) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            FileUtil.copyDirectoryContents(assetsPath, outputPath, assetsFilesWhiteList);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        earliestSinceDate \u003d null;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        progressTracker \u003d new ProgressTracker(configs.size());"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e reportFoldersAndFiles \u003d cloneAndAnalyzeRepos(configs, outputPath,"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                numCloningThreads, numAnalysisThreads, shouldFreshClone);"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime reportSinceDate \u003d (TimeUtil.isEqualToArbitraryFirstDateConverted(cliSinceDate, zoneId))"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                ? earliestSinceDate : cliSinceDate;"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Optional\u003cPath\u003e summaryPath \u003d FileUtil.writeJsonFile("},{"lineNumber":167,"author":{"gitId":"-"},"content":"                new SummaryJson(configs, reportConfig, generationDate,"},{"lineNumber":168,"author":{"gitId":"yhtMinceraft1010X"},"content":"                        reportSinceDate, untilDate, isSinceDateProvided,"},{"lineNumber":169,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                        isUntilDateProvided, RepoSense.getVersion(), ErrorSummary.getInstance().getErrorSet(),"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                        reportGenerationTimeProvider.get(), zoneId),"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                getSummaryResultPath(outputPath));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        summaryPath.ifPresent(reportFoldersAndFiles::add);"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_REPORT_GENERATED, outputPath));"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return reportFoldersAndFiles;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Copies the template file to the specified {@code outputPath} for the repo report to be generated."},{"lineNumber":181,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":182,"author":{"gitId":"gok99"},"content":"     * @throws IOException if I/O error encountered while copying template file."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"gok99"},"content":"    private static void prepareTemplateFile(String outputPath) throws IOException {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        InputStream is \u003d RepoSense.class.getResourceAsStream(TEMPLATE_FILE);"},{"lineNumber":186,"author":{"gitId":"gok99"},"content":"        if (is !\u003d null) {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            FileUtil.copyTemplate(is, outputPath);"},{"lineNumber":188,"author":{"gitId":"gok99"},"content":"        } else {"},{"lineNumber":189,"author":{"gitId":"gok99"},"content":"            logger.warning(MESSAGE_MISSING_TEMPLATE);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Groups {@link RepoConfiguration} with the same {@link RepoLocation} together so that they are only cloned once."},{"lineNumber":195,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    private static Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e groupConfigsByRepoLocation("},{"lineNumber":197,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            RepoLocation location \u003d config.getLocation();"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"            if (!repoLocationMap.containsKey(location)) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                repoLocationMap.put(location, new ArrayList\u003c\u003e());"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            repoLocationMap.get(location).add(config);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        return repoLocationMap;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     * Clone, analyze and generate the report for repositories in {@code repoLocationMap}."},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * Performs cloning and analysis of each repository in parallel, and generates the report."},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Also removes any configs that failed to clone or analyze from {@code configs}."},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * By default, runs in multi-threaded mode with {@code numCloningThreads} threads for cloning"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * and {@code numAnalysisThreads} threads for analysis."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * To turn off multi-threading, run the program with the flags"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * {@code --cloning-threads 1 --analysis-threads 1}."},{"lineNumber":218,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":219,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for each repository."},{"lineNumber":221,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e cloneAndAnalyzeRepos(List\u003cRepoConfiguration\u003e configs, String outputPath,"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            int numCloningThreads, int numAnalysisThreads, boolean shouldFreshClone) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d groupConfigsByRepoLocation(configs);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        List\u003cRepoLocation\u003e repoLocationList \u003d new ArrayList\u003c\u003e(repoLocationMap.keySet());"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"        // Fixed thread pools are used to limit the number of threads used by cloning and analysis jobs at any one time"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        ExecutorService cloneExecutor \u003d Executors.newFixedThreadPool(numCloningThreads);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        ExecutorService analyzeExecutor \u003d Executors.newFixedThreadPool(numAnalysisThreads);"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        List\u003cCompletableFuture\u003cAnalyzeJobOutput\u003e\u003e analyzeJobFutures \u003d new ArrayList\u003c\u003e();"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        for (RepoLocation location : repoLocationList) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configsToAnalyze \u003d repoLocationMap.get(location);"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"            // The `CompletableFuture.supplyAsync` method is used to clone the repo in parallel."},{"lineNumber":236,"author":{"gitId":"-"},"content":"            // Note that the `cloneExecutor` is passed as a parameter to ensure that the number of threads used"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            // for cloning is no more than `numCloningThreads`."},{"lineNumber":238,"author":{"gitId":"-"},"content":"            CompletableFuture\u003cCloneJobOutput\u003e cloneFuture \u003d CompletableFuture.supplyAsync(() -\u003e"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    cloneRepo(configsToAnalyze.get(0), location, shouldFreshClone), cloneExecutor);"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"            // The `thenApplyAsync` method is used to analyze the cloned repo in parallel."},{"lineNumber":242,"author":{"gitId":"-"},"content":"            // This ensures that the analysis job for each repo will only be run after the repo has been cloned."},{"lineNumber":243,"author":{"gitId":"-"},"content":"            // Note that the `analyzeExecutor` is passed as a parameter to ensure that the number of threads used"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            // for analysis is no more than `numAnalysisThreads`."},{"lineNumber":245,"author":{"gitId":"-"},"content":"            CompletableFuture\u003cAnalyzeJobOutput\u003e analyzeFuture \u003d cloneFuture.thenApplyAsync("},{"lineNumber":246,"author":{"gitId":"-"},"content":"                    cloneJobOutput -\u003e analyzeRepos(outputPath, configsToAnalyze, cloneJobOutput), analyzeExecutor);"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"            analyzeJobFutures.add(analyzeFuture);"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"        // Next, we collect the list of outputs from all the analyze jobs"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        List\u003cAnalyzeJobOutput\u003e jobOutputs \u003d analyzeJobFutures.stream()"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                .map(CompletableFuture::join)"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"        // Finally, the ExecutorService objects are shut down to prevent memory leaks"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        cloneExecutor.shutdown();"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        analyzeExecutor.shutdown();"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cPath\u003e generatedFiles \u003d jobOutputs"},{"lineNumber":261,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .stream()"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                .flatMap(jobOutput -\u003e jobOutput.getFiles().stream())"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        List\u003cRepoLocation\u003e cloneFailLocations \u003d jobOutputs"},{"lineNumber":266,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":267,"author":{"gitId":"-"},"content":"                .filter(jobOutput -\u003e !jobOutput.isCloneSuccessful())"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                .map(jobOutput -\u003e jobOutput.getLocation())"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        cloneFailLocations.forEach(location -\u003e handleCloningFailed(configs, location));"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"        List\u003cAnalysisErrorInfo\u003e analysisErrors \u003d jobOutputs"},{"lineNumber":273,"author":{"gitId":"-"},"content":"                .stream()"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                .flatMap(jobOutput -\u003e jobOutput.getAnalyseErrors().stream())"},{"lineNumber":275,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        analysisErrors.forEach(errorInfo -\u003e"},{"lineNumber":277,"author":{"gitId":"-"},"content":"                handleAnalysisFailed(configs, errorInfo.getFailedConfig(), errorInfo.getErrorMessage()));"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        repoCloner.cleanup();"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Clones repo specified by {@code config} at {@code location}."},{"lineNumber":286,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For test environments, cloning is skipped if it has been done before and {@code shouldFreshClone} is false."},{"lineNumber":287,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":288,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return A {@link CloneJobOutput} object comprising the {@code location} of the repo, whether the cloning was"},{"lineNumber":289,"author":{"gitId":"-"},"content":"     * successful, and the {@code defaultBranch} of the repo."},{"lineNumber":290,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static CloneJobOutput cloneRepo(RepoConfiguration config, RepoLocation location, boolean shouldFreshClone) {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        repoCloner.cloneBare(config, shouldFreshClone);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        RepoLocation clonedRepoLocation \u003d repoCloner.getClonedRepoLocation();"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        if (clonedRepoLocation !\u003d null) {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"            String defaultBranch \u003d repoCloner.getCurrentRepoDefaultBranch();"},{"lineNumber":297,"author":{"gitId":"-"},"content":"            return new CloneJobOutput(location, defaultBranch);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            return new CloneJobOutput(location);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":304,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Analyzes all repos in {@code configsToAnalyze} and generates their report at {@code outputPath}."},{"lineNumber":305,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Uses {@code cloneJobOutput} to find repo location, default branch and whether cloning was successful."},{"lineNumber":306,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":307,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return An {@link AnalyzeJobOutput} object comprising the {@code location} of the repo, whether the cloning was"},{"lineNumber":308,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * successful, the list of {@code generatedFiles} by the analysis and a list of {@code analysisErrors} encountered."},{"lineNumber":309,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    private static AnalyzeJobOutput analyzeRepos(String outputPath, List\u003cRepoConfiguration\u003e configsToAnalyze,"},{"lineNumber":311,"author":{"gitId":"-"},"content":"            CloneJobOutput cloneJobOutput) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        RepoLocation location \u003d cloneJobOutput.getLocation();"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        boolean cloneSuccessful \u003d cloneJobOutput.isCloneSuccessful();"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        List\u003cAnalysisErrorInfo\u003e analysisErrors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        if (!cloneSuccessful) {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"            repoCloner.cleanupRepo(configsToAnalyze.get(0));"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            return new AnalyzeJobOutput(location, cloneSuccessful, generatedFiles, analysisErrors);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        Iterator\u003cRepoConfiguration\u003e itr \u003d configsToAnalyze.iterator();"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        while (itr.hasNext()) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            progressTracker.incrementProgress();"},{"lineNumber":325,"author":{"gitId":"-"},"content":"            RepoConfiguration configToAnalyze \u003d itr.next();"},{"lineNumber":326,"author":{"gitId":"-"},"content":"            configToAnalyze.updateBranch(cloneJobOutput.getDefaultBranch());"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"            Path repoReportDirectory \u003d Paths.get(outputPath, configToAnalyze.getOutputFolderName());"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            logger.info("},{"lineNumber":330,"author":{"gitId":"-"},"content":"                    String.format(progressTracker.getProgress() + \" \""},{"lineNumber":331,"author":{"gitId":"-"},"content":"                            + MESSAGE_START_ANALYSIS, configToAnalyze.getLocation(), configToAnalyze.getBranch()));"},{"lineNumber":332,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                GitRevParse.assertBranchExists(configToAnalyze, FileUtil.getBareRepoPath(configToAnalyze));"},{"lineNumber":334,"author":{"gitId":"chan-j-d"},"content":"                GitClone.cloneFromBareAndUpdateBranch(Paths.get(\".\"), configToAnalyze);"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"                FileUtil.createDirectory(repoReportDirectory);"},{"lineNumber":337,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(analyzeRepo(configToAnalyze, repoReportDirectory.toString()));"},{"lineNumber":338,"author":{"gitId":"-"},"content":"            } catch (IOException ioe) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"                String logMessage \u003d String.format(MESSAGE_ERROR_CREATING_DIRECTORY,"},{"lineNumber":340,"author":{"gitId":"-"},"content":"                        configToAnalyze.getLocation(), configToAnalyze.getBranch());"},{"lineNumber":341,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, logMessage, ioe);"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            } catch (GitBranchException gbe) {"},{"lineNumber":343,"author":{"gitId":"-"},"content":"                logger.log(Level.SEVERE, String.format(MESSAGE_BRANCH_DOES_NOT_EXIST,"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                        configToAnalyze.getBranch(), configToAnalyze.getLocation()), gbe);"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze,"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                        String.format(LOG_BRANCH_DOES_NOT_EXIST, configToAnalyze.getBranch())));"},{"lineNumber":347,"author":{"gitId":"-"},"content":"            } catch (GitCloneException gce) {"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze, LOG_ERROR_CLONING_OR_BRANCHING));"},{"lineNumber":349,"author":{"gitId":"-"},"content":"            } catch (NoAuthorsWithCommitsFoundException nafe) {"},{"lineNumber":350,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, String.format(MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND,"},{"lineNumber":351,"author":{"gitId":"-"},"content":"                        configToAnalyze.getLocation(), configToAnalyze.getBranch()));"},{"lineNumber":352,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(generateEmptyRepoReport(repoReportDirectory.toString(),"},{"lineNumber":353,"author":{"gitId":"-"},"content":"                        Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND));"},{"lineNumber":354,"author":{"gitId":"-"},"content":"                generateEmptyRepoReport(repoReportDirectory.toString(), Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND);"},{"lineNumber":355,"author":{"gitId":"-"},"content":"            } catch (Exception e) {"},{"lineNumber":356,"author":{"gitId":"-"},"content":"                StringWriter sw \u003d new StringWriter();"},{"lineNumber":357,"author":{"gitId":"-"},"content":"                e.printStackTrace(new PrintWriter(sw));"},{"lineNumber":358,"author":{"gitId":"-"},"content":"                logger.log(Level.SEVERE, sw.toString());"},{"lineNumber":359,"author":{"gitId":"-"},"content":"                analysisErrors.add(new AnalysisErrorInfo(configToAnalyze,"},{"lineNumber":360,"author":{"gitId":"-"},"content":"                        String.format(LOG_UNEXPECTED_ERROR, configToAnalyze.getLocation(), sw.toString())));"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        repoCloner.cleanupRepo(configsToAnalyze.get(0));"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return new AnalyzeJobOutput(location, cloneSuccessful, generatedFiles, analysisErrors);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":368,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Analyzes repo specified by {@code config} and generates the report at {@code repoReportDirectory}."},{"lineNumber":369,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":370,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for the repo specified by {@code config}."},{"lineNumber":371,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws NoAuthorsWithCommitsFoundException if there are no authors with commits found for the repo."},{"lineNumber":372,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":373,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static List\u003cPath\u003e analyzeRepo(RepoConfiguration config, String repoReportDirectory)"},{"lineNumber":374,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws NoAuthorsWithCommitsFoundException {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        // preprocess the config and repo"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        updateRepoConfig(config);"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        updateAuthorList(config);"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        updateIgnoreCommitList(config);"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"        if (config.isFindingPreviousAuthorsPerformed()) {"},{"lineNumber":381,"author":{"gitId":"-"},"content":"            generateIgnoreRevsFile(config);"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"        AuthorshipSummary authorshipSummary \u003d AuthorshipReporter.generateAuthorshipSummary(config);"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        CommitContributionSummary commitSummary \u003d CommitsReporter.generateCommitSummary(config);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d generateIndividualRepoReport(repoReportDirectory, commitSummary, authorshipSummary);"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_COMPLETE_ANALYSIS, config.getLocation(), config.getBranch()));"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":392,"author":{"gitId":"-"},"content":"     * Updates {@code config} with configuration provided by repository if exists."},{"lineNumber":393,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":394,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws AssertionError if there is a problem with the file existence check."},{"lineNumber":395,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":396,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void updateRepoConfig(RepoConfiguration config) throws AssertionError {"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        Path configJsonPath \u003d"},{"lineNumber":398,"author":{"gitId":"-"},"content":"                Paths.get(config.getRepoRoot(), REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE).toAbsolutePath();"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"        if (!Files.exists(configJsonPath)) {"},{"lineNumber":401,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_NO_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"},{"lineNumber":402,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"        if (config.isStandaloneConfigIgnored()) {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_IGNORING_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"},{"lineNumber":407,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":411,"author":{"gitId":"-"},"content":"            StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(configJsonPath);"},{"lineNumber":412,"author":{"gitId":"-"},"content":"            config.update(standaloneConfig);"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        } catch (JsonSyntaxException jse) {"},{"lineNumber":414,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_MALFORMED_STANDALONE_CONFIG, config.getDisplayName(),"},{"lineNumber":415,"author":{"gitId":"-"},"content":"                    REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE, config.getLocation(), config.getBranch()));"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        } catch (IllegalArgumentException iae) {"},{"lineNumber":417,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON,"},{"lineNumber":418,"author":{"gitId":"-"},"content":"                    iae.getMessage(), config.getLocation(), config.getBranch()));"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":420,"author":{"gitId":"-"},"content":"            throw new AssertionError("},{"lineNumber":421,"author":{"gitId":"-"},"content":"                    \"This exception should not happen as we have performed the file existence check.\");"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":423,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":426,"author":{"gitId":"-"},"content":"     * Find and update {@code config} with all the author identities if author list is empty."},{"lineNumber":427,"author":{"gitId":"-"},"content":"     * Also removes ignored authors from author list."},{"lineNumber":428,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":429,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws NoAuthorsWithCommitsFoundException if there are no authors with commits found for the repo."},{"lineNumber":430,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    private static void updateAuthorList(RepoConfiguration config) throws NoAuthorsWithCommitsFoundException {"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        if (config.getAuthorList().isEmpty()) {"},{"lineNumber":433,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_NO_AUTHORS_SPECIFIED, config.getLocation(), config.getBranch()));"},{"lineNumber":434,"author":{"gitId":"-"},"content":"            List\u003cAuthor\u003e authorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"            if (authorList.isEmpty()) {"},{"lineNumber":437,"author":{"gitId":"-"},"content":"                throw new NoAuthorsWithCommitsFoundException();"},{"lineNumber":438,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"            config.setAuthorList(authorList);"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        config.removeIgnoredAuthors();"},{"lineNumber":443,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":444,"author":{"gitId":"-"},"content":""},{"lineNumber":445,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":446,"author":{"gitId":"-"},"content":"     * Updates {@code config} with the exact list of commits if commit ranges are provided."},{"lineNumber":447,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":448,"author":{"gitId":"-"},"content":"    private static void updateIgnoreCommitList(RepoConfiguration config) {"},{"lineNumber":449,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e updatedIgnoreCommitList \u003d config.getIgnoreCommitList().stream()"},{"lineNumber":450,"author":{"gitId":"-"},"content":"                .flatMap(x -\u003e CommitHash.getHashes(config.getRepoRoot(), config.getBranch(), x))"},{"lineNumber":451,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(updatedIgnoreCommitList);"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"-"},"content":""},{"lineNumber":455,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":456,"author":{"gitId":"-"},"content":"     * Adds {@code configs} that were not successfully cloned from {@code failedRepoLocation}"},{"lineNumber":457,"author":{"gitId":"-"},"content":"     * into the list of errors in the summary report and removes them from the list of {@code configs}."},{"lineNumber":458,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":459,"author":{"gitId":"-"},"content":"    private static void handleCloningFailed(List\u003cRepoConfiguration\u003e configs, RepoLocation failedRepoLocation) {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e failedConfigs \u003d configs.stream()"},{"lineNumber":461,"author":{"gitId":"-"},"content":"                .filter(config -\u003e config.getLocation().equals(failedRepoLocation))"},{"lineNumber":462,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":463,"author":{"gitId":"-"},"content":"        handleFailedConfigs(configs, failedConfigs, String.format(LOG_ERROR_CLONING, failedRepoLocation));"},{"lineNumber":464,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":467,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds {@code failedConfig} that failed analysis into the list of errors in the summary report along with"},{"lineNumber":468,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * an {@code errorMessage} and removes {@code failedConfig} from the list of {@code configs}."},{"lineNumber":469,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    private static void handleAnalysisFailed(List\u003cRepoConfiguration\u003e configs, RepoConfiguration failedConfig,"},{"lineNumber":471,"author":{"gitId":"-"},"content":"            String errorMessage) {"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        handleFailedConfigs(configs, Collections.singletonList(failedConfig), errorMessage);"},{"lineNumber":473,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":476,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds {@code failedConfigs} that failed cloning/analysis into the list of errors in the summary report along"},{"lineNumber":477,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * with an {@code errorMessage} and removes {@code failedConfigs} from the list of {@code configs}."},{"lineNumber":478,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":479,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static void handleFailedConfigs(List\u003cRepoConfiguration\u003e configs, List\u003cRepoConfiguration\u003e failedConfigs,"},{"lineNumber":480,"author":{"gitId":"yhtMinceraft1010X"},"content":"            String errorMessage) {"},{"lineNumber":481,"author":{"gitId":"-"},"content":"        Iterator\u003cRepoConfiguration\u003e itr \u003d configs.iterator();"},{"lineNumber":482,"author":{"gitId":"-"},"content":"        while (itr.hasNext()) {"},{"lineNumber":483,"author":{"gitId":"-"},"content":"            RepoConfiguration config \u003d itr.next();"},{"lineNumber":484,"author":{"gitId":"-"},"content":"            if (failedConfigs.contains(config)) {"},{"lineNumber":485,"author":{"gitId":"-"},"content":"                ErrorSummary.getInstance().addErrorMessage(config.getDisplayName(), errorMessage);"},{"lineNumber":486,"author":{"gitId":"-"},"content":"                itr.remove();"},{"lineNumber":487,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":489,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":490,"author":{"gitId":"-"},"content":""},{"lineNumber":491,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":492,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Generates an empty report at the {@code repoReportDirectory}, with the author display name"},{"lineNumber":493,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * as {@code displayName}."},{"lineNumber":494,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":495,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for this empty report."},{"lineNumber":496,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":497,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e generateEmptyRepoReport(String repoReportDirectory, String displayName) {"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        CommitReportJson emptyCommitReportJson \u003d new CommitReportJson(displayName);"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(emptyCommitReportJson, getIndividualCommitsPath(repoReportDirectory))"},{"lineNumber":502,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(Collections.emptyList(), getIndividualAuthorshipPath(repoReportDirectory))"},{"lineNumber":504,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":505,"author":{"gitId":"-"},"content":""},{"lineNumber":506,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":507,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":510,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Generates a report for a single repository at {@code repoReportDirectory} based on {@code commitSummary}"},{"lineNumber":511,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * and {@code authorshipSummary}."},{"lineNumber":512,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":513,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for this report."},{"lineNumber":514,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":515,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static List\u003cPath\u003e generateIndividualRepoReport(String repoReportDirectory,"},{"lineNumber":516,"author":{"gitId":"yhtMinceraft1010X"},"content":"            CommitContributionSummary commitSummary, AuthorshipSummary authorshipSummary) {"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        CommitReportJson commitReportJson \u003d new CommitReportJson(commitSummary, authorshipSummary);"},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":520,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(commitReportJson, getIndividualCommitsPath(repoReportDirectory))"},{"lineNumber":521,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(authorshipSummary.getFileResults(), getIndividualAuthorshipPath(repoReportDirectory))"},{"lineNumber":523,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":524,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":525,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":526,"author":{"gitId":"-"},"content":""},{"lineNumber":527,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":528,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates the .git-blame-ignore-revs file containing the contents of {@code ignoreCommitList}"},{"lineNumber":529,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * in the repo root directory of {@code config}."},{"lineNumber":530,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":531,"author":{"gitId":"-"},"content":"    private static void generateIgnoreRevsFile(RepoConfiguration config) {"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e expandedIgnoreCommitList \u003d config.getIgnoreCommitList().stream()"},{"lineNumber":533,"author":{"gitId":"-"},"content":"                .map(CommitHash::toString)"},{"lineNumber":534,"author":{"gitId":"-"},"content":"                .map(commitHash -\u003e {"},{"lineNumber":535,"author":{"gitId":"-"},"content":"                    try {"},{"lineNumber":536,"author":{"gitId":"-"},"content":"                        return GitShow.getExpandedCommitHash(config.getRepoRoot(), commitHash);"},{"lineNumber":537,"author":{"gitId":"-"},"content":"                    } catch (CommitNotFoundException e) {"},{"lineNumber":538,"author":{"gitId":"-"},"content":"                        logger.warning(String.format(LOG_ERROR_EXPANDING_COMMIT, commitHash));"},{"lineNumber":539,"author":{"gitId":"-"},"content":"                        return new CommitHash(commitHash);"},{"lineNumber":540,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":541,"author":{"gitId":"-"},"content":"                })"},{"lineNumber":542,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":543,"author":{"gitId":"-"},"content":""},{"lineNumber":544,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(expandedIgnoreCommitList);"},{"lineNumber":545,"author":{"gitId":"-"},"content":"        FileUtil.writeIgnoreRevsFile(getIgnoreRevsFilePath(config.getRepoRoot()), config.getIgnoreCommitList());"},{"lineNumber":546,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":547,"author":{"gitId":"-"},"content":""},{"lineNumber":548,"author":{"gitId":"-"},"content":"    private static String getSummaryResultPath(String targetFileLocation) {"},{"lineNumber":549,"author":{"gitId":"-"},"content":"        return targetFileLocation + \"/\" + SummaryJson.SUMMARY_JSON_FILE_NAME;"},{"lineNumber":550,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":551,"author":{"gitId":"-"},"content":""},{"lineNumber":552,"author":{"gitId":"-"},"content":"    private static String getIgnoreRevsFilePath(String targetFileLocation) {"},{"lineNumber":553,"author":{"gitId":"-"},"content":"        return targetFileLocation + GitBlame.IGNORE_COMMIT_LIST_FILE_NAME;"},{"lineNumber":554,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":555,"author":{"gitId":"-"},"content":""},{"lineNumber":556,"author":{"gitId":"-"},"content":"    private static String getIndividualAuthorshipPath(String repoReportDirectory) {"},{"lineNumber":557,"author":{"gitId":"-"},"content":"        return repoReportDirectory + \"/authorship.json\";"},{"lineNumber":558,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":559,"author":{"gitId":"-"},"content":""},{"lineNumber":560,"author":{"gitId":"-"},"content":"    private static String getIndividualCommitsPath(String repoReportDirectory) {"},{"lineNumber":561,"author":{"gitId":"-"},"content":"        return repoReportDirectory + \"/commits.json\";"},{"lineNumber":562,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":563,"author":{"gitId":"-"},"content":""},{"lineNumber":564,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void setEarliestSinceDate(LocalDateTime newEarliestSinceDate) {"},{"lineNumber":565,"author":{"gitId":"yhtMinceraft1010X"},"content":"        if (earliestSinceDate \u003d\u003d null || newEarliestSinceDate.compareTo(earliestSinceDate) \u003c 0) {"},{"lineNumber":566,"author":{"gitId":"-"},"content":"            earliestSinceDate \u003d newEarliestSinceDate;"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":568,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":569,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":1,"yhtMinceraft1010X":79,"Zhou-Jiahao-1998":1,"gok99":8,"-":480}},{"path":"src/main/java/reposense/report/SummaryJson.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"import reposense.model.SupportedDomainUrlMap;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the structure of summary.json file in reposense-report folder."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class SummaryJson {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String SUMMARY_JSON_FILE_NAME \u003d \"summary.json\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final String repoSenseVersion;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final String reportGeneratedTime;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final String reportGenerationTime;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final ZoneId zoneId;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final String reportTitle;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cRepoConfiguration\u003e repos;"},{"lineNumber":25,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private final Set\u003cMap\u003cString, String\u003e\u003e errorSet;"},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private final LocalDateTime sinceDate;"},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private final LocalDateTime untilDate;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final boolean isSinceDateProvided;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final boolean isUntilDateProvided;"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    private final Map\u003cString, Map\u003cString, String\u003e\u003e supportedDomainUrlMap;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public SummaryJson(List\u003cRepoConfiguration\u003e repos, ReportConfiguration reportConfig, String reportGeneratedTime,"},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime sinceDate, LocalDateTime untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            String repoSenseVersion, Set\u003cMap\u003cString, String\u003e\u003e errorSet, String reportGenerationTime, ZoneId zoneId) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.repos \u003d repos;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.reportGeneratedTime \u003d reportGeneratedTime;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.reportGenerationTime \u003d reportGenerationTime;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.reportTitle \u003d reportConfig.getTitle();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.isSinceDateProvided \u003d isSinceDateProvided;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.isUntilDateProvided \u003d isUntilDateProvided;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.repoSenseVersion \u003d repoSenseVersion;"},{"lineNumber":44,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        this.errorSet \u003d errorSet;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        this.supportedDomainUrlMap \u003d SupportedDomainUrlMap.getDefaultDomainUrlMap();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":3,"yhtMinceraft1010X":4,"Zhou-Jiahao-1998":3,"-":38}},{"path":"src/main/java/reposense/system/CommandRunner.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.system;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains command running related functionalities."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandRunner {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Spawns a backend terminal process, with working directory at {@code path}, to execute the {@code command}."},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws RuntimeException if an exception happens while executing the {@code command}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static String runCommand(Path path, String command) throws RuntimeException {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        CommandRunnerProcess crp \u003d spawnCommandProcess(path, command);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            return crp.waitForProcess();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (CommandRunnerProcessException cre) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new RuntimeException(cre);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Spawns a backend terminal process, with working directory at {@code path}, to execute the {@code command}."},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Does not wait for process to finish executing."},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static CommandRunnerProcess runCommandAsync(Path path, String command) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return spawnCommandProcess(path, command);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Spawns a {@link CommandRunnerProcess} to execute {@code command}, with working directory at {@code path}."},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Does not wait for process to finish executing."},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws RuntimeException if an error happens while attempting to spawn the process."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static CommandRunnerProcess spawnCommandProcess(Path path, String command) throws RuntimeException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ProcessBuilder pb \u003d null;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (SystemUtil.isWindows()) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            pb \u003d new ProcessBuilder()"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                    .command(new String[]{\"CMD\", \"/c\", command})"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                    .directory(path.toFile());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            pb \u003d new ProcessBuilder()"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                    .command(new String[]{\"bash\", \"-c\", command})"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                    .directory(path.toFile());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Process p \u003d null;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            p \u003d pb.start();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new RuntimeException(\"Error Creating Thread:\" + e.getMessage());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        StreamGobbler errorGobbler \u003d new StreamGobbler(p.getErrorStream());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        StreamGobbler outputGobbler \u003d new StreamGobbler(p.getInputStream());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        outputGobbler.start();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        errorGobbler.start();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new CommandRunnerProcess(path, command, p, outputGobbler, errorGobbler);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":13,"-":51}},{"path":"src/main/java/reposense/system/CommandRunnerProcess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.system;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Represents a process created by {@link CommandRunner}."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class CommandRunnerProcess {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private Path path;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private String command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Process process;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private StreamGobbler outputGobbler;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private StreamGobbler errorGobbler;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public CommandRunnerProcess("},{"lineNumber":17,"author":{"gitId":"-"},"content":"            Path path, String command, Process process, StreamGobbler outputGobbler, StreamGobbler errorGobbler) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        this.path \u003d path;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        this.command \u003d command;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.process \u003d process;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.outputGobbler \u003d outputGobbler;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.errorGobbler \u003d errorGobbler;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Waits for process to finish executing and returns the output from the execution."},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws CommandRunnerProcessException if process fails."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public String waitForProcess() throws CommandRunnerProcessException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        int exit \u003d 0;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            exit \u003d process.waitFor();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            outputGobbler.join();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            errorGobbler.join();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new CommandRunnerProcessException(\"Error Handling Thread.\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (exit \u003d\u003d 0) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return outputGobbler.getValue();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            String errorMessage \u003d \"Error returned from command \";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            errorMessage +\u003d command + \" on path \";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            errorMessage +\u003d path.toString() + \" :\\n\" + errorGobbler.getValue();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new CommandRunnerProcessException(errorMessage);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":3,"-":46}},{"path":"src/main/java/reposense/system/CommandRunnerProcessException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.system;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Signals that an error has occurred in {@link CommandRunnerProcess}."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class CommandRunnerProcessException extends Exception {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public CommandRunnerProcessException(String message) {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":10}},{"path":"src/main/java/reposense/system/CustomLogFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.system;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.fusesource.jansi.Ansi.ansi;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Instant;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZoneId;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.LogRecord;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.fusesource.jansi.Ansi;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.fusesource.jansi.AnsiConsole;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Custom log formatter for different handlers to display only relevant information."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class CustomLogFormatter extends SimpleFormatter {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"hh:mm:ss\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String ERROR_HIGHLIGHT \u003d ansi().bg(Ansi.Color.RED).fg(Ansi.Color.WHITE).a(\"[ERROR]\")"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            .reset().toString();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String WARNING_HIGHLIGHT \u003d ansi().bg(Ansi.Color.YELLOW).fg(Ansi.Color.BLACK).a(\"[WARNING]\")"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .reset().toString();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Map\u003cLevel, String\u003e formatMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CustomLogFormatter() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        formatMap.put(Level.WARNING, WARNING_HIGHLIGHT);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        formatMap.put(Level.SEVERE, ERROR_HIGHLIGHT);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AnsiConsole.systemInstall();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the string representation of the {@code record} with"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * the timestamp in hh:mm:ss and the record severity level if applicable."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public synchronized String format(LogRecord record) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"        builder.append(dateFormat.format(LocalDateTime.ofInstant(Instant.ofEpochMilli(record.getMillis()),"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"                ZoneId.systemDefault()))).append(\" - \");"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (formatMap.containsKey(record.getLevel())) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            builder.append(formatMap.get(record.getLevel())).append(\" \");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        builder.append(formatMessage(record));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        builder.append(\"\\n\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":8,"-":47}},{"path":"src/main/java/reposense/system/LogsManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.system;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":" * Configures and manages the loggers and handlers, including their levels."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class LogsManager {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Whenever the log file size exceeds {@code MAX_FILE_SIZE_IN_BYTES} it rolls over to another file"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // The maximum number of files to store the logs is {@code FILE_COUNT}"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final int FILE_COUNT \u003d 2;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final int MEGABYTE \u003d (1 \u003c\u003c 20);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d 5 * MEGABYTE; // 5MB"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final ArrayList\u003cLogger\u003e LOGGER_LIST \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // All the log files will be store with a .log extension"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // eg. reposense.log.0, in the logs/ folder of the working directory"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String LOG_FOLDER_NAME \u003d \"logs\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE_NAME \u003d \"reposense.log\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static Path logFolderLocation;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static Level currentConsoleLogLevel \u003d Level.INFO;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static Level currentFileLogLevel \u003d Level.INFO;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        LOGGER_LIST.add(logger);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (logFolderLocation !\u003d null) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            addFileHandler(logger);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return logger;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates a {@link Logger} for the given {@code clazz} name."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds the {@link ConsoleHandler} to the {@code logger}."},{"lineNumber":64,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates the {@link ConsoleHandler} if it is null."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Removes all the handlers from {@code logger}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Adds the {@link FileHandler} to the {@code logger}."},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates {@link FileHandler} if it is null."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Path path \u003d logFolderLocation.resolve(LOG_FOLDER_NAME);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            if (!Files.exists(path)) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                Files.createDirectories(path);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                logger.info(\"Log folder has been successfully created\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            logger.log(Level.SEVERE, e.getMessage(), e);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates a {@link FileHandler} for the log file."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Path path \u003d logFolderLocation.resolve(LOG_FOLDER_NAME).resolve(LOG_FILE_NAME);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(path.toString(), MAX_FILE_SIZE_IN_BYTES, FILE_COUNT, true);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentFileLogLevel);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return fileHandler;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates a {@link ConsoleHandler} to output the log to console."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentConsoleLogLevel);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        consoleHandler.setFormatter(new CustomLogFormatter());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return consoleHandler;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Sets the log folder location using {@code location} and adds file handler with this location to all the loggers"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * created."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static void setLogFolderLocation(Path location) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        logFolderLocation \u003d location;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        LOGGER_LIST.stream().forEach(logger -\u003e addFileHandler(logger));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}"},{"lineNumber":137,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yhtMinceraft1010X":8,"-":129}},{"path":"src/main/java/reposense/system/ReportServer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.system;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Desktop;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.net.URI;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URISyntaxException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import net.freeutils.httpserver.HTTPServer;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Handles starting of the server to display the report."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ReportServer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String LOCAL_HOST_URL \u003d \"http://localhost:%s/\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ReportServer.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Starts a server at {@code port} and loads the {@code requestPath} from the local disk."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static void startServer(int port, Path requestPath) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        logger.info(\"Starting a server at port \" + port + \"...\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        HTTPServer server \u003d new HTTPServer(port);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // default virtual host"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        HTTPServer.VirtualHost host \u003d server.getVirtualHost(null);"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            // a handler to process the request and give the corresponding response"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            host.addContext(\"/\", new HTTPServer.FileContextHandler(requestPath.toFile()));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            server.start();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            launchBrowser(String.format(LOCAL_HOST_URL, port));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            logger.info(\"Press Ctrl + C or equivalent to stop the server\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            logger.log(Level.SEVERE, ioe.getMessage(), ioe);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Launches the default browser with {@code url}."},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws IOException if the browser cannot be launched for the {@code url}."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static void launchBrowser(String url) throws IOException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            if (Desktop.isDesktopSupported() \u0026\u0026 Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                Desktop.getDesktop().browse(new URI(url));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                logger.info(\"Loading \" + url + \" on the default browser...\");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                logger.severe(\"Browser could not be launched. Please refer to the user guide to\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"                        + \" manually view the report\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (URISyntaxException ue) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            logger.log(Level.SEVERE, ue.getMessage(), ue);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":2,"-":59}},{"path":"src/main/java/reposense/util/FileUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.FileOutputStream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.InputStream;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.OutputStream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.ByteBuffer;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.StandardCopyOption;"},{"lineNumber":16,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.zip.ZipEntry;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.zip.ZipInputStream;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.zip.ZipOutputStream;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"import com.google.gson.Gson;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import com.google.gson.GsonBuilder;"},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"import com.google.gson.JsonPrimitive;"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"import com.google.gson.JsonSerializer;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"import reposense.system.CommandRunner;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitId":"-"},"content":" * Contains file processing related functionalities."},{"lineNumber":42,"author":{"gitId":"-"},"content":" */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class FileUtil {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String REPOS_ADDRESS \u003d \"repos\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    // zip file which contains all the specified file types"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String ZIP_FILE \u003d \"archive.zip\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(FileUtil.class);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String GITHUB_API_DATE_FORMAT \u003d \"yyyy-MM-dd\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final ByteBuffer buffer \u003d ByteBuffer.allocate(1 \u003c\u003c 11); // 2KB"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final String BARE_REPO_SUFFIX \u003d \"_bare\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String PARTIAL_REPO_SUFFIX \u003d \"_partial\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final String SHALLOW_PARTIAL_REPO_SUFFIX \u003d \"_shallow_partial\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FILE_PATH \u003d \"\\\"%s\\\" is an invalid file path. Skipping this directory.\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_FAIL_TO_ZIP_FILES \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            \"Exception occurred while attempting to zip the report files.\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_FAIL_TO_COPY_ASSETS \u003d"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            \"Exception occurred while attempting to copy custom assets.\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Zips all files of type {@code fileTypes} that are in the directory {@code pathsToZip} into a single file and"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * output it to {@code sourceAndOutputPath}."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static void zipFoldersAndFiles(List\u003cPath\u003e pathsToZip, Path sourceAndOutputPath, String... fileTypes) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        zipFoldersAndFiles(pathsToZip, sourceAndOutputPath, sourceAndOutputPath, fileTypes);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Zips all files listed in {@code pathsToZip} of type {@code fileTypes} located in the directory"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * {@code sourcePath} into {@code outputPath}."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void zipFoldersAndFiles(List\u003cPath\u003e pathsToZip, Path sourcePath, Path outputPath,"},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"            String... fileTypes) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        try ("},{"lineNumber":78,"author":{"gitId":"-"},"content":"                FileOutputStream fos \u003d new FileOutputStream(outputPath + File.separator + ZIP_FILE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                ZipOutputStream zos \u003d new ZipOutputStream(fos)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        ) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            for (Path pathToZip : pathsToZip) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                List\u003cPath\u003e allPaths \u003d getFilePaths(pathToZip, fileTypes);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                for (Path path : allPaths) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                    String filePath \u003d sourcePath.relativize(path.toAbsolutePath()).toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                    String zipEntry \u003d Files.isDirectory(path) ? filePath + File.separator : filePath;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    zos.putNextEntry(new ZipEntry(zipEntry.replace(\"\\\\\", \"/\")));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                    if (Files.isRegularFile(path)) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                        Files.copy(path, zos);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                    zos.closeEntry();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            logger.severe(MESSAGE_FAIL_TO_ZIP_FILES);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Writes the JSON file representing the {@code object} at the given {@code path}."},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return An {@link Optional} containing the {@link Path} to the JSON file, or an empty {@link Optional} if there"},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * was an error while writing the JSON file."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static Optional\u003cPath\u003e writeJsonFile(Object object, String path) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Gson gson \u003d new GsonBuilder()"},{"lineNumber":106,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .registerTypeAdapter(LocalDateTime.class, (JsonSerializer\u003cLocalDateTime\u003e) (date, typeOfSrc, context)"},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"                        -\u003e new JsonPrimitive(date.format(DateTimeFormatter.ofPattern(GITHUB_API_DATE_FORMAT))))"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .registerTypeAdapter(FileType.class, new FileType.FileTypeSerializer())"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .registerTypeAdapter(ZoneId.class, (JsonSerializer\u003cZoneId\u003e) (zoneId, typeOfSrc, context)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                        -\u003e new JsonPrimitive(zoneId.toString()))"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .create();"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Gson serializer from:"},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // https://stackoverflow.com/questions/39192945/serialize-java-8-localdate-as-yyyy-mm-dd-with-gson"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String result \u003d gson.toJson(object);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try (PrintWriter out \u003d new PrintWriter(path)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            out.print(result);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            out.print(\"\\n\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return Optional.of(path).map(Paths::get);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            logger.log(Level.SEVERE, e.getMessage(), e);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Writes the ignore revs file containing the {@code ignoreCommitList} at the given {@code path}."},{"lineNumber":130,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @return An {@link Optional} containing the {@link Path} to the ignore revs file, or an empty {@link Optional}"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * if there was an error while writing the ignore revs file."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static Optional\u003cPath\u003e writeIgnoreRevsFile(String path, List\u003cCommitHash\u003e ignoreCommitList) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String contentOfIgnoreRevsFile \u003d ignoreCommitList.stream()"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .map(CommitHash::toString)"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .reduce(\"\", (hashes, newHash) -\u003e hashes + newHash + \"\\n\");"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        try (PrintWriter out \u003d new PrintWriter(path)) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            out.print(contentOfIgnoreRevsFile);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return Optional.of(path).map(Paths::get);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            logger.log(Level.SEVERE, e.getMessage(), e);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Deletes the {@code root} directory."},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @throws IOException if the root path does not exist."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public static void deleteDirectory(String root) throws IOException {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        File rootDirectory \u003d Paths.get(root).toFile();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        if (rootDirectory.exists()) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            for (File file : rootDirectory.listFiles()) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                if (file.isDirectory()) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                    deleteDirectory(file.toString());"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                    file.delete();"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            rootDirectory.delete();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            if (rootDirectory.exists()) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                throw new IOException(String.format(\"Fail to delete directory %s\", rootDirectory));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Unzips the contents of the {@code zipSourcePath} into {@code outputPath}."},{"lineNumber":172,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code zipSourcePath} is an invalid path."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public static void unzip(Path zipSourcePath, Path outputPath) throws IOException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try (InputStream is \u003d Files.newInputStream(zipSourcePath)) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            unzip(is, outputPath);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * Unzips the contents of the {@code is} into {@code outputPath}."},{"lineNumber":183,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code is} refers to an invalid path."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public static void unzip(InputStream is, Path outputPath) throws IOException {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        try (ZipInputStream zis \u003d new ZipInputStream(is)) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            ZipEntry entry;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            Files.createDirectories(outputPath);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            while ((entry \u003d zis.getNextEntry()) !\u003d null) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                Path path \u003d Paths.get(outputPath.toString(), entry.getName());"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                // create the directories of the zip directory"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                if (entry.isDirectory()) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                    Files.createDirectories(path.toAbsolutePath());"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                    zis.closeEntry();"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                if (!Files.exists(path.getParent())) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                    Files.createDirectories(path.getParent());"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                try (OutputStream output \u003d Files.newOutputStream(path)) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                    int length;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                    while ((length \u003d zis.read(buffer.array())) \u003e 0) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                        output.write(buffer.array(), 0, length);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                zis.closeEntry();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Copies the template files from the {@code is} to the {@code outputPath}."},{"lineNumber":214,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code is} refers to an invalid path."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public static void copyTemplate(InputStream is, String outputPath) throws IOException {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        FileUtil.unzip(is, Paths.get(outputPath));"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * Copies files from {@code sourcePath} to the {@code outputPath}."},{"lineNumber":223,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code is} refers to an invalid path."},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    public static void copyDirectoryContents(String sourcePath, String outputPath) throws IOException {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        copyDirectoryContents(sourcePath, outputPath, null);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * Copies files from {@code sourcePath} to the {@code outputPath}."},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * If {@code whiteList} is provided, only filenames specified by the whitelist will be copied."},{"lineNumber":233,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * @throws IOException if {@code is} refers to an invalid path."},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public static void copyDirectoryContents(String sourcePath, String outputPath, List\u003cString\u003e whiteList)"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            throws IOException {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        Path source \u003d Paths.get(sourcePath);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        Path out \u003d Paths.get(outputPath);"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"        Files.walk(source, 1).skip(1).forEach(file -\u003e {"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            if (whiteList \u003d\u003d null || whiteList !\u003d null \u0026\u0026 whiteList.contains(file.getFileName().toString())) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                    Files.copy(file, out.resolve(source.relativize(file)), StandardCopyOption.REPLACE_EXISTING);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                } catch (IOException ioe) {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                    logger.severe(MESSAGE_FAIL_TO_COPY_ASSETS);"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * Creates the {@code dest} directory if it does not exist."},{"lineNumber":253,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":254,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws IOException if the directory could not be created."},{"lineNumber":255,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    public static void createDirectory(Path dest) throws IOException {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        Files.createDirectories(dest);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * Returns the relative path to the bare repo version of {@code config}."},{"lineNumber":262,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    public static Path getRepoParentFolder(RepoConfiguration config) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        return Paths.get(FileUtil.REPOS_ADDRESS, config.getRepoFolderName());"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitId":"-"},"content":"     * Returns the relative path to the bare repo version of {@code config}."},{"lineNumber":269,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    public static Path getBareRepoPath(RepoConfiguration config) {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        return Paths.get(FileUtil.REPOS_ADDRESS,"},{"lineNumber":272,"author":{"gitId":"-"},"content":"                config.getRepoFolderName(), config.getRepoName() + BARE_REPO_SUFFIX);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitId":"-"},"content":"     * Returns the relative path to the partial bare repo version of {@code config}."},{"lineNumber":277,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    public static Path getPartialBareRepoPath(RepoConfiguration config) {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        return Paths.get(FileUtil.REPOS_ADDRESS,"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                config.getRepoFolderName(), config.getRepoName() + PARTIAL_REPO_SUFFIX);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":284,"author":{"gitId":"-"},"content":"     * Returns the relative path to the shallow partial bare repo version of {@code config}."},{"lineNumber":285,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    public static Path getShallowPartialBareRepoPath(RepoConfiguration config) {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        return Paths.get(FileUtil.REPOS_ADDRESS,"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                config.getRepoFolderName(), config.getRepoName() + SHALLOW_PARTIAL_REPO_SUFFIX);"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitId":"-"},"content":"     * Returns the folder name of the bare repo version of {@code config}."},{"lineNumber":293,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    public static String getBareRepoFolderName(RepoConfiguration config) {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        return config.getRepoName() + BARE_REPO_SUFFIX;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":299,"author":{"gitId":"-"},"content":"     * Returns the folder name of the partial bare repo version of {@code config}."},{"lineNumber":300,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    public static String getPartialBareRepoFolderName(RepoConfiguration config) {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        return config.getRepoName() + PARTIAL_REPO_SUFFIX;"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":306,"author":{"gitId":"-"},"content":"     * Returns the folder name of the shallow partial bare repo version of {@code config}."},{"lineNumber":307,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    public static String getShallowPartialBareRepoFolderName(RepoConfiguration config) {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        return config.getRepoName() + SHALLOW_PARTIAL_REPO_SUFFIX;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":313,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} is a valid path."},{"lineNumber":314,"author":{"gitId":"-"},"content":"     * Produces log messages when the invalid file path is skipped."},{"lineNumber":315,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":316,"author":{"gitId":"chan-j-d"},"content":"    public static boolean isValidPathWithLogging(String path) {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"            Paths.get(path);"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, String.format(MESSAGE_INVALID_FILE_PATH, path));"},{"lineNumber":321,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":327,"author":{"gitId":"chan-j-d"},"content":"     * Returns true if {@code path} is a valid path."},{"lineNumber":328,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":329,"author":{"gitId":"chan-j-d"},"content":"    public static boolean isValidPath(String path) {"},{"lineNumber":330,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":331,"author":{"gitId":"chan-j-d"},"content":"            Paths.get(path);"},{"lineNumber":332,"author":{"gitId":"chan-j-d"},"content":"        } catch (InvalidPathException ipe) {"},{"lineNumber":333,"author":{"gitId":"chan-j-d"},"content":"            return false;"},{"lineNumber":334,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"-"},"content":""},{"lineNumber":338,"author":{"gitId":"-"},"content":"    public static boolean isEmptyFile(String directoryPath, String relativeFilePath) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        return (new File(directoryPath, relativeFilePath).length() \u003d\u003d 0);"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":343,"author":{"gitId":"chan-j-d"},"content":"     * Returns the Bash expanded version of the {@code filePath}."},{"lineNumber":344,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":345,"author":{"gitId":"chan-j-d"},"content":"    public static String getVariableExpandedFilePath(String filePath) {"},{"lineNumber":346,"author":{"gitId":"chan-j-d"},"content":"        String echoOutput \u003d CommandRunner.runCommand(Paths.get(\".\"), \"echo \" + filePath);"},{"lineNumber":347,"author":{"gitId":"chan-j-d"},"content":"        // CommandRunner returns some white space characters at the end"},{"lineNumber":348,"author":{"gitId":"chan-j-d"},"content":"        return echoOutput.trim();"},{"lineNumber":349,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":350,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":352,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a list of {@link Path} of {@code fileTypes} contained in the given {@code directoryPath} directory."},{"lineNumber":353,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":354,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws IOException if an error occurs while trying to access {@code directoryPath}."},{"lineNumber":355,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e getFilePaths(Path directoryPath, String... fileTypes) throws IOException {"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        return Files.walk(directoryPath)"},{"lineNumber":358,"author":{"gitId":"-"},"content":"                .filter(p -\u003e FileUtil.isFileTypeInPath(p, fileTypes) || Files.isDirectory(p))"},{"lineNumber":359,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":363,"author":{"gitId":"-"},"content":"     * Returns true if the {@code path} contains one of the {@code fileTypes} extension."},{"lineNumber":364,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    private static boolean isFileTypeInPath(Path path, String... fileTypes) {"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        return Arrays.stream(fileTypes).anyMatch(path.toString()::endsWith);"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":368,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":18,"yhtMinceraft1010X":27,"-":323}},{"path":"src/main/java/reposense/util/StringsUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Contains strings related utilities."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class StringsUtil {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private static final Pattern SPECIAL_SYMBOLS \u003d Pattern.compile(\"[@;:\u0026/\\\\\\\\!\u003c\u003e{}%#\\\"\\\\-\u003d\u0027()\\\\[\\\\].+*?^$|]\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Filters the {@code text}, returning only the lines that matches the given {@code regex}."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static String filterText(String text, String regex) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String[] split \u003d text.split(\"\\n\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        for (String line: split) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            if (line.matches(regex)) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                sb.append(line + \"\\n\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Converts all special symbol characters inside {@code regexString} to the {@code replacementCharacter}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static String replaceSpecialSymbols(String regexString, String replacementCharacter) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return SPECIAL_SYMBOLS.matcher(regexString).replaceAll(replacementCharacter);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"     * Adds quotes to the string."},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    public static String addQuotes(String original) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return \"\\\"\" + original + \"\\\"\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"     * Adds the appropriate quotation marks for a file path depending on the OS."},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    public static String addQuotesForFilePath(String filePath) {"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        if (SystemUtil.isWindows()) {"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"            return \"\\\"\" + filePath + \"\\\"\";"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"            for (int i \u003d 0; i \u003c filePath.length(); i++) {"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"                char c \u003d filePath.charAt(i);"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"                if (c \u003d\u003d \u0027\\\u0027\u0027) {"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"                    sb.append(\"\u0027\\\"\u0027\\\"\u0027\");"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"                } else {"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"                    sb.append(c);"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"            return \u0027\\\u0027\u0027 + sb.toString() + \u0027\\\u0027\u0027;"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Removes quotes at the start and end of {@code original}, if exists."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static String removeQuote(String original) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return (original.startsWith(\"\\\"\") \u0026\u0026 original.endsWith(\"\\\"\"))"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                ? original.substring(1, original.length() - 1)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                : original;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Removes trailing backslashes from a {@code string}, if it exists."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static String removeTrailingBackslash(String string) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (string.isEmpty()) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return string;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        int lastCharIndex \u003d string.length() - 1;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String editedString \u003d string;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        boolean isLastCharBackslash \u003d string.charAt(lastCharIndex) \u003d\u003d \u0027\\\\\u0027;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        while (isLastCharBackslash) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            editedString \u003d editedString.substring(0, lastCharIndex--);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            boolean isStringEmpty \u003d editedString.length() \u003d\u003d 0;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            isLastCharBackslash \u003d !isStringEmpty \u0026\u0026 editedString.charAt(lastCharIndex) \u003d\u003d \u0027\\\\\u0027;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return editedString;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"gok99"},"content":""},{"lineNumber":88,"author":{"gitId":"gok99"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"gok99"},"content":"     * Returns true iff {@code string} is purely numeric."},{"lineNumber":90,"author":{"gitId":"gok99"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"gok99"},"content":"    public static boolean isNumeric(String string) {"},{"lineNumber":92,"author":{"gitId":"gok99"},"content":"        return Pattern.compile(\"^\\\\d+$\").matcher(string).matches();"},{"lineNumber":93,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":23,"gok99":7,"-":64}},{"path":"src/main/java/reposense/util/SystemUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains system related functionalities."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class SystemUtil {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     * Returns true if the test environment is on Windows OS."},{"lineNumber":10,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static boolean isWindows() {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        return (System.getProperty(\"os.name\").toLowerCase().indexOf(\"win\") \u003e\u003d 0);"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns true if the current environment is a test environment (defined by build.gradle)."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static boolean isTestEnvironment() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String environment \u003d System.getenv(\"REPOSENSE_ENVIRONMENT\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return ((environment !\u003d null) \u0026\u0026 (environment.equals(\"TEST\")));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"-":21}},{"path":"src/main/java/reposense/util/TimeUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.parser.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Contains time related functionalities."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class TimeUtil {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static Long startTime;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String DATE_FORMAT_REGEX \u003d"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \"^((0?[1-9]|[12][0-9]|3[01])\\\\/(0?[1-9]|1[012])\\\\/(19|2[0-9])[0-9]{2})\";"},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"    // \"uuuu\" is used for year since \"yyyy\" does not work with ResolverStyle.STRICT"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final DateTimeFormatter CLI_ARGS_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu HH:mm:ss\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE \u003d"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\" cannot be later than \\\"Until Date\\\".\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE \u003d"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\" must not be later than today\u0027s date.\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Sets the {@code startTime} to be the current time."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static void startTimer() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        startTime \u003d System.nanoTime();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the formatted elapsed time from {@code startTime} until current time."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static String getElapsedTime() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        long endTime \u003d System.nanoTime();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        double elapsedTime \u003d (double) (endTime - startTime) / 1_000_000_000.0;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        int elapsedHours \u003d (int) elapsedTime / 3600;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        int elapsedMinutes \u003d (int) (elapsedTime % 3600) / 60;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        double elapsedSeconds \u003d elapsedTime % 60;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String formattedElapsedTime \u003d \"\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (elapsedHours \u003e 0) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            formattedElapsedTime +\u003d String.format(\" %d hour(s)\", elapsedHours);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (elapsedMinutes \u003e 0) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            formattedElapsedTime +\u003d String.format(\" %d minute(s)\", elapsedMinutes);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        formattedElapsedTime +\u003d String.format(\" %.2f second(s)\", elapsedSeconds);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return formattedElapsedTime;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns the formatted elapsed time from {@code startTime} until current time,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * with an additional explanatory string."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static String getElapsedTimeMessage() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return \"Elapsed processing time:\" + getElapsedTime();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link LocalDateTime} that is set to midnight for the given {@code sinceDate}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getSinceDate(LocalDateTime sinceDate) {"},{"lineNumber":71,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return sinceDate.withHour(0).withMinute(0).withSecond(0);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link LocalDateTime} that is set to 23:59:59 for the given {@code untilDate}."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getUntilDate(LocalDateTime untilDate) {"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return untilDate.withHour(23).withMinute(59).withSecond(59);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link LocalDateTime} that is one month before {@code cliUntilDate} (if present) or one month"},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * before report generation date otherwise."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getDateMinusAMonth(LocalDateTime cliUntilDate) {"},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return getSinceDate(cliUntilDate.minusMonths(1));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link LocalDateTime} that is {@code numOfDays} before {@code cliUntilDate} (if present) or one month"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * before report generation date otherwise."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getDateMinusNDays(LocalDateTime cliUntilDate, int numOfDays) {"},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return getSinceDate(cliUntilDate.minusDays(numOfDays));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link LocalDateTime} that is {@code numOfDays} after {@code cliSinceDate} (if present)."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getDatePlusNDays(LocalDateTime cliSinceDate, int numOfDays) {"},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return getUntilDate(cliSinceDate.plusDays(numOfDays));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Returns current date with time set to 23:59:59. The time zone is adjusted to the given {@code zoneId}."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getCurrentDate(ZoneId zoneId) {"},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return LocalDateTime.now(zoneId).withHour(23).withMinute(59).withSecond(59).withNano(0);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@link LocalDateTime} of {@code ARBITRARY_FIRST_COMMIT_DATE} in the UTC time zone."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateLocal() {"},{"lineNumber":115,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return SinceDateArgumentType.getArbitraryFirstCommitDateLocal();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@link LocalDateTime} of {@code ARBITRARY_FIRST_COMMIT_DATE} adjusted for the time zone based on"},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@code toZoneId}."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getArbitraryFirstCommitDateConverted(ZoneId toZoneId) {"},{"lineNumber":123,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return SinceDateArgumentType.getArbitraryFirstCommitDateConverted(toZoneId);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Checks whether the given {@code dateTime} is the {@code ARBITRARY_FIRST_COMMIT_DATE} in UTC time."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static boolean isEqualToArbitraryFirstDateUtc(LocalDateTime dateTime) {"},{"lineNumber":130,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return dateTime.equals(getArbitraryFirstCommitDateLocal());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Checks whether the given {@code dateTime} is the {@code ARBITRARY_FIRST_COMMIT_DATE} in the time zone given by"},{"lineNumber":135,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@code zoneId}."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static boolean isEqualToArbitraryFirstDateConverted(LocalDateTime dateTime, ZoneId zoneId) {"},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return dateTime.equals(getArbitraryFirstCommitDateConverted(zoneId));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Verifies that {@code sinceDate} is earlier than {@code untilDate}."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code sinceDate} supplied is later than {@code untilDate}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void verifyDatesRangeIsCorrect(LocalDateTime sinceDate, LocalDateTime untilDate)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throws ParseException {"},{"lineNumber":148,"author":{"gitId":"yhtMinceraft1010X"},"content":"        if (sinceDate.compareTo(untilDate) \u003e 0) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Verifies that {@code sinceDate} is no later than the date of report generation, given by {@code currentDate}."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code sinceDate} supplied is later than date of report generation."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static void verifySinceDateIsValid(LocalDateTime sinceDate, LocalDateTime currentDate)"},{"lineNumber":159,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throws ParseException {"},{"lineNumber":160,"author":{"gitId":"yhtMinceraft1010X"},"content":"        if (sinceDate.compareTo(currentDate) \u003e 0) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Extracts the first substring of {@code date} string that matches the {@code DATE_FORMAT_REGEX}."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public static String extractDate(String date) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Matcher matcher \u003d Pattern.compile(DATE_FORMAT_REGEX).matcher(date);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        String extractedDate \u003d date;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (matcher.find()) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            extractedDate \u003d matcher.group(1);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return extractedDate;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Parses the given {@code date} string as a {@link LocalDateTime} based on the {@code CLI_ARGS_DATE_FORMAT}."},{"lineNumber":179,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Uses {@link ResolverStyle#STRICT} to avoid unexpected dates like 31/02/2020."},{"lineNumber":180,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":181,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws java.text.ParseException if date cannot be parsed by the required format."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime parseDate(String date) throws java.text.ParseException {"},{"lineNumber":184,"author":{"gitId":"yhtMinceraft1010X"},"content":"        try {"},{"lineNumber":185,"author":{"gitId":"yhtMinceraft1010X"},"content":"            return LocalDateTime.parse(date, CLI_ARGS_DATE_FORMAT.withResolverStyle(ResolverStyle.STRICT));"},{"lineNumber":186,"author":{"gitId":"yhtMinceraft1010X"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":187,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throw new java.text.ParseException(String.format("},{"lineNumber":188,"author":{"gitId":"yhtMinceraft1010X"},"content":"                    \"Exception message: %s\\n\", e.getMessage()), e.getErrorIndex());"},{"lineNumber":189,"author":{"gitId":"yhtMinceraft1010X"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":60,"-":131}},{"path":"src/systemtest/java/reposense/ConfigSystemTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Assumptions;"},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.git.GitVersion;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.parser.ReportConfigJsonParser;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.SystemTestUtil;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class ConfigSystemTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String FT_TEMP_DIR \u003d \"ft_temp\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String DUMMY_ASSETS_DIR \u003d \"dummy\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e TESTING_FILE_FORMATS \u003d Arrays.asList(\"java\", \"adoc\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String TEST_REPORT_GENERATED_TIME \u003d \"Tue Jul 24 17:45:15 SGT 2018\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String TEST_REPORT_GENERATION_TIME \u003d \"15 second(s)\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String TEST_TIME_ZONE \u003d \"Asia/Singapore\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static boolean haveNormallyClonedRepo \u003d false;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeEach"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(FT_TEMP_DIR);"},{"lineNumber":48,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        ErrorSummary.getInstance().clearErrorSet();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AuthorConfiguration.setHasAuthorConfigFile(AuthorConfiguration.DEFAULT_HAS_AUTHOR_CONFIG_FILE);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @AfterEach"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(FT_TEMP_DIR);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRange() throws Exception {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        runTest(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"),"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                false, false, false, false,"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"                \"ConfigSystemTest/sinceBeginningDateRange/expected\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDate() throws Exception {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        runTest(getInputWithUntilDate(\"1/11/2017\"), false,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                false, false, false,"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"                \"ConfigSystemTest/30daysFromUntilDate/expected\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * System test with a specified since date and until date, with the last modified date time in each"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * line of code."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void testDateRangeWithModifiedDateTimeInLines() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        runTest(getInputWithDates(\"1/9/2017\", \"30/10/2017\"),"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                true, false, false, false,"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"                \"ConfigSystemTest/dateRangeWithModifiedDateTimeInLines/expected\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit, using shallow cloning."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRangeWithShallowCloning() throws Exception {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        runTest(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"),"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                false, true, true, false,"},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"                \"ConfigSystemTest/sinceBeginningDateRangeWithShallowCloning/expected\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDateWithShallowCloning() throws Exception {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        runTest(getInputWithUntilDate(\"1/11/2017\"), false,"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                true, true, false,"},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"                \"ConfigSystemTest/30daysFromUntilDateWithShallowCloning/expected\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit, using find previous authors."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRangeWithFindPreviousAuthors() throws Exception {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        runTest(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"),"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                false, false, true, true,"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"                \"ConfigSystemTest/sinceBeginningDateRangeFindPreviousAuthors/expected\");"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDateWithFindPreviousAuthors() throws Exception {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        runTest(getInputWithUntilDate(\"1/11/2017\"), false, false, true,"},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"                true, \"ConfigSystemTest/30daysFromUntilDateFindPreviousAuthors/expected\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private String getInputWithUntilDate(String untilDate) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return String.format(\"--until %s\", untilDate);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private String getInputWithDates(String sinceDate, String untilDate) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return String.format(\"--since %s --until %s\", sinceDate, untilDate);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Generates the testing report and compares it with the expected report."},{"lineNumber":131,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Re-generates a normal report after the testing finished if the first report is shallow-cloned."},{"lineNumber":132,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param inputDates The date range for analysis."},{"lineNumber":134,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param shouldIncludeModifiedDateInLines Boolean for whether to include last modified date for authorship."},{"lineNumber":135,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param shallowCloning Boolean for whether to perform shallow cloning."},{"lineNumber":136,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param shouldFreshClone Boolean for whether to clone repo again if it has been cloned before."},{"lineNumber":137,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param findPreviousAuthors Boolean for whether to find and blame previous authors for ignored commits."},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param pathToResource The location at which files generated during the test are stored."},{"lineNumber":139,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws Exception if any occur during testing."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private void runTest(String inputDates, boolean shouldIncludeModifiedDateInLines, boolean shallowCloning,"},{"lineNumber":142,"author":{"gitId":"yhtMinceraft1010X"},"content":"            boolean shouldFreshClone, boolean findPreviousAuthors, String pathToResource) throws Exception {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        generateReport(inputDates, shouldIncludeModifiedDateInLines, shallowCloning,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                shouldFreshClone || !haveNormallyClonedRepo, findPreviousAuthors);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Path actualFiles \u003d loadResource(getClass(), pathToResource);"},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"        SystemTestUtil.verifyReportJsonFiles(actualFiles, Paths.get(FT_TEMP_DIR));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        haveNormallyClonedRepo \u003d !shallowCloning;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Generates the testing report to be compared with expected report."},{"lineNumber":152,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param inputDates The date range for analysis."},{"lineNumber":154,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param shouldIncludeModifiedDateInLines Boolean for whether to include last modified date for authorship."},{"lineNumber":155,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param shallowCloning Boolean for whether to perform shallow cloning."},{"lineNumber":156,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param shouldFreshClone Boolean for whether to clone repo again if it has been cloned before."},{"lineNumber":157,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @param findPreviousAuthors Boolean for whether to find and blame previous authors for ignored commits."},{"lineNumber":158,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws Exception if any errors occur during testing."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private void generateReport(String inputDates, boolean shouldIncludeModifiedDateInLines, boolean shallowCloning,"},{"lineNumber":161,"author":{"gitId":"yhtMinceraft1010X"},"content":"            boolean shouldFreshClone, boolean findPreviousAuthors) throws Exception {"},{"lineNumber":162,"author":{"gitId":"chan-j-d"},"content":"        Path configFolder \u003d loadResource(getClass(), \"ConfigSystemTest\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", TESTING_FILE_FORMATS);"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d new InputBuilder().addConfig(configFolder)"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                .addTimezone(TEST_TIME_ZONE)"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                .add(inputDates);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (shallowCloning) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            inputBuilder \u003d inputBuilder.addShallowCloning();"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        if (findPreviousAuthors) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            inputBuilder \u003d inputBuilder.addFindPreviousAuthors();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        String input \u003d inputBuilder.build();"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        repoConfigs.forEach(repoConfig -\u003e repoConfig.setIsShallowCloningPerformed(shallowCloning));"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                new GroupConfigCsvParser(((ConfigCliArguments) cliArguments).getGroupConfigFilePath()).parse();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        ReportConfiguration reportConfig \u003d new ReportConfigJsonParser().parse(("},{"lineNumber":192,"author":{"gitId":"-"},"content":"                (ConfigCliArguments) cliArguments).getReportConfigFilePath());"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(repoConfigs, authorConfigs);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(repoConfigs, cliArguments.getFormats());"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        RepoConfiguration.setDatesToRepoConfigs("},{"lineNumber":199,"author":{"gitId":"-"},"content":"                repoConfigs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        RepoConfiguration.setZoneIdToRepoConfigs(repoConfigs, cliArguments.getZoneId());"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsLastModifiedDateIncludedToRepoConfigs(repoConfigs, shouldIncludeModifiedDateInLines);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(repoConfigs,"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        boolean isGitVersionInsufficient \u003d RepoConfiguration.isAnyRepoFindingPreviousAuthors(repoConfigs)"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                \u0026\u0026 !GitVersion.isGitVersionSufficientForFindingPreviousAuthors();"},{"lineNumber":207,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":208,"author":{"gitId":"chan-j-d"},"content":"        Assumptions.assumeFalse(isGitVersionInsufficient, \"Git version 2.23.0 and above necessary to run test\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"        ReportGenerator.generateReposReport(repoConfigs, FT_TEMP_DIR, DUMMY_ASSETS_DIR, reportConfig,"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                TEST_REPORT_GENERATED_TIME, cliArguments.getSinceDate(), cliArguments.getUntilDate(),"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                cliArguments.isSinceDateProvided(), cliArguments.isUntilDateProvided(),"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                cliArguments.getNumCloningThreads(), cliArguments.getNumAnalysisThreads(), () -\u003e"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                TEST_REPORT_GENERATION_TIME, cliArguments.getZoneId(), shouldFreshClone);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":13,"yhtMinceraft1010X":26,"Zhou-Jiahao-1998":1,"-":176}},{"path":"src/systemtest/java/reposense/LocalRepoSystemTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.AfterAll;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"import reposense.model.SupportedDomainUrlMap;"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.FileUtil;"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.SystemTestUtil;"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"public class LocalRepoSystemTest {"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_DIRECTORY_ONE_PARENT \u003d \"parent1\";"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_DIRECTORY_TWO_PARENT \u003d \"parent2\";"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_DIRECTORY_ONE \u003d \"parent1/test-repo\";"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_DIRECTORY_TWO \u003d \"parent2/test-repo\";"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"    private static final String LAST_COMMIT_DATE \u003d \"01/04/2022\";"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    private static final String OUTPUT_DIRECTORY \u003d \"local-test\";"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    private static final String TIME_ZONE \u003d \"UTC+08\";"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    private static final Path REPORT_DIRECTORY_PATH \u003d Paths.get(OUTPUT_DIRECTORY, \"reposense-report\");"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    @BeforeAll"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    public static void setupLocalRepos() throws Exception {"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.clone(new RepoConfiguration(new RepoLocation(\"https://github.com/reposense/testrepo-Alpha\")),"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"                Paths.get(\".\"), LOCAL_DIRECTORY_ONE);"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.clone(new RepoConfiguration(new RepoLocation(\"https://github.com/reposense/testrepo-Alpha\")),"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"                Paths.get(\".\"), LOCAL_DIRECTORY_TWO);"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"    public void setupLocalTest() throws Exception {"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        SupportedDomainUrlMap.clearAccessedSet();"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        FileUtil.deleteDirectory(OUTPUT_DIRECTORY);"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        ErrorSummary.getInstance().clearErrorSet();"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    @AfterEach"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"    public void deleteReportDirectory() throws Exception {"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        FileUtil.deleteDirectory(OUTPUT_DIRECTORY);"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    @AfterAll"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    public static void deleteClonedLocalRepos() throws Exception {"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        FileUtil.deleteDirectory(LOCAL_DIRECTORY_ONE_PARENT);"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        FileUtil.deleteDirectory(LOCAL_DIRECTORY_TWO_PARENT);"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    public void testSameFinalDirectory() {"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"        String cliInput \u003d String.format(\"-r %s %s -s d1 -u %s -o %s -t %s\","},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"                LOCAL_DIRECTORY_ONE, LOCAL_DIRECTORY_TWO, LAST_COMMIT_DATE, OUTPUT_DIRECTORY, TIME_ZONE);"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"        runTest(cliInput, \"LocalRepoSystemTest/testSameFinalDirectory\");"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"    public void testRelativePathing() {"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        String relativePathForTesting \u003d \"parent1/../parent1/./test-repo\";"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"        String cliInput \u003d String.format(\"-r %s -s d1 -u %s -o %s -t %s\","},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"                relativePathForTesting, LAST_COMMIT_DATE, OUTPUT_DIRECTORY, TIME_ZONE);"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"        runTest(cliInput, \"LocalRepoSystemTest/testRelativePathing\");"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"     * Runs RepoSense with {@code commandArgs} and tests it against the expected"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"     * files in {@code expectedFilesPathString}."},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"    private void runTest(String commandArgs, String expectedFilesPathString) {"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"        String[] args \u003d commandArgs.split(\" \");"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"        RepoSense.main(args);"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"        Path expectedFilesPath \u003d loadResource(getClass(), expectedFilesPathString);"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"        SystemTestUtil.verifyReportJsonFiles(expectedFilesPath, REPORT_DIRECTORY_PATH);"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":87}},{"path":"src/systemtest/java/reposense/util/SystemTestUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.io.FileReader;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"import com.google.gson.JsonObject;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"import com.google.gson.JsonParser;"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":" * Contains utility methods for system tests."},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"public class SystemTestUtil {"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    private static final String[] JSON_FIELDS_TO_IGNORE \u003d new String[]"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"            {\"repoSenseVersion\", \"reportGeneratedTime\", \"reportGenerationTime\"};"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"     * Verifies that all JSON files in the {@code actualDirectory} matches those at the {@code expectedDirectory}."},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    public static void verifyReportJsonFiles(Path expectedDirectory, Path actualDirectory) {"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"        try (Stream\u003cPath\u003e pathStream \u003d Files.list(expectedDirectory)) {"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"            for (Path file : pathStream.collect(Collectors.toList())) {"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"                Path expectedFilePath \u003d expectedDirectory.resolve(file.getFileName());"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"                Path actualFilePath \u003d actualDirectory.resolve(file.getFileName());"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"                if (Files.isDirectory(file)) {"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"                    verifyReportJsonFiles(expectedFilePath, actualFilePath);"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"                } else if (file.toString().endsWith(\".json\")) {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"                    if (file.getFileName().toString().equals(\"summary.json\")) {"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"                        assertSummaryJson(expectedFilePath, actualFilePath);"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"                    } else {"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"                        assertJson(expectedFilePath, actualFilePath);"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"                    }"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"            ioe.printStackTrace();"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"    public static void assertSummaryJson(Path expectedSummaryJsonPath, Path actualSummaryJsonPath)"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"            throws IOException {"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        try (FileReader fileReaderExpected \u003d new FileReader(expectedSummaryJsonPath.toFile());"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"                FileReader fileReaderActual \u003d new FileReader(actualSummaryJsonPath.toFile())) {"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"            JsonObject jsonExpected \u003d JsonParser.parseReader(fileReaderExpected).getAsJsonObject();"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"            JsonObject jsonActual \u003d JsonParser.parseReader(fileReaderActual).getAsJsonObject();"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"            for (String ignoredKey : JSON_FIELDS_TO_IGNORE) {"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"                jsonExpected.remove(ignoredKey);"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"                jsonActual.remove(ignoredKey);"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"            Assertions.assertEquals(jsonExpected, jsonActual);"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"     * Asserts that the contents in the given JSON file at {@code actualJsonPath} is the same as the JSON file"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"     * at {@code expectedJsonPath}."},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"    public static void assertJson(Path expectedJsonPath, Path actualJsonPath) {"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertTrue(Files.exists(actualJsonPath));"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"            Assertions.assertTrue(TestUtil.compareFileContents(expectedJsonPath, actualJsonPath));"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        } catch (Exception e) {"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"            Assertions.fail(e.getMessage());"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":72}},{"path":"src/test/java/reposense/authorship/AnnotatorAnalyzerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.model.Author.UNKNOWN_AUTHOR;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.authorship.analyzer.AnnotatorAnalyzer;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class AnnotatorAnalyzerTest extends GitTestTemplate {"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime SINCE_DATE \u003d TestUtil.getSinceDate(2018, Month.FEBRUARY.getValue(), 8);"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime UNTIL_DATE \u003d TestUtil.getUntilDate(2021, Month.AUGUST.getValue(), 3);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Author[] EXPECTED_LINE_AUTHORS_OVERRIDE_AUTHORSHIP_TEST \u003d {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Author[] EXPECTED_LINE_AUTHORS_DISOWN_CODE_TEST \u003d {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            FAKE_AUTHOR, FAKE_AUTHOR, FAKE_AUTHOR,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            UNKNOWN_AUTHOR, UNKNOWN_AUTHOR, UNKNOWN_AUTHOR"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        super.before();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        config.setSinceDate(SINCE_DATE);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        config.setUntilDate(UNTIL_DATE);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AuthorConfiguration.setHasAuthorConfigFile(AuthorConfiguration.DEFAULT_HAS_AUTHOR_CONFIG_FILE);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @AfterEach"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        super.after();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AuthorConfiguration.setHasAuthorConfigFile(AuthorConfiguration.DEFAULT_HAS_AUTHOR_CONFIG_FILE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void analyzeAnnotation_authorNamePresentInConfig_overrideAuthorship() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        config.setAuthorList(new ArrayList\u003c\u003e(Arrays.asList(FAKE_AUTHOR)));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"annotationTest.java\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_OVERRIDE_AUTHORSHIP_TEST));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void analyzeAnnotation_authorNameNotInConfigAndNoAuthorConfigFile_acceptTaggedAuthor() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        config.setAuthorList(new ArrayList\u003c\u003e(Arrays.asList(FAKE_AUTHOR)));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"annotationTest.java\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_OVERRIDE_AUTHORSHIP_TEST));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void analyzeAnnotation_authorNameNotInConfigAndHaveAuthorConfigFile_disownCode() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        config.setAuthorList(new ArrayList\u003c\u003e(Arrays.asList(FAKE_AUTHOR)));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        AuthorConfiguration.setHasAuthorConfigFile(true);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"annotationTest.java\");"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_DISOWN_CODE_TEST));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public FileResult getFileResult(String relativePath) {"},{"lineNumber":82,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config, relativePath);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return FileInfoAnalyzer.analyzeTextFile(config, fileInfo);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern0_returnAuthorName() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        int index \u003d 0;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        line \u003d \"//@@author fakeAuthor\";"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":92,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        line \u003d \"// @@author fakeauthor  \";"},{"lineNumber":95,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        line \u003d \"  //  @@author   fake-4u-th0r  \";"},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern1_returnAuthorName() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        int index \u003d 1;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        line \u003d \"/*@@author fakeAuthor\";"},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":109,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        line \u003d \"/* @@author fakeauthor  \";"},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        line \u003d \"  /*  @@author   fake-4u-th0r  \";"},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":117,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        line \u003d \"/*@@author fakeAuthor*/\";"},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":121,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        line \u003d \"/* @@author fakeauthor */\";"},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":125,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        line \u003d \"  /*  @@author   fake-4u-th0r  */  \";"},{"lineNumber":128,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":129,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern2_returnAuthorName() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        int index \u003d 2;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        line \u003d \"#@@author fakeAuthor\";"},{"lineNumber":137,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        line \u003d \"# @@author fakeauthor  \";"},{"lineNumber":141,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":142,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        line \u003d \"  #  @@author   fake-4u-th0r  \";"},{"lineNumber":145,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":146,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern3_returnAuthorName() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        int index \u003d 3;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        line \u003d \"\u003c!--@@author fakeAuthor\";"},{"lineNumber":154,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":155,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        line \u003d \"\u003c!-- @@author fakeauthor  \";"},{"lineNumber":158,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":159,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        line \u003d \"  \u003c!--  @@author   fake-4u-th0r  \";"},{"lineNumber":162,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":163,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        line \u003d \"\u003c!--@@author fakeAuthor--\u003e\";"},{"lineNumber":166,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":167,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        line \u003d \"\u003c!-- @@author fakeauthor --\u003e\";"},{"lineNumber":170,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":171,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        line \u003d \"  \u003c!--  @@author   fake-4u-th0r  --\u003e  \";"},{"lineNumber":174,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":175,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void extractAuthorName_matchCommentPattern4_returnAuthorName() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        int index \u003d 4;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        line \u003d \"%@@author fakeAuthor\";"},{"lineNumber":183,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":184,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeAuthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        line \u003d \"% @@author fakeauthor  \";"},{"lineNumber":187,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":188,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fakeauthor\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        line \u003d \"  %  @@author   fake-4u-th0r  \";"},{"lineNumber":191,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(index, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":192,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"fake-4u-th0r\", AnnotatorAnalyzer.extractAuthorName(line).get());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public void extractAuthorName_noAuthorName_returnNull() {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        line \u003d \"//@@author\";"},{"lineNumber":200,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":201,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        line \u003d \"/*@@author \";"},{"lineNumber":204,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":205,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        line \u003d \"/* @@author*/ \";"},{"lineNumber":208,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":209,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        line \u003d \"#@@author \";"},{"lineNumber":212,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":213,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        line \u003d \"  \u003c!--@@author --\u003e \";"},{"lineNumber":216,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":217,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        line \u003d \"% @@author \";"},{"lineNumber":220,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":221,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    public void extractAuthorName_invalidAuthorName_returnNull() {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        String line;"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        line \u003d \"% @@author thisAuthorNameHasMoreThanThirtyNineLetters\";"},{"lineNumber":229,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":230,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        line \u003d \"# @@author -invalidUsernameFormat\";"},{"lineNumber":233,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":234,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        line \u003d \"/*@@author fakeAuthor--\u003e\";"},{"lineNumber":237,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(line));"},{"lineNumber":238,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(AnnotatorAnalyzer.extractAuthorName(line).isPresent());"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":242,"author":{"gitId":"chan-j-d"},"content":"    public void getCommentType_matchCommentPattern0_success() {"},{"lineNumber":243,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(\"//@@author fakeAuthor\"));"},{"lineNumber":244,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(\"// @@author fakeAuthor\"));"},{"lineNumber":245,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(\"   // @@author fakeAuthor\"));"},{"lineNumber":246,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(0, AnnotatorAnalyzer.getCommentTypeIndex(\"   //    @@author  fakeAuthor     \"));"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":250,"author":{"gitId":"chan-j-d"},"content":"    public void getCommentType_matchCommentPattern1_success() {"},{"lineNumber":251,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(\"/*@@author fakeAuthor\"));"},{"lineNumber":252,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(\"/* @@author fakeAuthor\"));"},{"lineNumber":253,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(\"   /* @@author fakeAuthor*/\"));"},{"lineNumber":254,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, AnnotatorAnalyzer.getCommentTypeIndex(\"   /*  @@author  fakeAuthor  */  \"));"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":258,"author":{"gitId":"chan-j-d"},"content":"    public void getCommentType_matchCommentPattern2_success() {"},{"lineNumber":259,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(\"#@@author fakeAuthor\"));"},{"lineNumber":260,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(\"# @@author fakeAuthor\"));"},{"lineNumber":261,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(\"   # @@author fakeAuthor\"));"},{"lineNumber":262,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, AnnotatorAnalyzer.getCommentTypeIndex(\"   #    @@author  fakeAuthor     \"));"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":266,"author":{"gitId":"chan-j-d"},"content":"    public void getCommentType_matchCommentPattern3_success() {"},{"lineNumber":267,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!--@@author fakeAuthor\"));"},{"lineNumber":268,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!-- @@author fakeAuthor\"));"},{"lineNumber":269,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(\"   \u003c!-- @@author fakeAuthor--\u003e\"));"},{"lineNumber":270,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(3, AnnotatorAnalyzer.getCommentTypeIndex(\"   \u003c!--  @@author  fakeAuthor  --\u003e  \"));"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":274,"author":{"gitId":"chan-j-d"},"content":"    public void getCommentType_matchCommentPattern4_success() {"},{"lineNumber":275,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(\"%@@author fakeAuthor\"));"},{"lineNumber":276,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(\"% @@author fakeAuthor\"));"},{"lineNumber":277,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(\"   % @@author fakeAuthor\"));"},{"lineNumber":278,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, AnnotatorAnalyzer.getCommentTypeIndex(\"   %    @@author  fakeAuthor     \"));"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":282,"author":{"gitId":"chan-j-d"},"content":"    public void getCommentType_invalidCommentPattern_returnMinus1() {"},{"lineNumber":283,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"// @@author fakeAuthor //\"));"},{"lineNumber":284,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"@@author fakeAuthor\"));"},{"lineNumber":285,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"/@@author fakeAuthor\"));"},{"lineNumber":286,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"@@author fakeAuthor */\"));"},{"lineNumber":287,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"# something @@author fakeAuthor\"));"},{"lineNumber":288,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"something % @@author fakeAuthor\"));"},{"lineNumber":289,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"# @@author fakeAuthor something\"));"},{"lineNumber":290,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(-1, AnnotatorAnalyzer.getCommentTypeIndex(\"\u003c!--@@authorfakeAuthor--\u003e\"));"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":6,"yhtMinceraft1010X":98,"gok99":1,"-":187}},{"path":"src/test/java/reposense/authorship/FileAnalyzerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Assumptions;"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"import reposense.git.GitVersion;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"import reposense.model.FileType;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class FileAnalyzerTest extends GitTestTemplate {"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime BLAME_TEST_SINCE_DATE \u003d"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getSinceDate(2018, Month.FEBRUARY.getValue(), 6);"},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime BLAME_TEST_UNTIL_DATE \u003d"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getUntilDate(2018, Month.FEBRUARY.getValue(), 8);"},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime PREVIOUS_AUTHOR_BLAME_TEST_SINCE_DATE \u003d"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getSinceDate(2018, Month.FEBRUARY.getValue(), 6);"},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime PREVIOUS_AUTHOR_BLAME_TEST_UNTIL_DATE \u003d"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getUntilDate(2021, Month.AUGUST.getValue(), 7);"},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime EMAIL_WITH_ADDITION_TEST_SINCE_DATE \u003d"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getSinceDate(2019, Month.MARCH.getValue(), 28);"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime EMAIL_WITH_ADDITION_TEST_UNTIL_DATE \u003d"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getUntilDate(2019, Month.MARCH.getValue(), 28);"},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime MOVED_FILE_SINCE_DATE \u003d"},{"lineNumber":40,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getSinceDate(2018, Month.FEBRUARY.getValue(), 7);"},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime MOVED_FILE_UNTIL_DATE \u003d"},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getUntilDate(2018, Month.FEBRUARY.getValue(), 9);"},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime SHOULD_INCLUDE_LAST_MODIFIED_IN_LINES_SINCE_DATE \u003d"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getSinceDate(2018, Month.FEBRUARY.getValue(), 7);"},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime LAST_MODIFIED_DATE \u003d"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"            LocalDateTime.of(2020, Month.OCTOBER.getValue(), 27, 18, 0, 7);"},{"lineNumber":47,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime SHOULD_INCLUDE_LAST_MODIFIED_IN_LINES_UNTIL_DATE \u003d"},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getUntilDate(2018, Month.FEBRUARY.getValue(), 9);"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime ANALYZE_BINARY_FILES_SINCE_DATE \u003d"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getSinceDate(2017, Month.JANUARY.getValue(), 1);"},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private static final LocalDateTime ANALYZE_BINARY_FILES_UNTIL_DATE \u003d"},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"            TestUtil.getUntilDate(2020, Month.JANUARY.getValue(), 1);"},{"lineNumber":54,"author":{"gitId":"gok99"},"content":"    private static final LocalDateTime ANALYZE_LARGE_FILES_SINCE_DATE \u003d"},{"lineNumber":55,"author":{"gitId":"gok99"},"content":"            TestUtil.getSinceDate(2017, Month.JANUARY.getValue(), 1);"},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"    private static final LocalDateTime ANALYZE_LARGE_FILES_UNTIL_DATE \u003d"},{"lineNumber":57,"author":{"gitId":"gok99"},"content":"            TestUtil.getUntilDate(2022, Month.MARCH.getValue(), 8);"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    private static final LocalDateTime ANALYZE_FILES_EMPTY_EMAIL_COMMIT_SINCE_DATE \u003d"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"            TestUtil.getSinceDate(2022, Month.FEBRUARY.getValue(), 10);"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"    private static final LocalDateTime ANALYZE_FILES_EMPTY_EMAIL_COMMIT_UNTIL_DATE \u003d"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"            TestUtil.getUntilDate(2022, Month.FEBRUARY.getValue(), 14);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final Author[] EXPECTED_LINE_AUTHORS_BLAME_TEST \u003d {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            MAIN_AUTHOR, MAIN_AUTHOR, FAKE_AUTHOR, MAIN_AUTHOR"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static final Author[] EXPECTED_LINE_AUTHORS_MOVED_FILE \u003d {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR, MAIN_AUTHOR"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final Author[] EXPECTED_LINE_AUTHORS_PREVIOUS_AUTHORS_BLAME_TEST \u003d {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            MAIN_AUTHOR, MAIN_AUTHOR, FAKE_AUTHOR, MAIN_AUTHOR"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    };"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeEach"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        super.before();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void blameTest() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_BLAME_TEST));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void blameWithPreviousAuthorsTest() {"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"        Assumptions.assumeTrue(GitVersion.isGitVersionSufficientForFindingPreviousAuthors());"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        config.setSinceDate(PREVIOUS_AUTHOR_BLAME_TEST_SINCE_DATE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        config.setUntilDate(PREVIOUS_AUTHOR_BLAME_TEST_UNTIL_DATE);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        config.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        config.setBranch(TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        createTestIgnoreRevsFile(AUTHOR_TO_IGNORE_BLAME_COMMIT_LIST_07082021);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        removeTestIgnoreRevsFile();"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_PREVIOUS_AUTHORS_BLAME_TEST));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void movedFileBlameTest() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        config.setSinceDate(MOVED_FILE_SINCE_DATE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        config.setUntilDate(MOVED_FILE_UNTIL_DATE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"newPos/movedFile.java\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_MOVED_FILE));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void blameTestDateRange() throws Exception {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), BLAME_TEST_UNTIL_DATE, config.getZoneId());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_BLAME_TEST));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void blameWithPreviousAuthorsTestDateRange() throws Exception {"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":"        Assumptions.assumeTrue(GitVersion.isGitVersionSufficientForFindingPreviousAuthors());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        config.setSinceDate(PREVIOUS_AUTHOR_BLAME_TEST_SINCE_DATE);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        config.setUntilDate(PREVIOUS_AUTHOR_BLAME_TEST_UNTIL_DATE);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        config.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        config.setBranch(TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":131,"author":{"gitId":"yhtMinceraft1010X"},"content":"        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), PREVIOUS_AUTHOR_BLAME_TEST_UNTIL_DATE,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                config.getZoneId());"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        createTestIgnoreRevsFile(AUTHOR_TO_IGNORE_BLAME_COMMIT_LIST_07082021);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        removeTestIgnoreRevsFile();"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_PREVIOUS_AUTHORS_BLAME_TEST));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void movedFileBlameTestDateRange() throws Exception {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), MOVED_FILE_UNTIL_DATE, config.getZoneId());"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        config.setSinceDate(MOVED_FILE_SINCE_DATE);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        config.setUntilDate(MOVED_FILE_UNTIL_DATE);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"newPos/movedFile.java\");"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult, Arrays.asList(EXPECTED_LINE_AUTHORS_MOVED_FILE));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"gok99"},"content":"    public void analyzeTextFile_blameTestFileIgnoreFakeAuthorCommitFullHash_success() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(Collections.singletonList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018));"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList("},{"lineNumber":161,"author":{"gitId":"-"},"content":"                Collections.singletonList("},{"lineNumber":162,"author":{"gitId":"-"},"content":"                        new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8))));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoShort);"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(fileInfoFull, fileInfoShort);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(1).getAuthor());"},{"lineNumber":168,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(2).getAuthor());"},{"lineNumber":169,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(4).getAuthor());"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // line added in commit that was ignored"},{"lineNumber":172,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(Author.UNKNOWN_AUTHOR, fileInfoFull.getLine(3).getAuthor());"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void analyzeFile_blameWithPreviousAuthorsIgnoreFirstCommitThatChangedLine_assignLineToUnknownAuthor() {"},{"lineNumber":177,"author":{"gitId":"chan-j-d"},"content":"        Assumptions.assumeTrue(GitVersion.isGitVersionSufficientForFindingPreviousAuthors());"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        config.setSinceDate(PREVIOUS_AUTHOR_BLAME_TEST_SINCE_DATE);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        config.setUntilDate(PREVIOUS_AUTHOR_BLAME_TEST_UNTIL_DATE);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        config.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        config.setBranch(TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(Collections.singletonList(MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018));"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        createTestIgnoreRevsFile(config.getIgnoreCommitList());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        removeTestIgnoreRevsFile();"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(Collections.singletonList("},{"lineNumber":192,"author":{"gitId":"-"},"content":"                        new CommitHash(MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING.substring(0, 8))));"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(createTestIgnoreRevsFile(config.getIgnoreCommitList()));"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoShort);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        removeTestIgnoreRevsFile();"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(fileInfoFull, fileInfoShort);"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new Author(IGNORED_AUTHOR_NAME), fileInfoFull.getLine(2).getAuthor());"},{"lineNumber":200,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new Author(FAKE_AUTHOR_NAME), fileInfoFull.getLine(3).getAuthor());"},{"lineNumber":201,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new Author(IGNORED_AUTHOR_NAME), fileInfoFull.getLine(4).getAuthor());"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // line added in commit that was ignored"},{"lineNumber":204,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(Author.UNKNOWN_AUTHOR, fileInfoFull.getLine(1).getAuthor());"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitId":"gok99"},"content":"    public void analyzeTextFile_blameTestFileIgnoreAllCommit_success() {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018,"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018));"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(CommitHash.convertStringsToCommits("},{"lineNumber":218,"author":{"gitId":"-"},"content":"                Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8),"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                        MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING.substring(0, 8))));"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoShort);"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(fileInfoFull, fileInfoShort);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        fileInfoFull.getLines().forEach(lineInfo -\u003e"},{"lineNumber":224,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Assertions.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    public void analyzeFile_blameWithPreviousAuthorTestFileIgnoreAllCommit_success() {"},{"lineNumber":229,"author":{"gitId":"chan-j-d"},"content":"        Assumptions.assumeTrue(GitVersion.isGitVersionSufficientForFindingPreviousAuthors());"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        config.setSinceDate(PREVIOUS_AUTHOR_BLAME_TEST_SINCE_DATE);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        config.setUntilDate(PREVIOUS_AUTHOR_BLAME_TEST_UNTIL_DATE);"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        config.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        config.setBranch(TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018,"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018, AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021));"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        createTestIgnoreRevsFile(config.getIgnoreCommitList());"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        removeTestIgnoreRevsFile();"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(CommitHash.convertStringsToCommits("},{"lineNumber":245,"author":{"gitId":"-"},"content":"                Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8),"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                        MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING.substring(0, 8),"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                        AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING.substring(0, 8))));"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        createTestIgnoreRevsFile(config.getIgnoreCommitList());"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoShort);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        removeTestIgnoreRevsFile();"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(fileInfoFull, fileInfoShort);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        fileInfoFull.getLines().forEach(lineInfo -\u003e"},{"lineNumber":254,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Assertions.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":258,"author":{"gitId":"gok99"},"content":"    public void analyzeTextFile_blameTestFileIgnoreRangedCommit_success() {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(FAKE_AUTHOR_BLAME_RANGED_COMMIT_LIST_09022018);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        FileInfo fileInfoRanged \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        String rangedCommit \u003d FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING + \"..\""},{"lineNumber":267,"author":{"gitId":"-"},"content":"                + FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING;"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(CommitHash.getHashes(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                new CommitHash(rangedCommit)).collect(Collectors.toList()));"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoRanged);"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(fileInfoFull, fileInfoRanged);"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        fileInfoFull.getLines().forEach(lineInfo -\u003e"},{"lineNumber":274,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Assertions.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":278,"author":{"gitId":"gok99"},"content":"    public void analyzeTextFile_blameTestFileIgnoreRangedCommitShort_success() {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(FAKE_AUTHOR_BLAME_RANGED_COMMIT_LIST_09022018);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"        FileInfo fileInfoRangedShort \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":286,"author":{"gitId":"-"},"content":"        String rangedCommitShort \u003d FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING.substring(0, 8) + \"..\""},{"lineNumber":287,"author":{"gitId":"-"},"content":"                + FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING.substring(0, 8);"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(CommitHash.getHashes(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":289,"author":{"gitId":"-"},"content":"                new CommitHash(rangedCommitShort)).collect(Collectors.toList()));"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoRangedShort);"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(fileInfoFull, fileInfoRangedShort);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        fileInfoFull.getLines().forEach(lineInfo -\u003e"},{"lineNumber":294,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Assertions.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":298,"author":{"gitId":"gok99"},"content":"    public void analyzeTextFile_emailWithAdditionOperator_success() {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        config.setSinceDate(EMAIL_WITH_ADDITION_TEST_SINCE_DATE);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        config.setUntilDate(EMAIL_WITH_ADDITION_TEST_UNTIL_DATE);"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        config.setBranch(\"617-FileAnalyzerTest-analyzeFile_emailWithAdditionOperator_success\");"},{"lineNumber":302,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MINGYI_AUTHOR_NAME);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config, \"pr_617.java\");"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfo);"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, fileInfo.getLines().size());"},{"lineNumber":310,"author":{"gitId":"yhtMinceraft1010X"},"content":"        fileInfo.getLines().forEach(lineInfo -\u003e Assertions.assertEquals(author, lineInfo.getAuthor()));"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":314,"author":{"gitId":"gok99"},"content":"    public void analyzeTextFile_shouldIncludeLastModifiedDateInLines_success() {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        config.setSinceDate(SHOULD_INCLUDE_LAST_MODIFIED_IN_LINES_SINCE_DATE);"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        config.setUntilDate(SHOULD_INCLUDE_LAST_MODIFIED_IN_LINES_UNTIL_DATE);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        config.setIsLastModifiedDateIncluded(true);"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        config.setBranch(\"1345-FileAnalyzerTest-analyzeFile_shouldIncludeLastModifiedDateInLines_success\");"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(JAMES_AUTHOR_NAME);"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config, \"includeLastModifiedDateInLinesTest.java\");"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfo);"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, fileInfo.getLines().size());"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        fileInfo.getLines().forEach(lineInfo -\u003e"},{"lineNumber":328,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Assertions.assertEquals(LAST_MODIFIED_DATE, lineInfo.getLastModifiedDate()));"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":332,"author":{"gitId":"gok99"},"content":"    public void analyzeTextFile_fileExceedingFileSizeLimit_success() {"},{"lineNumber":333,"author":{"gitId":"gok99"},"content":"        config.setSinceDate(ANALYZE_LARGE_FILES_SINCE_DATE);"},{"lineNumber":334,"author":{"gitId":"gok99"},"content":"        config.setUntilDate(ANALYZE_LARGE_FILES_UNTIL_DATE);"},{"lineNumber":335,"author":{"gitId":"gok99"},"content":"        config.setBranch(\"1647-FileAnalyzerTest-analyzeTextFile_fileExceedingFileSizeLimit_success\");"},{"lineNumber":336,"author":{"gitId":"gok99"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":337,"author":{"gitId":"gok99"},"content":""},{"lineNumber":338,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config, \"largeFile.json\");"},{"lineNumber":339,"author":{"gitId":"gok99"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfo);"},{"lineNumber":340,"author":{"gitId":"gok99"},"content":""},{"lineNumber":341,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(46902, fileInfo.getLines().size());"},{"lineNumber":342,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(fileInfo.getFileSize() \u003e config.getFileSizeLimit(), fileInfo.exceedsFileLimit());"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    public void analyzeBinaryFile_shouldSetLinesToBeEmpty_success() {"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        config.setSinceDate(ANALYZE_BINARY_FILES_SINCE_DATE);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        config.setUntilDate(ANALYZE_BINARY_FILES_UNTIL_DATE);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        config.setBranch(\"728-FileInfoExtractorTest-getNonBinaryFilesList_directoryWithBinaryFiles_success\");"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e binaryFileInfos \u003d FileInfoExtractor.extractBinaryFileInfos(config);"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"        for (FileInfo binaryFileInfo: binaryFileInfos) {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"            FileInfoAnalyzer.analyzeBinaryFile(config, binaryFileInfo);"},{"lineNumber":355,"author":{"gitId":"yhtMinceraft1010X"},"content":"            Assertions.assertEquals(0, binaryFileInfo.getLines().size());"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    public void analyzeBinaryFile_nonExistingFilePath_success() {"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        config.setSinceDate(ANALYZE_BINARY_FILES_SINCE_DATE);"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        config.setUntilDate(ANALYZE_BINARY_FILES_UNTIL_DATE);"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        config.setBranch(\"728-FileInfoExtractorTest-getNonBinaryFilesList_directoryWithBinaryFiles_success\");"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e binaryFileInfos \u003d Arrays.asList(new FileInfo(\"/nonExistingJpgPicture.jpg\"),"},{"lineNumber":367,"author":{"gitId":"-"},"content":"                new FileInfo(\"/nonExistingPngPicture.png\"));"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"        for (FileInfo binaryFileInfo: binaryFileInfos) {"},{"lineNumber":370,"author":{"gitId":"yhtMinceraft1010X"},"content":"            Assertions.assertNull(FileInfoAnalyzer.analyzeBinaryFile(config, binaryFileInfo));"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":373,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":374,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":375,"author":{"gitId":"chan-j-d"},"content":"    public void analyzeFile_filesWithEmptyEmailCommit_success() {"},{"lineNumber":376,"author":{"gitId":"chan-j-d"},"content":"        config.setSinceDate(ANALYZE_FILES_EMPTY_EMAIL_COMMIT_SINCE_DATE);"},{"lineNumber":377,"author":{"gitId":"chan-j-d"},"content":"        config.setUntilDate(ANALYZE_FILES_EMPTY_EMAIL_COMMIT_UNTIL_DATE);"},{"lineNumber":378,"author":{"gitId":"chan-j-d"},"content":"        config.setBranch(\"1636-FileAnalyzerTest-analyzeFile_filesWithEmptyEmailCommit_success\");"},{"lineNumber":379,"author":{"gitId":"chan-j-d"},"content":"        config.setAuthorList(Arrays.asList(new Author(\"chan-j-d\")));"},{"lineNumber":380,"author":{"gitId":"chan-j-d"},"content":"        List\u003cString\u003e relevantFileFormats \u003d Arrays.asList(\"txt\", \"png\");"},{"lineNumber":381,"author":{"gitId":"chan-j-d"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(relevantFileFormats));"},{"lineNumber":382,"author":{"gitId":"chan-j-d"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":383,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":384,"author":{"gitId":"chan-j-d"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":385,"author":{"gitId":"chan-j-d"},"content":"        FileInfo textFileInfo \u003d fileInfos.get(0);"},{"lineNumber":386,"author":{"gitId":"chan-j-d"},"content":"        FileInfo binaryFileInfo \u003d new FileInfo(\"empty-email-commit-binary-file.png\");"},{"lineNumber":387,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":388,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertNotNull(FileInfoAnalyzer.analyzeTextFile(config, textFileInfo));"},{"lineNumber":389,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertNotNull(FileInfoAnalyzer.analyzeBinaryFile(config, binaryFileInfo));"},{"lineNumber":390,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":391,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":28,"yhtMinceraft1010X":60,"gok99":24,"-":279}},{"path":"src/test/java/reposense/authorship/FileInfoExtractorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"import static reposense.model.RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT;"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class FileInfoExtractorTest extends GitTestTemplate {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"resources\", \"FileInfoExtractorTest\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Path FILE_WITH_SPECIAL_CHARACTER \u003d TEST_DATA_FOLDER.resolve(\"fileWithSpecialCharacters.txt\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Path FILE_WITHOUT_SPECIAL_CHARACTER \u003d TEST_DATA_FOLDER"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .resolve(\"fileWithoutSpecialCharacters.txt\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String EDITED_FILE_INFO_BRANCH \u003d \"getEditedFileInfos-test\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DIRECTORY_WITH_VALID_WHITELISTED_NAME_BRANCH \u003d \"directory-with-valid-whitelisted-name\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String BRANCH_WITH_VALID_WHITELISTED_FILE_NAME_BRANCH \u003d"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \"535-FileInfoExtractorTest-branchWithValidWhitelistedFileName.txt\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String BRANCH_WITH_BINARY_FILES \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \"728-FileInfoExtractorTest-getNonBinaryFilesList_directoryWithBinaryFiles_success\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String BRANCH_WITH_RARE_FILE_FORMATS \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            \"708-FileInfoExtractorTest-extractFileInfos_withoutSpecifiedFormats_success\";"},{"lineNumber":37,"author":{"gitId":"gok99"},"content":"    private static final String BRANCH_WITH_LARGE_FILE \u003d"},{"lineNumber":38,"author":{"gitId":"gok99"},"content":"            \"1647-FileAnalyzerTest-analyzeTextFile_fileExceedingFileSizeLimit_success\";"},{"lineNumber":39,"author":{"gitId":"gok99"},"content":"    private static final String FILE_WITH_LARGE_SIZE \u003d \"largeFile.json\";"},{"lineNumber":40,"author":{"gitId":"gok99"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String FEBRUARY_EIGHT_COMMIT_HASH \u003d \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void extractFileInfosTest() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), TEST_COMMIT_HASH);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(6, files.size());"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"README.md\"), files));"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"annotationTest.java\"), files));"},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"blameTest.java\"), files));"},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"newPos/movedFile.java\"), files));"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"inMasterBranch.java\"), files));"},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"newFile.java\"), files));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void extractFileInfos_sinceDateFebrauaryNineToLatestCommit_success() {"},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getSinceDate(2018, Month.FEBRUARY.getValue(), 9);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        config.setSinceDate(date);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":64,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(5, files.size());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // files edited within commit range"},{"lineNumber":67,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"README.md\"), files));"},{"lineNumber":68,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"newPos/movedFile.java\"), files));"},{"lineNumber":69,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"annotationTest.java\"), files));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // files not edited within commit range"},{"lineNumber":72,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(isFileExistence(Paths.get(\"inMasterBranch.java\"), files));"},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(isFileExistence(Paths.get(\"blameTest.java\"), files));"},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(isFileExistence(Paths.get(\"newFile.java\"), files));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void extractFileInfos_directoryWithValidWhitelistedName_success() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), DIRECTORY_WITH_VALID_WHITELISTED_NAME_BRANCH);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(7, files.size());"},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\".gradle/anything.txt\"), files));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void extractFileInfos_branchWithValidWhitelistedFileName_success() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), BRANCH_WITH_VALID_WHITELISTED_FILE_NAME_BRANCH);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"whitelisted-format.txt\"), files));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void extractFileInfos_sinceDateAfterLatestCommit_emptyResult() {"},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getSinceDate(2050, Month.DECEMBER.getValue(), 31);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        config.setSinceDate(date);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(files.isEmpty());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void extractFileInfos_untilDateBeforeFirstCommit_emptyResult() {"},{"lineNumber":105,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getUntilDate(2015, Month.DECEMBER.getValue(), 31);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        config.setUntilDate(date);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":109,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(files.isEmpty());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void getEditedFileInfos_editFileInfoBranchSinceFebrauryEight_success() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), EDITED_FILE_INFO_BRANCH);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.getEditedFileInfos(config, FEBRUARY_EIGHT_COMMIT_HASH);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(3, files.size());"},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"README.md\"), files));"},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"annotationTest.java\"), files));"},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"newPos/movedFile.java\"), files));"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // file renamed without changing content, not included"},{"lineNumber":123,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(isFileExistence(Paths.get(\"renamedFile.java\"), files));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void getEditedFileInfos_editFileInfoBranchSinceFirstCommit_success() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), EDITED_FILE_INFO_BRANCH);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.getEditedFileInfos(config, FIRST_COMMIT_HASH);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(5, files.size());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // empty file created, not included"},{"lineNumber":134,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(isFileExistence(Paths.get(\"inMasterBranch.java\"), files));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void generateFileInfo_fileWithSpecialCharacters_correctFileInfoGenerated() {"},{"lineNumber":139,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(\".\", FILE_WITH_SPECIAL_CHARACTER.toString(),"},{"lineNumber":140,"author":{"gitId":"gok99"},"content":"                DEFAULT_FILE_SIZE_LIMIT, false, false);"},{"lineNumber":141,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(5, fileInfo.getLines().size());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void generateFileInfo_fileWithoutSpecialCharacters_correctFileInfoGenerated() {"},{"lineNumber":146,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(\".\", FILE_WITHOUT_SPECIAL_CHARACTER.toString(),"},{"lineNumber":147,"author":{"gitId":"gok99"},"content":"                DEFAULT_FILE_SIZE_LIMIT, false, false);"},{"lineNumber":148,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(5, fileInfo.getLines().size());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"gok99"},"content":"    public void generateFileInfo_fileExceedingSizeLimit_correctFileInfoGenerated() {"},{"lineNumber":153,"author":{"gitId":"gok99"},"content":"        config.setBranch(BRANCH_WITH_LARGE_FILE);"},{"lineNumber":154,"author":{"gitId":"gok99"},"content":"        GitCheckout.checkout(config.getRepoRoot(), config.getBranch());"},{"lineNumber":155,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), FILE_WITH_LARGE_SIZE,"},{"lineNumber":156,"author":{"gitId":"gok99"},"content":"                DEFAULT_FILE_SIZE_LIMIT, false, false);"},{"lineNumber":157,"author":{"gitId":"gok99"},"content":""},{"lineNumber":158,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(fileInfo.isFileAnalyzed());"},{"lineNumber":159,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(46902, fileInfo.getLines().size());"},{"lineNumber":160,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(fileInfo.getFileSize() \u003e DEFAULT_FILE_SIZE_LIMIT, fileInfo.exceedsFileLimit());"},{"lineNumber":161,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"gok99"},"content":""},{"lineNumber":163,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":164,"author":{"gitId":"gok99"},"content":"    public void generateFileInfo_fileExceedingSizeLimitAndSkipped_correctFileInfoGenerated() {"},{"lineNumber":165,"author":{"gitId":"gok99"},"content":"        config.setBranch(BRANCH_WITH_LARGE_FILE);"},{"lineNumber":166,"author":{"gitId":"gok99"},"content":"        GitCheckout.checkout(config.getRepoRoot(), config.getBranch());"},{"lineNumber":167,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), FILE_WITH_LARGE_SIZE,"},{"lineNumber":168,"author":{"gitId":"gok99"},"content":"                DEFAULT_FILE_SIZE_LIMIT, false, true);"},{"lineNumber":169,"author":{"gitId":"gok99"},"content":""},{"lineNumber":170,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(fileInfo.isFileAnalyzed());"},{"lineNumber":171,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(0, fileInfo.getLines().size());"},{"lineNumber":172,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(fileInfo.getFileSize() \u003e DEFAULT_FILE_SIZE_LIMIT, fileInfo.exceedsFileLimit());"},{"lineNumber":173,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"gok99"},"content":""},{"lineNumber":175,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"gok99"},"content":"    public void generateFileInfo_fileExceedingSizeLimitAndLimitIgnored_correctFileInfoGenerated() {"},{"lineNumber":177,"author":{"gitId":"gok99"},"content":"        config.setBranch(BRANCH_WITH_LARGE_FILE);"},{"lineNumber":178,"author":{"gitId":"gok99"},"content":"        GitCheckout.checkout(config.getRepoRoot(), config.getBranch());"},{"lineNumber":179,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), FILE_WITH_LARGE_SIZE,"},{"lineNumber":180,"author":{"gitId":"gok99"},"content":"                DEFAULT_FILE_SIZE_LIMIT, true, false);"},{"lineNumber":181,"author":{"gitId":"gok99"},"content":""},{"lineNumber":182,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(fileInfo.isFileAnalyzed());"},{"lineNumber":183,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(46902, fileInfo.getLines().size());"},{"lineNumber":184,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(fileInfo.exceedsFileLimit());"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void getFilesList_getTextFilesFromRepoWithBinaryFiles_success() {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        List\u003cString\u003e textFilesList \u003d Arrays.asList("},{"lineNumber":190,"author":{"gitId":"-"},"content":"                \"binaryFileTest/nonBinaryFile.txt\", \"My Documents/wordToHtml.htm\", \"My Pictures/notPngPicture.png\","},{"lineNumber":191,"author":{"gitId":"-"},"content":"                \"My Documents/wordToHtml_files/colorschememapping.xml\", \"My Documents/wordToHtml_files/filelist.xml\","},{"lineNumber":192,"author":{"gitId":"-"},"content":"                \"My Documents/notPdfDocument.pdf\");"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        List\u003cString\u003e binaryFilesList \u003d Arrays.asList("},{"lineNumber":194,"author":{"gitId":"-"},"content":"                \"binaryFileTest/binaryFile.txt\", \"My Documents/word.docx\", \"My Documents/pdfDocument.pdf\","},{"lineNumber":195,"author":{"gitId":"-"},"content":"                \"My Documents/wordToHtml_files/themedata.thmx\", \"My Pictures/pngPicture.png\");"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), BRANCH_WITH_BINARY_FILES);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        Set\u003cPath\u003e textFiles \u003d FileInfoExtractor.getFiles(config, false);"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(6, textFiles.size());"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // Non binary files should be captured"},{"lineNumber":201,"author":{"gitId":"yhtMinceraft1010X"},"content":"        textFilesList.forEach(textFile -\u003e Assertions.assertTrue(textFiles.contains(Paths.get(textFile))));"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // Binary files should be ignored"},{"lineNumber":203,"author":{"gitId":"yhtMinceraft1010X"},"content":"        binaryFilesList.forEach(binFile -\u003e Assertions.assertFalse(textFiles.contains(Paths.get(binFile))));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public void getFilesList_getBinaryFilesFromRepoWithTextFiles_success() {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        List\u003cString\u003e textFilesList \u003d Arrays.asList("},{"lineNumber":209,"author":{"gitId":"-"},"content":"                \"binaryFileTest/nonBinaryFile.txt\", \"My Documents/wordToHtml.htm\", \"My Pictures/notPngPicture.png\","},{"lineNumber":210,"author":{"gitId":"-"},"content":"                \"My Documents/wordToHtml_files/colorschememapping.xml\", \"My Documents/wordToHtml_files/filelist.xml\","},{"lineNumber":211,"author":{"gitId":"-"},"content":"                \"My Documents/notPdfDocument.pdf\");"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        List\u003cString\u003e binaryFilesList \u003d Arrays.asList("},{"lineNumber":213,"author":{"gitId":"-"},"content":"                \"binaryFileTest/binaryFile.txt\", \"My Documents/word.docx\", \"My Documents/pdfDocument.pdf\","},{"lineNumber":214,"author":{"gitId":"-"},"content":"                \"My Documents/wordToHtml_files/themedata.thmx\", \"My Pictures/pngPicture.png\");"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), BRANCH_WITH_BINARY_FILES);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        Set\u003cPath\u003e binaryFiles \u003d FileInfoExtractor.getFiles(config, true);"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(5, binaryFiles.size());"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        // Binary files should be captured"},{"lineNumber":220,"author":{"gitId":"yhtMinceraft1010X"},"content":"        binaryFilesList.forEach(binFile -\u003e Assertions.assertTrue(binaryFiles.contains(Paths.get(binFile))));"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        // Non binary files should be ignored"},{"lineNumber":222,"author":{"gitId":"yhtMinceraft1010X"},"content":"        textFilesList.forEach(textFile -\u003e Assertions.assertFalse(binaryFiles.contains(Paths.get(textFile))));"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    public void extractFileInfos_withoutSpecifiedFormats_success() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        List\u003cString\u003e textFilesList \u003d Arrays.asList("},{"lineNumber":228,"author":{"gitId":"-"},"content":"                \"binaryFileTest/nonBinaryFile.ARBIFORMAT\", \"My Documents/wordToHtml.htm\","},{"lineNumber":229,"author":{"gitId":"-"},"content":"                \"My Pictures/notPngPicture.png\", \"My Documents/wordToHtml_files/colorschememapping.xml\","},{"lineNumber":230,"author":{"gitId":"-"},"content":"                \"My Documents/wordToHtml_files/filelist.xml\", \"My Documents/notPdfDocument.fdp\");"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        List\u003cString\u003e binaryFilesList \u003d Arrays.asList("},{"lineNumber":232,"author":{"gitId":"-"},"content":"                \"binaryFileTest/binaryFile.ARBIFORMAT\", \"My Documents/word.docx\", \"My Documents/pdfDocument.fdp\","},{"lineNumber":233,"author":{"gitId":"-"},"content":"                \"My Documents/wordToHtml_files/themedata.thmx\", \"My Pictures/pngPicture.png\");"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        config.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), BRANCH_WITH_RARE_FILE_FORMATS);"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(textFilesList.size(), files.size());"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        // Non binary files should be captured"},{"lineNumber":241,"author":{"gitId":"yhtMinceraft1010X"},"content":"        textFilesList.forEach(textFile -\u003e Assertions.assertTrue(isFileExistence(Paths.get(textFile), files)));"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        // Binary files should be ignored"},{"lineNumber":243,"author":{"gitId":"yhtMinceraft1010X"},"content":"        binaryFilesList.forEach(binFile -\u003e Assertions.assertFalse(isFileExistence(Paths.get(binFile), files)));"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    public void getEditedFileInfos_repoWithFilesWithSpaces_success() {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d FileInfoExtractor.getEditedFileInfos(config, FEBRUARY_EIGHT_COMMIT_HASH);"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isFileExistence(Paths.get(\"space test.txt\"), fileInfos));"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"    private boolean isFileExistence(Path filePath, List\u003cFileInfo\u003e files) {"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        return files.stream().anyMatch(file -\u003e Paths.get(file.getPath()).equals(filePath));"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":45,"gok99":44,"-":167}},{"path":"src/test/java/reposense/authorship/FileResultAggregatorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":""},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"import java.time.Month;"},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"gok99"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"gok99"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"gok99"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"gok99"},"content":""},{"lineNumber":11,"author":{"gitId":"gok99"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"gok99"},"content":""},{"lineNumber":14,"author":{"gitId":"gok99"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":17,"author":{"gitId":"gok99"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":18,"author":{"gitId":"gok99"},"content":"import reposense.util.TestUtil;"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":""},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"public class FileResultAggregatorTest extends GitTestTemplate {"},{"lineNumber":21,"author":{"gitId":"gok99"},"content":""},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"    private static final LocalDateTime CLEAR_FILE_LINES_SINCE_DATE \u003d"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"            TestUtil.getSinceDate(2017, Month.JANUARY.getValue(), 1);"},{"lineNumber":24,"author":{"gitId":"gok99"},"content":"    private static final LocalDateTime CLEAR_FILE_LINES_UNTIL_DATE \u003d"},{"lineNumber":25,"author":{"gitId":"gok99"},"content":"            TestUtil.getUntilDate(2022, Month.MARCH.getValue(), 8);"},{"lineNumber":26,"author":{"gitId":"gok99"},"content":""},{"lineNumber":27,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"gok99"},"content":"    public void aggregateFileResult_clearFileLines_success() {"},{"lineNumber":29,"author":{"gitId":"gok99"},"content":"        config.setSinceDate(CLEAR_FILE_LINES_SINCE_DATE);"},{"lineNumber":30,"author":{"gitId":"gok99"},"content":"        config.setUntilDate(CLEAR_FILE_LINES_UNTIL_DATE);"},{"lineNumber":31,"author":{"gitId":"gok99"},"content":"        config.setBranch(\"1647-FileAnalyzerTest-analyzeTextFile_fileExceedingFileSizeLimit_success\");"},{"lineNumber":32,"author":{"gitId":"gok99"},"content":"        config.setAuthorList(new ArrayList\u003c\u003e());"},{"lineNumber":33,"author":{"gitId":"gok99"},"content":"        GitCheckout.checkout(config.getRepoRoot(), config.getBranch());"},{"lineNumber":34,"author":{"gitId":"gok99"},"content":""},{"lineNumber":35,"author":{"gitId":"gok99"},"content":"        // Logic identical to AuthorshipReporter.java"},{"lineNumber":36,"author":{"gitId":"gok99"},"content":"        List\u003cFileInfo\u003e textFileInfos \u003d FileInfoExtractor.extractTextFileInfos(config);"},{"lineNumber":37,"author":{"gitId":"gok99"},"content":""},{"lineNumber":38,"author":{"gitId":"gok99"},"content":"        List\u003cFileResult\u003e fileResults \u003d textFileInfos.stream()"},{"lineNumber":39,"author":{"gitId":"gok99"},"content":"                .filter(f -\u003e !f.getPath().equals(\"annotationTest.java\"))"},{"lineNumber":40,"author":{"gitId":"gok99"},"content":"                .map(fileInfo -\u003e FileInfoAnalyzer.analyzeTextFile(config, fileInfo))"},{"lineNumber":41,"author":{"gitId":"gok99"},"content":"                .filter(Objects::nonNull)"},{"lineNumber":42,"author":{"gitId":"gok99"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitId":"gok99"},"content":"        //"},{"lineNumber":44,"author":{"gitId":"gok99"},"content":""},{"lineNumber":45,"author":{"gitId":"gok99"},"content":"        FileResultAggregator.aggregateFileResult(fileResults, config.getAuthorList(), config.getAllFileTypes());"},{"lineNumber":46,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(fileResults.stream()"},{"lineNumber":47,"author":{"gitId":"gok99"},"content":"                .filter(f -\u003e f.getPath().contains(\"largeFile.json\"))"},{"lineNumber":48,"author":{"gitId":"gok99"},"content":"                .findFirst()"},{"lineNumber":49,"author":{"gitId":"gok99"},"content":"                .map(f -\u003e f.getLines().size()), Optional.of(0));"},{"lineNumber":50,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"gok99"},"content":"}"}],"authorContributionMap":{"gok99":51}},{"path":"src/test/java/reposense/commits/CommitInfoAnalyzerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.commits;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assumptions;"},{"lineNumber":16,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitInfo;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitResult;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.commits.model.ContributionPair;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommitInfoAnalyzerTest extends GitTestTemplate {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final int NUMBER_EUGENE_COMMIT \u003d 1;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final int NUMBER_MINGYI_COMMIT \u003d 1;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final int NUMBER_EMPTY_MESSAGE_COMMIT \u003d 1;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final FileType FILETYPE_JAVA \u003d new FileType(\"java\", Collections.singletonList(\"**java\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final FileType FILETYPE_MD \u003d new FileType(\"md\", Collections.singletonList(\"**md\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final FileType FILETYPE_TXT \u003d new FileType(\"txt\", Collections.singletonList(\"**txt\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String DUPLICATE_AUTHORS_DUPLICATE_COMMITS_HASH \u003d \"f34c20ec2c3be63e0764d4079a575dd75269ffeb\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeEach"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        super.before();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().clear();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void analyzeCommits_allAuthorNoIgnoredCommitsNoDateRange_success() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(commitInfos.size(), commitResults.size());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void analyzeCommits_fakeMainAuthorNoIgnoredCommitsNoDateRange_success() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(commitInfos.size() - NUMBER_EUGENE_COMMIT, commitResults.size());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void analyzeCommits_eugeneAuthorNoIgnoredCommitsNoDateRange_success() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(NUMBER_EUGENE_COMMIT, commitResults.size());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void analyzeCommits_allAuthorSingleCommitIgnoredNoDateRange_success() {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(Collections.singletonList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResultsFull \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList("},{"lineNumber":86,"author":{"gitId":"-"},"content":"                Collections.singletonList("},{"lineNumber":87,"author":{"gitId":"-"},"content":"                        new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8))));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResultsShort \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(commitResultsShort, commitResultsFull);"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(commitInfos.size() - 1, commitResultsFull.size());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void analyzeCommits_allAuthorMultipleCommitIgnoredNoDateRange_success() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList("},{"lineNumber":101,"author":{"gitId":"-"},"content":"                Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018, EUGENE_AUTHOR_README_FILE_COMMIT_07052018));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResultsFull \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(CommitHash.convertStringsToCommits(Arrays.asList("},{"lineNumber":104,"author":{"gitId":"-"},"content":"                FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8),"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING.substring(0, 8))));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResultsShort \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(commitResultsShort, commitResultsFull);"},{"lineNumber":109,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(commitInfos.size() - 2, commitResultsFull.size());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void analyzeCommits_noCommitMessage_success() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        config.setBranch(\"empty-commit-message\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().clear();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(YONG_AUTHOR_NAME, new Author(YONG_AUTHOR_NAME));"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        commitResults.removeIf(s -\u003e !s.getMessageTitle().isEmpty());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(NUMBER_EMPTY_MESSAGE_COMMIT, commitResults.size());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void analyzeCommits_emailWithAdditionOperator_success() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        config.setBranch(\"617-FileAnalyzerTest-analyzeFile_emailWithAdditionOperator_success\");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MINGYI_AUTHOR_NAME);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(NUMBER_MINGYI_COMMIT, commitResults.size());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void analyzeCommits_duplicateAuthorsDuplicateCommits_success() throws Exception {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(FAKE_AUTHOR_NAME);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e fileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        fileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(3, 3));"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, DUPLICATE_AUTHORS_DUPLICATE_COMMITS_HASH,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2021-08-03T12:53:39+08:00\"),"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                \"Update annotationTest.java\","},{"lineNumber":146,"author":{"gitId":"-"},"content":"                \"\", null, fileTypeAndContributionMap));"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        config.setAuthorList(Arrays.asList(author, author));"},{"lineNumber":149,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2021, Month.AUGUST, 3, 0, 0));"},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2021, Month.AUGUST, 4, 0, 0));"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(actualCommitInfos.size(), 2);"},{"lineNumber":156,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void analyzeCommits_commitsWithEmptyCommitMessageTitleOrBody_success() throws Exception {"},{"lineNumber":161,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Author author \u003d new Author(JINYAO_AUTHOR_NAME);"},{"lineNumber":162,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":163,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":164,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":165,"author":{"gitId":"yhtMinceraft1010X"},"content":"        firstFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(1, 0));"},{"lineNumber":166,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":167,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":168,"author":{"gitId":"yhtMinceraft1010X"},"content":"        secondFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(0, 1));"},{"lineNumber":169,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":170,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // 1st test: Contains commit message title but no commit message body."},{"lineNumber":171,"author":{"gitId":"yhtMinceraft1010X"},"content":"        expectedCommitResults.add(new CommitResult(author, \"e54ae8fdb77c6c7d2c39131b816bfc03e6a6dd44\","},{"lineNumber":172,"author":{"gitId":"yhtMinceraft1010X"},"content":"                parseGitStrictIsoDate(\"2019-07-02T12:35:46+08:00\"), \"Test 1: With message title but no body\","},{"lineNumber":173,"author":{"gitId":"yhtMinceraft1010X"},"content":"                \"\", null, firstFileTypeAndContributionMap));"},{"lineNumber":174,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // 2nd test: Contains no commit message title and no commit message body."},{"lineNumber":175,"author":{"gitId":"yhtMinceraft1010X"},"content":"        expectedCommitResults.add(new CommitResult(author, \"57fa22fc2550210203c2941692f69ccb0cf18252\","},{"lineNumber":176,"author":{"gitId":"yhtMinceraft1010X"},"content":"                parseGitStrictIsoDate(\"2019-07-02T12:36:14+08:00\"), \"\", \"\", null,"},{"lineNumber":177,"author":{"gitId":"yhtMinceraft1010X"},"content":"                secondFileTypeAndContributionMap));"},{"lineNumber":178,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":179,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setBranch(\"751-CommitInfoAnalyzerTest-analyzeCommits_commitsWithEmptyCommitMessageTitleOrBody_success\");"},{"lineNumber":180,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":181,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2019, Month.JULY, 2, 0, 0));"},{"lineNumber":182,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2019, Month.JULY, 3, 0, 0));"},{"lineNumber":183,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":184,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":185,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":186,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":187,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    public void analyzeCommits_multipleCommitsWithCommitMessageBody_success() throws Exception {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(JINYAO_AUTHOR_NAME);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        firstFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(1, 0));"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        secondFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(0, 1));"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, \"2eccc111e813e8b2977719b5959e32b674c56afe\","},{"lineNumber":202,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2019-06-19T13:02:01+08:00\"), \"\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\","},{"lineNumber":203,"author":{"gitId":"-"},"content":"                \"Hi there!\\n\\n\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\n\", null,"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                firstFileTypeAndContributionMap));"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, \"8f8359649361f6736c31b87d499a4264f6cf7ed7\","},{"lineNumber":206,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2019-06-19T13:03:39+08:00\"), \"[#123] Reverted 1st commit\","},{"lineNumber":207,"author":{"gitId":"-"},"content":"                \"This is a test to see if the commit message body works. \""},{"lineNumber":208,"author":{"gitId":"-"},"content":"                        + \"All should be same same.\\n\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\n|The end.\", null,"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                secondFileTypeAndContributionMap));"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        config.setBranch(\"751-CommitInfoAnalyzerTest-analyzeCommits_multipleCommitsWithCommitMessageBody_success\");"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":213,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2019, Month.JUNE, 19, 0, 0));"},{"lineNumber":214,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2019, Month.JUNE, 20, 0, 0));"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void analyzeCommits_multipleCommitsWithCommitMessageBodyAndDifferentTimeZone_success() throws Exception {"},{"lineNumber":224,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Re-uses analyzeCommits_multipleCommitsWithCommitMessageBody_success() test."},{"lineNumber":225,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // But for this test, changes config timezone such that the commit date is one day behind"},{"lineNumber":226,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // in the config timezone compared to commit timezone."},{"lineNumber":227,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(JINYAO_AUTHOR_NAME);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        firstFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(1, 0));"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        secondFileTypeAndContributionMap.put(FILETYPE_JAVA, new ContributionPair(0, 1));"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        ZoneId originalZoneId \u003d config.getZoneId();"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        config.setZoneId(ZoneId.of(\"UTC-0530\"));"},{"lineNumber":238,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2019, Month.JUNE, 18, 0, 0));"},{"lineNumber":239,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2019, Month.JUNE, 19, 0, 0));"},{"lineNumber":240,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":241,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Equivalent to 2019-06-18 23:32:01 in UTC-0530 time."},{"lineNumber":242,"author":{"gitId":"yhtMinceraft1010X"},"content":"        expectedCommitResults.add(new CommitResult(author, \"2eccc111e813e8b2977719b5959e32b674c56afe\","},{"lineNumber":243,"author":{"gitId":"yhtMinceraft1010X"},"content":"                parseGitStrictIsoDate(\"2019-06-19T13:02:01+08:00\"), \"\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\","},{"lineNumber":244,"author":{"gitId":"yhtMinceraft1010X"},"content":"                \"Hi there!\\n\\n\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\n\", null,"},{"lineNumber":245,"author":{"gitId":"yhtMinceraft1010X"},"content":"                firstFileTypeAndContributionMap));"},{"lineNumber":246,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":247,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Equivalent to 2019-06-18 23:33:39 in UTC-0530 time."},{"lineNumber":248,"author":{"gitId":"yhtMinceraft1010X"},"content":"        expectedCommitResults.add(new CommitResult(author, \"8f8359649361f6736c31b87d499a4264f6cf7ed7\","},{"lineNumber":249,"author":{"gitId":"yhtMinceraft1010X"},"content":"                parseGitStrictIsoDate(\"2019-06-19T13:03:39+08:00\"), \"[#123] Reverted 1st commit\","},{"lineNumber":250,"author":{"gitId":"yhtMinceraft1010X"},"content":"                \"This is a test to see if the commit message body works. \""},{"lineNumber":251,"author":{"gitId":"yhtMinceraft1010X"},"content":"                        + \"All should be same same.\\n\u003e\u003e\u003eCOMMIT INFO\u003c\u003c\u003c\\n|The end.\", null,"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                secondFileTypeAndContributionMap));"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setBranch(\"751-CommitInfoAnalyzerTest-analyzeCommits_multipleCommitsWithCommitMessageBody_success\");"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":261,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":262,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setZoneId(originalZoneId);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    public void analyzeCommits_commitsWithMultipleTags_success() throws Exception {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(JAMES_AUTHOR_NAME);"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        firstFileTypeAndContributionMap.put(FILETYPE_MD, new ContributionPair(2, 1));"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        secondFileTypeAndContributionMap.put(FILETYPE_MD, new ContributionPair(1, 0));"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, \"62c3a50ef9b3580b2070deac1eed2b3e2d701e04\","},{"lineNumber":277,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2019-12-20T22:45:18+08:00\"), \"Single Tag Commit\","},{"lineNumber":278,"author":{"gitId":"-"},"content":"                \"\", new String[] {\"1st\"}, firstFileTypeAndContributionMap));"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, \"c5e36ec059390233ac036db61a84fa6b55952506\","},{"lineNumber":280,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2019-12-20T22:47:21+08:00\"), \"Double Tag Commit\","},{"lineNumber":281,"author":{"gitId":"-"},"content":"                \"\", new String[] {\"2nd-tag\", \"1st-tag\"}, secondFileTypeAndContributionMap));"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":"        config.setBranch(\"879-CommitInfoAnalyzerTest-analyzeCommits_commitsWithMultipleTags_success\");"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":285,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2019, Month.DECEMBER, 20, 0, 0));"},{"lineNumber":286,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2019, Month.DECEMBER, 21, 0, 0));"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":295,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void analyzeCommits_commitsWithMultipleTagsAndDifferentTimeZone_success() throws Exception {"},{"lineNumber":296,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Re-uses analyzeCommits_commitsWithMultipleTags_success() test."},{"lineNumber":297,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // But for this test, changes config timezone such that the commit date is one day ahead"},{"lineNumber":298,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // in the config timezone compared to the commit timezone."},{"lineNumber":299,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Author author \u003d new Author(JAMES_AUTHOR_NAME);"},{"lineNumber":300,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":301,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":302,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":303,"author":{"gitId":"yhtMinceraft1010X"},"content":"        firstFileTypeAndContributionMap.put(FILETYPE_MD, new ContributionPair(2, 1));"},{"lineNumber":304,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":305,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":306,"author":{"gitId":"yhtMinceraft1010X"},"content":"        secondFileTypeAndContributionMap.put(FILETYPE_MD, new ContributionPair(1, 0));"},{"lineNumber":307,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"        ZoneId originalZoneId \u003d config.getZoneId();"},{"lineNumber":309,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":310,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setBranch(\"879-CommitInfoAnalyzerTest-analyzeCommits_commitsWithMultipleTags_success\");"},{"lineNumber":311,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":312,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"        config.setZoneId(ZoneId.of(\"UTC+10\"));"},{"lineNumber":314,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2019, Month.DECEMBER, 21, 0, 0));"},{"lineNumber":315,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2019, Month.DECEMBER, 22, 0, 0));"},{"lineNumber":316,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":317,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Date-time equivalent to 2019-12-21 00:45:18 in UTC+10 time"},{"lineNumber":318,"author":{"gitId":"yhtMinceraft1010X"},"content":"        expectedCommitResults.add(new CommitResult(author, \"62c3a50ef9b3580b2070deac1eed2b3e2d701e04\","},{"lineNumber":319,"author":{"gitId":"yhtMinceraft1010X"},"content":"                parseGitStrictIsoDate(\"2019-12-20T22:45:18+08:00\"), \"Single Tag Commit\","},{"lineNumber":320,"author":{"gitId":"yhtMinceraft1010X"},"content":"                \"\", new String[] {\"1st\"}, firstFileTypeAndContributionMap));"},{"lineNumber":321,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":322,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Date-time equivalent to 2019-12-21 00:47:21 in UTC+10 time"},{"lineNumber":323,"author":{"gitId":"yhtMinceraft1010X"},"content":"        expectedCommitResults.add(new CommitResult(author, \"c5e36ec059390233ac036db61a84fa6b55952506\","},{"lineNumber":324,"author":{"gitId":"yhtMinceraft1010X"},"content":"                parseGitStrictIsoDate(\"2019-12-20T22:47:21+08:00\"), \"Double Tag Commit\","},{"lineNumber":325,"author":{"gitId":"yhtMinceraft1010X"},"content":"                \"\", new String[] {\"2nd-tag\", \"1st-tag\"}, secondFileTypeAndContributionMap));"},{"lineNumber":326,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":327,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":328,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":329,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":330,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":331,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":332,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setZoneId(originalZoneId);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public void analyzeCommits_emptyCommits_success() throws Exception {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(JAMES_AUTHOR_NAME);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, \"016ab87c4afe89a98225b96c98ff28dd4774410f\","},{"lineNumber":341,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2020-01-27T22:20:51+08:00\"), \"empty commit\", \"\", null));"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"        config.setBranch(\"1019-CommitInfoAnalyzerTest-emptyCommits\");"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        config.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"},{"lineNumber":346,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2020, Month.JANUARY, 27, 0, 0));"},{"lineNumber":347,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2020, Month.JANUARY, 28, 0, 0));"},{"lineNumber":348,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":349,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":350,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":351,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":352,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":353,"author":{"gitId":"yhtMinceraft1010X"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":355,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":356,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void analyzeCommits_emptyCommitsWithDifferentTimeZone_success() throws Exception {"},{"lineNumber":357,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Re-uses analyzeCommits_emptyCommits_success() test."},{"lineNumber":358,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // But for this test, changes config timezone to be different from what would be given in CommitInfo."},{"lineNumber":359,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // However, the date should still be the same."},{"lineNumber":360,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Author author \u003d new Author(JAMES_AUTHOR_NAME);"},{"lineNumber":361,"author":{"gitId":"yhtMinceraft1010X"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":362,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":363,"author":{"gitId":"yhtMinceraft1010X"},"content":"        // Equivalent to 2020-01-27 23:20:51 in UTC+9 time."},{"lineNumber":364,"author":{"gitId":"-"},"content":"        ZoneId originalZoneId \u003d config.getZoneId();"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        config.setZoneId(ZoneId.of(\"UTC+9\"));"},{"lineNumber":366,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2020, Month.JANUARY, 27, 0, 0));"},{"lineNumber":367,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2020, Month.JANUARY, 28, 0, 0));"},{"lineNumber":368,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":369,"author":{"gitId":"yhtMinceraft1010X"},"content":"        expectedCommitResults.add(new CommitResult(author, \"016ab87c4afe89a98225b96c98ff28dd4774410f\","},{"lineNumber":370,"author":{"gitId":"yhtMinceraft1010X"},"content":"                parseGitStrictIsoDate(\"2020-01-27T22:20:51+08:00\"), \"empty commit\", \"\", null));"},{"lineNumber":371,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":372,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setBranch(\"1019-CommitInfoAnalyzerTest-emptyCommits\");"},{"lineNumber":373,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":374,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":377,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":380,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setZoneId(originalZoneId);"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    public void analyzeCommits_commitsWithBinaryFileContribution_success() throws Exception {"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(JAMES_AUTHOR_NAME);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"        // binary file contribution will have 0 contribution and won\u0027t be added to fileTypesAndContributionMap"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, \"a00c51138cbf5ab7d14f52b52abb182c8a369169\","},{"lineNumber":390,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2020-04-06T16:41:10+08:00\"), \"Add binary file\", \"\", null));"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"        config.setBranch(\"1192-CommitInfoAnalyzerTest-analyzeCommits_commitsWithBinaryContribution_success\");"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        config.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"},{"lineNumber":395,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2020, Month.APRIL, 6, 0, 0));"},{"lineNumber":396,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2020, Month.APRIL, 7, 0, 0));"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":405,"author":{"gitId":"-"},"content":"    public void analyzeCommits_fileNameWithSpecialChars_success() throws Exception {"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        // Runs test only on non Windows (Unix) operating systems as the file names are invalid in windows"},{"lineNumber":407,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assumptions.assumeTrue(!SystemUtil.isWindows());"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(JAMES_ALTERNATIVE_AUTHOR_NAME);"},{"lineNumber":410,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e expectedCommitResults \u003d new ArrayList\u003c\u003e();"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e firstFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        firstFileTypeAndContributionMap.put(FILETYPE_TXT, new ContributionPair(1, 0));"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, \"cfb3c8dc477cb0af19fce8bead4d278f35afa396\","},{"lineNumber":414,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2020-04-20T12:09:39+08:00\"),"},{"lineNumber":415,"author":{"gitId":"-"},"content":"                \"Create file name without special chars\","},{"lineNumber":416,"author":{"gitId":"-"},"content":"                \"\", null, firstFileTypeAndContributionMap));"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        Map\u003cFileType, ContributionPair\u003e secondFileTypeAndContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":418,"author":{"gitId":"-"},"content":"        secondFileTypeAndContributionMap.put(FILETYPE_TXT, new ContributionPair(0, 0));"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        expectedCommitResults.add(new CommitResult(author, \"17bde492e9a80d8699ad193cf87e677341f936cc\","},{"lineNumber":420,"author":{"gitId":"-"},"content":"                parseGitStrictIsoDate(\"2020-04-20T12:17:40+08:00\"),"},{"lineNumber":421,"author":{"gitId":"-"},"content":"                \"Rename to file name with special chars\","},{"lineNumber":422,"author":{"gitId":"-"},"content":"                \"\", null, secondFileTypeAndContributionMap));"},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"        config.setBranch(\"1244-CommitInfoAnalyzerTest-analyzeCommits_fileNameWithSpecialChars_success\");"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":426,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(LocalDateTime.of(2020, Month.APRIL, 20, 0, 0));"},{"lineNumber":427,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(LocalDateTime.of(2020, Month.APRIL, 21, 0, 0));"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e actualCommitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        List\u003cCommitResult\u003e actualCommitResults \u003d CommitInfoAnalyzer.analyzeCommits(actualCommitInfos, config);"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, actualCommitInfos.size());"},{"lineNumber":433,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedCommitResults, actualCommitResults);"},{"lineNumber":434,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":437,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link LocalDateTime} from a string {@code gitStrictIsoDate}."},{"lineNumber":438,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":439,"author":{"gitId":"-"},"content":"    private LocalDateTime parseGitStrictIsoDate(String gitStrictIsoDate) {"},{"lineNumber":440,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return ZonedDateTime.parse(gitStrictIsoDate, CommitInfoAnalyzer.GIT_STRICT_ISO_DATE_FORMAT)"},{"lineNumber":441,"author":{"gitId":"-"},"content":"                .withZoneSameInstant(config.getZoneId()).toLocalDateTime();"},{"lineNumber":442,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":443,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":155,"-":288}},{"path":"src/test/java/reposense/commits/CommitInfoExtractorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.commits;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitInfo;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommitInfoExtractorTest extends GitTestTemplate {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void withContentTest() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commits \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(commits.isEmpty());"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void withoutContentTest() {"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime sinceDate \u003d TestUtil.getSinceDate(2050, Month.JANUARY.getValue(), 1);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        config.setSinceDate(sinceDate);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cCommitInfo\u003e commits \u003d CommitInfoExtractor.extractCommitInfos(config);"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(commits.isEmpty());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":7,"-":23}},{"path":"src/test/java/reposense/git/GitBlameTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Assumptions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class GitBlameTest extends GitTestTemplate {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    protected static final Pattern IGNORED_AUTHOR_PATTERN \u003d Pattern.compile(\"(FH-30)\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void blameRaw_validFile_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String content \u003d GitBlame.blame(config.getRepoRoot(), \"blameTest.java\");"},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(content.isEmpty());"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void blameRaw_nonExistentFile_throwsRunTimeException() {"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(RuntimeException.class, () -\u003e GitBlame.blame(config.getRepoRoot(), \"nonExistentFile\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void blameWithPreviousAuthorsRaw_validFile_success() {"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        Assumptions.assumeTrue(GitVersion.isGitVersionSufficientForFindingPreviousAuthors());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        config.setBranch(TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        createTestIgnoreRevsFile(AUTHOR_TO_IGNORE_BLAME_COMMIT_LIST_07082021);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String content \u003d GitBlame.blameWithPreviousAuthors(config.getRepoRoot(),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \"blameTest.java\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        removeTestIgnoreRevsFile();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Matcher ignoredAuthorMatcher \u003d IGNORED_AUTHOR_PATTERN.matcher(content);"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(ignoredAuthorMatcher.find());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void blameWithPreviousAuthorsRaw_nonExistentFile_throwsRunTimeException() {"},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(RuntimeException.class, () -\u003e"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"                GitBlame.blameWithPreviousAuthors(config.getRepoRoot(), \"nonExistentFile\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":2,"yhtMinceraft1010X":9,"-":35}},{"path":"src/test/java/reposense/git/GitBranchTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GitBranchTest extends GitTestTemplate {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_UNCOMMON_DEFAULT_GIT_LOCATION \u003d"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \"https://github.com/reposense/testrepo-UncommonDefaultBranch.git\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void getCurrentBranch_masterBranch_success() throws Exception {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String currentBranch \u003d GitBranch.getCurrentBranch(config.getRepoRoot());"},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"master\", currentBranch);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void getCurrentBranch_uncommonDefaultBranch_success() throws Exception {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        RepoConfiguration uncommonDefaultConfig \u003d new RepoConfiguration("},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_UNCOMMON_DEFAULT_GIT_LOCATION), RepoConfiguration.DEFAULT_BRANCH);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        uncommonDefaultConfig.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(uncommonDefaultConfig);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String currentBranch \u003d GitBranch.getCurrentBranch(uncommonDefaultConfig.getRepoRoot());"},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"uncommon\", currentBranch);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":2,"yhtMinceraft1010X":4,"-":27}},{"path":"src/test/java/reposense/git/GitCatFileTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class GitCatFileTest extends GitTestTemplate {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void getParentCommits_normalCommit_success() throws Exception {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parentsList \u003d GitCatFile.getParentCommits(config.getRepoRoot(), TEST_COMMIT_HASH);"},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, parentsList.size());"},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_COMMIT_HASH_PARENT, parentsList.get(0));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void getParentCommits_rootCommit_success() throws Exception {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parentsList \u003d GitCatFile.getParentCommits(config.getRepoRoot(), ROOT_COMMIT_HASH);"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(0, parentsList.size());"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void getParentCommits_nonExistentCommit_throwsEmptyCommitException() {"},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(CommitNotFoundException.class, () -\u003e GitCatFile.getParentCommits(config.getRepoRoot(),"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"                NONEXISTENT_COMMIT_HASH));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void getParentsOfCommits_singleCommit_success() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parentsList \u003d GitCatFile.getParentsOfCommits("},{"lineNumber":36,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), Arrays.asList(TEST_COMMIT_HASH));"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, parentsList.size());"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_COMMIT_HASH_PARENT, parentsList.get(0));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        List\u003cString\u003e emptyParentsList \u003d GitCatFile.getParentsOfCommits("},{"lineNumber":40,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), Arrays.asList(ROOT_COMMIT_HASH));"},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(0, emptyParentsList.size());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void getParentsOfCommits_multipleCommits_success() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        List\u003cString\u003e parentsList \u003d GitCatFile.getParentsOfCommits("},{"lineNumber":47,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), Arrays.asList(TEST_COMMIT_HASH, ROOT_COMMIT_HASH, LATEST_COMMIT_HASH));"},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, parentsList.size());"},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_COMMIT_HASH_PARENT, parentsList.get(0));"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(LATEST_COMMIT_HASH_PARENT, parentsList.get(1));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":15,"-":37}},{"path":"src/test/java/reposense/git/GitCheckoutTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class GitCheckoutTest extends GitTestTemplate {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void checkout_validBranch_success() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), \"test\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Path branchFile \u003d Paths.get(config.getRepoRoot(), \"inTestBranch.java\");"},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(branchFile));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void checkoutBranchTest() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        Path branchFile \u003d Paths.get(config.getRepoRoot(), \"inTestBranch.java\");"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(Files.exists(branchFile));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), \"test\");"},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(branchFile));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void checkoutHashTest() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Path newFile \u003d Paths.get(config.getRepoRoot(), \"newFile.java\");"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(newFile));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), FIRST_COMMIT_HASH);"},{"lineNumber":40,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(Files.exists(newFile));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void checkoutToDate_validDate_success() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Path newFile \u003d Paths.get(config.getRepoRoot(), \"newFile.java\");"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(newFile));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime untilDate \u003d TestUtil.getUntilDate(2018, Month.FEBRUARY.getValue(), 6);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), untilDate, config.getZoneId());"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(Files.exists(newFile));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void checkoutToDate_invalidDate_throwsEmptyCommitException() {"},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime untilDate \u003d TestUtil.getUntilDate(2015, Month.FEBRUARY.getValue(), 6);"},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(CommitNotFoundException.class, () -\u003e GitCheckout.checkoutDate(config.getRepoRoot(),"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                config.getBranch(), untilDate, config.getZoneId()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":16,"-":43}},{"path":"src/test/java/reposense/git/GitCloneTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class GitCloneTest extends GitTestTemplate {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void cloneTest_validRepo_success() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // As the clone has been performed in the {@code GitTestTemplate},"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // this checks whether the clone has been executed successfully by performing a file system check."},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Path dir \u003d Paths.get(config.getRepoRoot());"},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(dir));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":3,"-":18}},{"path":"src/test/java/reposense/git/GitDiffTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class GitDiffTest extends GitTestTemplate {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void diffCommit_validCommitHash_success() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(),"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018.toString());"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(diffResult.isEmpty());"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void diffCommit_emptyCommitHash_emptyResult() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), LATEST_COMMIT_HASH);"},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(diffResult.isEmpty());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void diffCommit_latestCommitHash_emptyResult() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), \"\");"},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(diffResult.isEmpty());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void diffCommit_nonexistentCommitHash_throwsRunTimeException() {"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(RuntimeException.class, () -\u003e GitDiff.diffCommit(config.getRepoRoot(),"},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"                NONEXISTENT_COMMIT_HASH));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void diffCommit_commitContainingSubmodule_ignoresSubmodule() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \"850-GitDiffTest-diffCommit_commitContainingSubmodule_ignoresSubmodule\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), EMPTY_TREE_HASH);"},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(diffResult.contains(\"Subproject commit\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":9,"-":34}},{"path":"src/test/java/reposense/git/GitLogTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class GitLogTest extends GitTestTemplate {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void gitLog_existingFormats_hasContent() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(content.isEmpty());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void gitLog_nonExistingFormats_noContent() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(Collections.singletonList(\"py\")));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":27,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void gitLog_includeAllJavaFiles_success() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(Collections.singletonList(\"java\")));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(10, content));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void gitLog_fakeAuthorNameOnly_success() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Author fakeAuthorName \u003d new Author(FAKE_AUTHOR_NAME);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, fakeAuthorName);"},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(6, content));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void gitLog_authorNameIncorrectCase_success() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Author fakeAuthorName \u003d new Author(FAKE_AUTHOR_NAME.toUpperCase());"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, fakeAuthorName);"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(6, content));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void gitLog_fakeAuthorNameWithSpecialCharacter_success() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Author fakeAuthorWithSpecialCharacter \u003d new Author(FAKE_AUTHOR_NAME.replace(\"fake\", \"#()!\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, fakeAuthorWithSpecialCharacter);"},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(6, content));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void gitLog_includeAllJavaFilesAuthorIgnoreMovedFile_success() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(Collections.singletonList(\"java\")));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Author ignoreMovedFileAuthor \u003d getAlphaAllAliasAuthor();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        ignoreMovedFileAuthor.setIgnoreGlobList(Collections.singletonList(\"**movedFile.java\"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.getWithFiles(config, ignoreMovedFileAuthor);"},{"lineNumber":68,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(4, content));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void gitLog_authorIgnoreAllJavaFiles_success() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        config.setFormats(FileType.convertFormatStringsToFileTypes(Collections.singletonList(\"java\")));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Author ignoreAllJavaFilesAuthor \u003d getAlphaAllAliasAuthor();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        ignoreAllJavaFilesAuthor.setIgnoreGlobList(Collections.singletonList(\"*.java\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.getWithFiles(config, ignoreAllJavaFilesAuthor);"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(0, content));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void gitLog_validIgnoreGlobs_success() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Author author \u003d getAlphaAllAliasAuthor();"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"annotationTest.java\"));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(6, content));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"**Test**\"));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(5, content));"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"README.md\"));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":95,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(6, content));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"**.java\"));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(1, content));"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"./newPos\"));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":103,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(6, content));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void gitLog_invalidIgnoreGlobs_filtered() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Author author \u003d getAlphaAllAliasAuthor();"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"../testrepo-Alpha\"));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(7, content));"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"../*.java\"));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(7, content));"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"/newPos\"));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(7, content));"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Collections.singletonList(\"..\"));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        content \u003d GitLog.getWithFiles(config, author);"},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberFilesChanged(7, content));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void gitLog_authorWithAllCharactersRegexAlias_emptyResult() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Author authorWithAllCharactersRegexAlias \u003d new Author(\"none\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        authorWithAllCharactersRegexAlias.setAuthorAliases(Collections.singletonList(\".*\"));"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, authorWithAllCharactersRegexAlias);"},{"lineNumber":133,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void gitLog_sinceDateInFuture_noContent() {"},{"lineNumber":138,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getSinceDate(2050, Month.JANUARY.getValue(), 1);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        config.setSinceDate(date);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":141,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void gitLog_untilDateBeforeAnyCommit_noContent() {"},{"lineNumber":146,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getUntilDate(2010, Month.JANUARY.getValue(), 1);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        config.setUntilDate(date);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        config.setSinceDate(null);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(content.isEmpty());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void gitLog_emailWithAdditionOperator_success() {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        config.setBranch(\"617-FileAnalyzerTest-analyzeFile_emailWithAdditionOperator_success\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MINGYI_AUTHOR_NAME);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        String content \u003d GitLog.get(config, author);"},{"lineNumber":161,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(1, content));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":27,"-":136}},{"path":"src/test/java/reposense/git/GitRemoteTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":""},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"import static reposense.git.GitRemote.DEFAULT_FETCH_REMOTE;"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"import static reposense.git.GitRemote.DEFAULT_PUSH_REMOTE;"},{"lineNumber":5,"author":{"gitId":"gok99"},"content":""},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitId":"gok99"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitId":"gok99"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"gok99"},"content":""},{"lineNumber":10,"author":{"gitId":"gok99"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":11,"author":{"gitId":"gok99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":""},{"lineNumber":13,"author":{"gitId":"gok99"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":14,"author":{"gitId":"gok99"},"content":""},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"class GitRemoteTest extends GitTestTemplate {"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":""},{"lineNumber":17,"author":{"gitId":"gok99"},"content":"    private static final String REMOTE_URL_ORIGIN \u003d \"https://github.com/reposense/RepoSense.git\";"},{"lineNumber":18,"author":{"gitId":"gok99"},"content":"    private static final String REMOTE_URL_NON_ORIGIN \u003d \"https://github.com/TestSenseRepo/RepoSense.git\";"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":"    private static final String NON_ORIGIN_FETCH_REMOTE_NAME_1 \u003d \"testrepo(fetch)\";"},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"    private static final String NON_ORIGIN_PUSH_REMOTE_NAME_1 \u003d \"testrepo(push)\";"},{"lineNumber":21,"author":{"gitId":"gok99"},"content":"    private static final String NON_ORIGIN_FETCH_REMOTE_NAME_2 \u003d \"testrepo2(fetch)\";"},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"    private static final String NON_ORIGIN_PUSH_REMOTE_NAME_2 \u003d \"testrepo2(push)\";"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":""},{"lineNumber":24,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"gok99"},"content":"    void getRemotes_singleOriginRemote_success() {"},{"lineNumber":26,"author":{"gitId":"gok99"},"content":"        Map\u003cString, String\u003e remotes \u003d GitRemote.getRemotes(config.getRepoRoot());"},{"lineNumber":27,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(remotes.entrySet().size(), 2);"},{"lineNumber":28,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(remotes.containsKey(DEFAULT_FETCH_REMOTE));"},{"lineNumber":29,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(remotes.containsKey(DEFAULT_PUSH_REMOTE));"},{"lineNumber":30,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(remotes.values().stream().allMatch(s -\u003e"},{"lineNumber":31,"author":{"gitId":"gok99"},"content":"                s.equals(TEST_REPO_GIT_LOCATION)));"},{"lineNumber":32,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"gok99"},"content":""},{"lineNumber":34,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"gok99"},"content":"    void getAvailableRemoteLocation_emptyRemotes_returnsEmpty() {"},{"lineNumber":36,"author":{"gitId":"gok99"},"content":"        Map\u003cString, String\u003e remotes \u003d new HashMap\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"gok99"},"content":""},{"lineNumber":38,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(Optional.empty(),"},{"lineNumber":39,"author":{"gitId":"gok99"},"content":"                GitRemote.getAvailableRemoteLocation(remotes));"},{"lineNumber":40,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"gok99"},"content":""},{"lineNumber":42,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"gok99"},"content":"    void getAvailableRemoteLocation_remotesContainingOrigin_returnsOrigin() {"},{"lineNumber":44,"author":{"gitId":"gok99"},"content":"        Map\u003cString, String\u003e remotes \u003d new HashMap\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"gok99"},"content":"        remotes.put(NON_ORIGIN_FETCH_REMOTE_NAME_1, REMOTE_URL_NON_ORIGIN);"},{"lineNumber":46,"author":{"gitId":"gok99"},"content":"        remotes.put(NON_ORIGIN_PUSH_REMOTE_NAME_1, REMOTE_URL_NON_ORIGIN);"},{"lineNumber":47,"author":{"gitId":"gok99"},"content":"        remotes.put(DEFAULT_FETCH_REMOTE, REMOTE_URL_ORIGIN);"},{"lineNumber":48,"author":{"gitId":"gok99"},"content":"        remotes.put(DEFAULT_PUSH_REMOTE, REMOTE_URL_ORIGIN);"},{"lineNumber":49,"author":{"gitId":"gok99"},"content":""},{"lineNumber":50,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(Optional.of(REMOTE_URL_ORIGIN),"},{"lineNumber":51,"author":{"gitId":"gok99"},"content":"                GitRemote.getAvailableRemoteLocation(remotes));"},{"lineNumber":52,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"gok99"},"content":""},{"lineNumber":54,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"gok99"},"content":"    void getAvailableRemoteLocation_remotesNotContainingOrigin_returnsAny() {"},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"        Map\u003cString, String\u003e remotes \u003d new HashMap\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"gok99"},"content":"        remotes.put(NON_ORIGIN_FETCH_REMOTE_NAME_1, REMOTE_URL_NON_ORIGIN);"},{"lineNumber":58,"author":{"gitId":"gok99"},"content":"        remotes.put(NON_ORIGIN_PUSH_REMOTE_NAME_1, REMOTE_URL_NON_ORIGIN);"},{"lineNumber":59,"author":{"gitId":"gok99"},"content":"        remotes.put(NON_ORIGIN_FETCH_REMOTE_NAME_2, REMOTE_URL_ORIGIN);"},{"lineNumber":60,"author":{"gitId":"gok99"},"content":"        remotes.put(NON_ORIGIN_PUSH_REMOTE_NAME_2, REMOTE_URL_ORIGIN);"},{"lineNumber":61,"author":{"gitId":"gok99"},"content":""},{"lineNumber":62,"author":{"gitId":"gok99"},"content":"        String remoteName \u003d GitRemote.getAvailableRemoteLocation(remotes).orElse(\"\");"},{"lineNumber":63,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(remotes.containsValue(remoteName));"},{"lineNumber":64,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"gok99"},"content":"}"}],"authorContributionMap":{"gok99":65}},{"path":"src/test/java/reposense/git/GitRevListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GitRevListTest extends GitTestTemplate {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"gok99"},"content":"    public void getCommitHashUntilDate_beforeInitialCommitDate_emptyResult() {"},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getUntilDate(2018, Month.FEBRUARY.getValue(), 4);"},{"lineNumber":18,"author":{"gitId":"gok99"},"content":"        String commitHash \u003d GitRevList.getCommitHashUntilDate(config.getRepoRoot(), config.getBranch(), date,"},{"lineNumber":19,"author":{"gitId":"-"},"content":"                config.getZoneId());"},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(commitHash.isEmpty());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"gok99"},"content":"    public void getCommitHashUntilDate_afterLatestCommitDate_success() {"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getUntilDate(2018, Month.MAY.getValue(), 10);"},{"lineNumber":26,"author":{"gitId":"gok99"},"content":"        String commitHash \u003d GitRevList.getCommitHashUntilDate(config.getRepoRoot(), config.getBranch(), date,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                config.getZoneId());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // result from git has a newline at the end"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(EUGENE_AUTHOR_README_FILE_COMMIT_07052018 + \"\\n\", commitHash);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"gok99"},"content":"    public void getCommitHashUntilDate_februaryNineDate_success() {"},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getUntilDate(2018, Month.FEBRUARY.getValue(), 8);"},{"lineNumber":36,"author":{"gitId":"gok99"},"content":"        String commitHash \u003d GitRevList.getCommitHashUntilDate(config.getRepoRoot(), config.getBranch(), date,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                config.getZoneId());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // result from git has a newline at the end"},{"lineNumber":40,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018 + \"\\n\", commitHash);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void getCommitHashBeforeDate_nullDate_emptyResult() {"},{"lineNumber":45,"author":{"gitId":"gok99"},"content":"        String commitHash \u003d GitRevList.getCommitHashUntilDate(config.getRepoRoot(), config.getBranch(), null, null);"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(commitHash.isEmpty());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void getCommitHashBeforeDate_invalidBranch_throwsRunTimeException() {"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime date \u003d TestUtil.getUntilDate(2018, Month.FEBRUARY.getValue(), 9);"},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(RuntimeException.class, () -\u003e GitRevList.getCommitHashUntilDate(config.getRepoRoot(),"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                \"invalidBranch\", date, config.getZoneId()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void getCommitHashInRange_nullStartAndEndHash_emptyResult() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String commitHash \u003d GitRevList.getCommitHashInRange(config.getRepoRoot(), config.getBranch(), null, null);"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(commitHash.isEmpty());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void getCommitHashInRange_nullStartHash_success() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String commitHash \u003d GitRevList.getCommitHashInRange(config.getRepoRoot(), config.getBranch(), null,"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                LATEST_COMMIT_HASH);"},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(LATEST_COMMIT_HASH, commitHash);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void getCommitHashInRange_nullEndHash_success() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String commitHash \u003d GitRevList.getCommitHashInRange(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                LATEST_COMMIT_HASH, null);"},{"lineNumber":73,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(LATEST_COMMIT_HASH, commitHash);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void getCommitHashInRange_sameStartAndEndHash_success() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String commitHash \u003d GitRevList.getCommitHashInRange(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                LATEST_COMMIT_HASH, LATEST_COMMIT_HASH);"},{"lineNumber":80,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(LATEST_COMMIT_HASH, commitHash);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void getCommitHashInRange_invalidStartAndEndHash_emptyResult() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String commitHash \u003d GitRevList.getCommitHashInRange(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                NONEXISTENT_COMMIT_HASH, NONEXISTENT_COMMIT_HASH);"},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(commitHash.isEmpty());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void getCommitHashInRange_invalidStartHash_success() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String commitHash \u003d GitRevList.getCommitHashInRange(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                NONEXISTENT_COMMIT_HASH, LATEST_COMMIT_HASH);"},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(LATEST_COMMIT_HASH, commitHash);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void getCommitHashInRange_invalidEndHash_success() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String commitHash \u003d GitRevList.getCommitHashInRange(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                LATEST_COMMIT_HASH, NONEXISTENT_COMMIT_HASH);"},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(LATEST_COMMIT_HASH, commitHash);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void getRootCommits_success() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        List\u003cString\u003e rootCommits \u003d GitRevList.getRootCommits(config.getRepoRoot());"},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, rootCommits.size());"},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(ROOT_COMMIT_HASH, rootCommits.get(0));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void getIsEmptyRepo_success() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        boolean isEmpty \u003d GitRevList.checkIsEmptyRepo(config.getRepoRoot());"},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(false, isEmpty);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":24,"gok99":7,"-":85}},{"path":"src/test/java/reposense/git/GitRevParseTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GitRevParseTest extends GitTestTemplate {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void assertBranchExists_withExistingBranch_success() throws Exception {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        config.setBranch(\"master\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        GitRevParse.assertBranchExists(config, Paths.get(config.getRepoRoot()));"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void assertBranchExists_withNonExistentBranch_throwsGitBranchException() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        config.setBranch(\"nonExistentBranch\");"},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(GitBranchException.class, () -\u003e GitRevParse.assertBranchExists(config,"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Paths.get(config.getRepoRoot())));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":6,"-":19}},{"path":"src/test/java/reposense/git/GitShortlogTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class GitShortlogTest extends GitTestTemplate {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void getAuthors_validRepoNoDateRange_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"Eugene Peh\"));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"FH-30\"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"WANG CHAO\"));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"chan-j-d\"));"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"eugenepeh\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"fakeAuthor\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"harryggg\"));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedAuthorList.size(), actualAuthorList.size());"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedAuthorList, actualAuthorList);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void getAuthors_validRepoDateRange_success() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedAuthorList.add(new Author(\"eugenepeh\"));"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(TestUtil.getSinceDate(2018, Month.MAY.getValue(), 5));"},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(TestUtil.getUntilDate(2018, Month.MAY.getValue(), 10));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedAuthorList.size(), actualAuthorList.size());"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedAuthorList, actualAuthorList);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void getAuthors_validRepoDateOutOfRange_success() {"},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setSinceDate(TestUtil.getSinceDate(2018, Month.JUNE.getValue(), 1));"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"        config.setUntilDate(TestUtil.getUntilDate(2018, Month.JUNE.getValue(), 20));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(actualAuthorList.isEmpty());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":12,"-":44}},{"path":"src/test/java/reposense/git/GitShowTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GitShowTest extends GitTestTemplate {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getExpandedCommitHash_shortCommitHash_success() throws Exception {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        String expandedCommitHash \u003d GitShow.getExpandedCommitHash(config.getRepoRoot(), TEST_COMMIT_HASH).toString();"},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expandedCommitHash, TEST_COMMIT_HASH_LONG);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void getExpandedCommitHash_nonExistentCommit_throwsEmptyCommitException() {"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(CommitNotFoundException.class, () -\u003e GitShow.getExpandedCommitHash("},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"                config.getRepoRoot(), NONEXISTENT_COMMIT_HASH));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void getCommitDate_normalCommit_success() throws Exception {"},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime commitDate \u003d GitShow.getCommitDate(config.getRepoRoot(), TEST_COMMIT_HASH);"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedDate \u003d LocalDateTime.parse(\"2018-02-09 22:17:39 +0800\","},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss Z\"));"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedDate, commitDate);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void getParentCommits_nonExistentCommit_throwsEmptyCommitException() {"},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(CommitNotFoundException.class, () -\u003e GitShow.getCommitDate(config.getRepoRoot(),"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"                NONEXISTENT_COMMIT_HASH));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void getEarliestCommitDate_singleCommit_success() throws Exception {"},{"lineNumber":43,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime earliestDate \u003d GitShow.getEarliestCommitDate("},{"lineNumber":44,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), Arrays.asList(TEST_COMMIT_HASH));"},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedDate \u003d LocalDateTime.parse(\"2018-02-09 22:17:39 +0800\","},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss Z\"));"},{"lineNumber":47,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedDate, earliestDate);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void getEarliestCommitDate_multipleCommits_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime earliestDate \u003d GitShow.getEarliestCommitDate("},{"lineNumber":53,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), Arrays.asList(TEST_COMMIT_HASH, ROOT_COMMIT_HASH, LATEST_COMMIT_HASH));"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedDate \u003d LocalDateTime.parse(\"2018-02-05 16:00:39 +0800\","},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss Z\"));"},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedDate, earliestDate);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void getEarliestCommitDate_nonexistentCommit_throwsEmptyCommitException() {"},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(CommitNotFoundException.class, () -\u003e GitShow.getEarliestCommitDate("},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"                config.getRepoRoot(), Arrays.asList(NONEXISTENT_COMMIT_HASH, NONEXISTENT_COMMIT_HASH,"},{"lineNumber":63,"author":{"gitId":"yhtMinceraft1010X"},"content":"                        NONEXISTENT_COMMIT_HASH)));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":30,"-":35}},{"path":"src/test/java/reposense/git/GitUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.git.GitUtil.convertToGitExcludeGlobArgs;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.StringsUtil.addQuotes;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class GitUtilTest extends GitTestTemplate {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void gitUtil_convertToGitExcludeGlobArgs_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        File repoRoot \u003d new File(config.getRepoRoot());"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"        final String cmdFormat \u003d \" \" + addQuotes(\":(exclude)%s\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        final String emptyResult \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String result \u003d convertToGitExcludeGlobArgs(repoRoot, Collections.emptyList());"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(emptyResult, result);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        result \u003d convertToGitExcludeGlobArgs(repoRoot, Collections.singletonList(\"**.js\"));"},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(String.format(cmdFormat, \"**.js\"), result);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        result \u003d convertToGitExcludeGlobArgs(repoRoot, Collections.singletonList(\"movedFile**\"));"},{"lineNumber":29,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(String.format(cmdFormat, \"movedFile**\"), result);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        result \u003d convertToGitExcludeGlobArgs(repoRoot, Collections.singletonList(\"*\\\\newPos\"));"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(String.format(cmdFormat, \"*\\\\newPos\"), result);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        result \u003d convertToGitExcludeGlobArgs(repoRoot, Collections.singletonList(\"newPos/*\"));"},{"lineNumber":35,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(String.format(cmdFormat, \"newPos/*\"), result);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        result \u003d convertToGitExcludeGlobArgs(repoRoot, Collections.singletonList(\"../**\"));"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(emptyResult, result);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        result \u003d convertToGitExcludeGlobArgs(repoRoot, Collections.singletonList(\"\\\\**\"));"},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(emptyResult, result);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        result \u003d convertToGitExcludeGlobArgs(repoRoot, Collections.singletonList(\"/newPos/*\"));"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(emptyResult, result);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":2,"yhtMinceraft1010X":10,"-":34}},{"path":"src/test/java/reposense/git/GitVersionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.git;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static reposense.git.GitVersion.getVersionNumberAndReleaseNumberFromString;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static reposense.git.GitVersion.isGitVersionOutputAtLeastVersion;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GitVersionTest extends GitTestTemplate {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    protected static final Pattern VALID_GIT_VERSION_PATTERN \u003d Pattern.compile(\"git.* (\\\\d+.\\\\d+.\\\\d+).*\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void gitVersionRaw_validGitVersion_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        boolean isValidGitVersion \u003d VALID_GIT_VERSION_PATTERN.matcher(GitVersion.getGitVersion()).find();"},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(isValidGitVersion);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    public void getVersionNumberAndReleaseNumberFromString_validCommandOutput_success() {"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"        String[] expectedVersionAndReleaseNumbers1 \u003d new String[] {\"1\", \"0\"};"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"        String[] expectedVersionAndReleaseNumbers2 \u003d new String[] {\"2\", \"22\"};"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertArrayEquals(expectedVersionAndReleaseNumbers1,"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"                getVersionNumberAndReleaseNumberFromString(\"git version 1.0.0\"));"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertArrayEquals(expectedVersionAndReleaseNumbers2,"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"                getVersionNumberAndReleaseNumberFromString(\"git version 2.22.5.windows.1\"));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"    public void isGitVersionOutputAtLeastVersion_smallerThanVersions_returnsFalse() {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertFalse(isGitVersionOutputAtLeastVersion(\"git version 1.0.0\", \"2.23.0\"));"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertFalse(isGitVersionOutputAtLeastVersion(\"git version 2.17.0\\n\", \"2.23\"));"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertFalse(isGitVersionOutputAtLeastVersion(\"git version 2.17.0.windows.1\\n\", \"2.23.5\"));"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertFalse(isGitVersionOutputAtLeastVersion(\"git version 1.7.1\", \"2.0\"));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"    public void isGitVersionOutputAtLeastVersion_greaterThanVersions_returnsTrue() {"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertTrue(isGitVersionOutputAtLeastVersion(\"git version 3.0.0\", \"2.23.0\"));"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertTrue(isGitVersionOutputAtLeastVersion(\"git version 2.35.0\\n\", \"2.23\"));"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertTrue(isGitVersionOutputAtLeastVersion(\"git version 2.35.1.windows.2\\n\", \"2.23.5\"));"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertTrue(isGitVersionOutputAtLeastVersion(\"git version 2.23.1\", \"2.23.1\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":20,"yhtMinceraft1010X":3,"-":24}},{"path":"src/test/java/reposense/model/AuthorTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.AssertUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class AuthorTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void setEmail_validEmails_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"Tester\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String[] emails \u003d new String[] {\"tester@test.net\", \"developer@example.com\"};"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        author.setEmails(Arrays.asList(emails));"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // The additional 1 email comes from the Standard GitHub Email."},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(emails.length + 1, author.getEmails().size());"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(author.getEmails().containsAll(Arrays.asList(emails)));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setEmail_invalidEmails_throwIllegalArgumentException() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"Tester\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String[] emails \u003d new String[] {\"this.”is\\\\ invalid”@example.com\", \"developer@example.com\"};"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        AssertUtil.assertThrows(IllegalArgumentException.class, () -\u003e author.setEmails(Arrays.asList(emails)));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        AssertUtil.assertThrows(IllegalArgumentException.class, () -\u003e author.setEmails(Collections.singletonList(\"\")));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setIgnoreGlobList_validGlobRegex_success() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"Tester\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\"};"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String[] testPaths \u003d new String[] {\"docs/UserGuide.adoc\", \"collated/codeeong.md\"};"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, author.getIgnoreGlobList().size());"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(author.getIgnoreGlobList().containsAll(Arrays.asList(ignoreGlobs)));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Arrays.stream(testPaths).forEach(value -\u003e"},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Assertions.assertTrue(author.isIgnoringFile(Paths.get(value))));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setIgnoreGlobList_quoteInGlobPattern_throwIllegalArgumentException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"Tester\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\\\"\"};"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e author.setIgnoreGlobList("},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Arrays.asList(ignoreGlobs)));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setIgnoreGlobList_semicolonInGlobPattern_throwIllegalArgumentException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"Tester\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String[] ignoreGlobs \u003d new String[] {\"**.adoc; echo hi\", \"collated/**\"};"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e author.setIgnoreGlobList("},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Arrays.asList(ignoreGlobs)));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void appendIgnoreGlobList_validGlobRegex_success() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"Tester\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\"};"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String[] moreIgnoreGlobs \u003d new String[] {\"**[!(.md)]\", \"C:\\\\\\\\Program Files\\\\\\\\**\"};"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String[] testPaths \u003d new String[] {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            \"docs/UserGuide.adoc\","},{"lineNumber":76,"author":{"gitId":"-"},"content":"            \"collated/codeeong.md\","},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"C:\\\\Program Files\\\\RepoSense\\\\README.md\","},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \"/this/is/not/a/md/file.txt\""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        List\u003cString\u003e ignoreGlobList \u003d new ArrayList\u003c\u003e(Arrays.asList(ignoreGlobs));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        ignoreGlobList.addAll(Arrays.asList(moreIgnoreGlobs));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        author.importIgnoreGlobList(Arrays.asList(moreIgnoreGlobs));"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, author.getIgnoreGlobList().size());"},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(author.getIgnoreGlobList().containsAll(ignoreGlobList));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Arrays.stream(testPaths).forEach(value -\u003e"},{"lineNumber":89,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Assertions.assertTrue(author.isIgnoringFile(Paths.get(value))));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void appendIgnoreGlobList_appendOrOperator_throwIllegalArgumentException() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"Tester\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String[] ignoreGlobs \u003d new String[] {\"**[!(.md)] | rm -rf /\", \"C:\\\\Program Files\\\\**\"};"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e author.importIgnoreGlobList("},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Arrays.asList(ignoreGlobs)));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":19,"-":81}},{"path":"src/test/java/reposense/model/CommitHashTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class CommitHashTest {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void validateCommits_validHash_success() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        CommitHash.validateCommits(Arrays.asList(\"8d0ac2ee20f04dce8df0591caed460bffacb65a4\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"                \"136c6713fc00cfe79a1598e8ce83c6ef3b878660\"));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void validateCommits_invalidAlphabet_throwIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e CommitHash.validateCommits("},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Arrays.asList(\"8d0ac2ee20f04dce8df0591caed460gffacb65a4\")));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void validateCommits_nonAlphanumeric_throwIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e CommitHash.validateCommits("},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"                Arrays.asList(\"!d0ac2ee20f04dce8df0591caed460gffacb65a4\")));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":8,"-":18}},{"path":"src/test/java/reposense/model/FileTypeManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class FileTypeManagerTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private FileTypeManager fileTypeManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeEach"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        fileTypeManager \u003d new FileTypeManager(Collections.emptyList());"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void getFileType_withCustomGroups_getsCorrectGroupLabel() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        fileTypeManager.setGroups(Arrays.asList("},{"lineNumber":21,"author":{"gitId":"-"},"content":"                new FileType(\"code\", Collections.singletonList(\"src/main/**\")),"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                new FileType(\"docs\", Arrays.asList(\"backend/docs/**\", \"src/docs/**\"))"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        ));"},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"docs\", fileTypeManager.getFileType(\"src/docs/a/b/c/def.md\").toString());"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"code\", fileTypeManager.getFileType(\"src/main/a/b/c/def.java\").toString());"},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"other\", fileTypeManager.getFileType(\"src/main.java\").toString());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void getFileType_noCustomGroups_returnsCorrectFormat() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // Files with standard format should return the format name itself"},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"makefile\", fileTypeManager.getFileType(\"src/build/makefile\").toString());"},{"lineNumber":33,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"cpp\", fileTypeManager.getFileType(\"src/main/main.cpp\").toString());"},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"7z\", fileTypeManager.getFileType(\"src/main/archive.7z\").toString());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // Files that are not of the standard format should return \"other\"."},{"lineNumber":37,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"other\", fileTypeManager.getFileType(\"Backup File\").toString());"},{"lineNumber":38,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(\"other\", fileTypeManager.getFileType(\"duke.j@va\").toString());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void isInsideFormatsWhiteList_whitelistedFormat_success() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        fileTypeManager.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(fileTypeManager.isInsideWhitelistedFormats(\"test.py\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void isInsideFormatsWhiteList_notWhitelistedFormat_success() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        fileTypeManager.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"},{"lineNumber":50,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(fileTypeManager.isInsideWhitelistedFormats(\"test.cpp\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":14,"-":38}},{"path":"src/test/java/reposense/model/FileTypeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class FileTypeTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final List\u003cString\u003e DEFAULT_TEST_FORMAT_STRINGS \u003d Arrays.asList("},{"lineNumber":12,"author":{"gitId":"-"},"content":"            \"adoc\", \"cs\", \"css\", \"fxml\", \"gradle\", \"html\", \"java\", \"js\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"json\", \"jsp\", \"md\", \"py\", \"tag\", \"txt\", \"xml\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final List\u003cFileType\u003e DEFAULT_TEST_FORMATS \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":15,"author":{"gitId":"-"},"content":"            DEFAULT_TEST_FORMAT_STRINGS);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final List\u003cFileType\u003e NO_SPECIFIED_FORMATS \u003d Collections.emptyList();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void validateFileTypeLabel_validLabel_success() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        FileType.validateFileTypeLabel(\"tEsT123\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        FileType.validateFileTypeLabel(\"t$e\u0027s\u0026t Me\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void validateFileTypeLabel_emptyLabel_throwsIllegalArgumentException() {"},{"lineNumber":26,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e FileType.validateFileTypeLabel(\"\"));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void validateFileFormat_isAlphaNumeric_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        FileType.validateFileFormat(\"tEsT123\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void validateFileFormat_specialCharacters_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e FileType.validateFileFormat(\"$pull request\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void isFileGlobMatching_matchingFormat_success() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        FileType fileType \u003d FileType.convertStringFormatToFileType(\"f1\");"},{"lineNumber":42,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(fileType.isFileGlobMatching(\"src/test/main.f1\"));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void isFileGlobMatching_nonMatchingFormat_success() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        FileType fileType \u003d FileType.convertStringFormatToFileType(\"f1\");"},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(fileType.isFileGlobMatching(\"src/test/main.java\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void isFileGlobMatching_matchingGroup_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        FileType fileType \u003d new FileType(\"test\", Collections.singletonList(\"**/test/*\"));"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(fileType.isFileGlobMatching(\"src/test/main.java\"));"},{"lineNumber":55,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(fileType.isFileGlobMatching(\"src//test/main.java\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void isFileGlobMatching_nonMatchingGroup_success() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        FileType fileType \u003d new FileType(\"test\", Collections.singletonList(\"**/test/*\"));"},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(fileType.isFileGlobMatching(\"test/main.java\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":11,"-":52}},{"path":"src/test/java/reposense/model/RepoConfigurationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.lang.reflect.Method;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class RepoConfigurationTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_STANDALONE_TEST_CONFIG_FILES \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class, \"RepoConfigurationTest/repoconfig_ignoreStandAlone_test\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_STANDALONE_KEYWORD_TEST_CONFIG_FILES \u003d"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class, \"RepoConfigurationTest/repoconfig_ignoreStandAloneKeyword_test\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path FORMATS_TEST_CONFIG_FILES \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_formats_test\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Path WITHOUT_FORMATS_TEST_CONFIG_FILES \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_withoutformats_test\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path GROUPS_TEST_CONFIG_FILES \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_groups_test\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path OVERRIDE_STANDALONE_TEST_CONFIG_FILE \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_overrideStandAlone_test\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_AUTHORS_TEST_CONFIG_FILE \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_ignoreAuthors_test\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Path IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_ignoreStandaloneOverrideCsv_test\");"},{"lineNumber":44,"author":{"gitId":"gok99"},"content":"    private static final Path IGNORE_FILESIZE_LIMIT_TEST_CONFIG_FILES \u003d loadResource(RepoConfigurationTest.class,"},{"lineNumber":45,"author":{"gitId":"gok99"},"content":"            \"RepoConfigurationTest/repoconfig_ignoreFileSizeLimit_test\");"},{"lineNumber":46,"author":{"gitId":"gok99"},"content":"    private static final Path IGNORE_FILESIZE_LIMIT_OVERRIDE_CSV_TEST_CONFIG_FILES \u003d"},{"lineNumber":47,"author":{"gitId":"gok99"},"content":"            loadResource(RepoConfigurationTest.class,"},{"lineNumber":48,"author":{"gitId":"gok99"},"content":"            \"RepoConfigurationTest/repoconfig_ignoreFileSizeLimitOverrideCsv_test\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Path SHALLOW_CLONING_TEST_CONFIG_FILES \u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class, \"RepoConfigurationTest/repoconfig_shallowCloning_test\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final Path SHALLOW_CLONING_FLAG_OVERRIDE_TEST_CONFIG_FILES \u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_shallowCloningOverrideCsv_test\");"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final Path FIND_PREVIOUS_AUTHORS_TEST_CONFIG_FILES \u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_findPreviousAuthors_test\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final Path FIND_PREVIOUS_AUTHORS_FLAG_OVERRIDE_TEST_CONFIG_FILES \u003d"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigurationTest.class,"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            \"RepoConfigurationTest/repoconfig_findPreviousAuthorsOverrideCsv_test\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_MINIMAL_STANDALONE_CONFIG \u003d"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            \"https://github.com/reposense/testrepo-minimalstandaloneconfig.git\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static final Author FIRST_AUTHOR \u003d new Author(\"lithiumlkid\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final Author SECOND_AUTHOR \u003d new Author(\"codeeong\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final Author THIRD_AUTHOR \u003d new Author(\"jordancjq\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final Author FOURTH_AUTHOR \u003d new Author(\"lohtianwei\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_ALIASES \u003d Collections.singletonList(\"Ahmad Syafiq\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Collections.emptyList();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e THIRD_AUTHOR_ALIASES \u003d Collections.singletonList(\"Jordan Chong\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FOURTH_AUTHOR_ALIASES \u003d Collections.singletonList(\"Tianwei\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Collections.singletonList(\"collated**\");"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            Arrays.asList(\"*.aa1\", \"**.aa2\", \"**.java\", \"collated**\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"\", \"collated**\");"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e THIRD_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**[!(.md)]\", \"collated**\");"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FOURTH_AUTHOR_GLOB_LIST \u003d Collections.singletonList(\"collated**\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e CONFIG_FORMATS \u003d FileType.convertFormatStringsToFileTypes(Arrays.asList("},{"lineNumber":84,"author":{"gitId":"-"},"content":"            \"java\", \"adoc\", \"md\"));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e FIRST_CONFIG_GROUPS \u003d Arrays.asList("},{"lineNumber":86,"author":{"gitId":"-"},"content":"            new FileType(\"test\", Collections.singletonList(\"src/test**\")),"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            new FileType(\"code\", Collections.singletonList(\"**.java\")),"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            new FileType(\"docs\", Collections.singletonList(\"docs**\")));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e SECOND_CONFIG_GROUPS \u003d Arrays.asList("},{"lineNumber":90,"author":{"gitId":"-"},"content":"            new FileType(\"docs\", Collections.singletonList(\"docs**\")));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e CLI_FORMATS \u003d Arrays.asList(\"css\", \"html\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static RepoConfiguration repoDeltaStandaloneConfig;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeAll"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static void setUp() throws Exception {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setAuthorAliases(FIRST_AUTHOR_ALIASES);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        THIRD_AUTHOR.setAuthorAliases(THIRD_AUTHOR_ALIASES);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        FOURTH_AUTHOR.setAuthorAliases(FOURTH_AUTHOR_ALIASES);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setIgnoreGlobList(SECOND_AUTHOR_GLOB_LIST);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        THIRD_AUTHOR.setIgnoreGlobList(THIRD_AUTHOR_GLOB_LIST);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        FOURTH_AUTHOR.setIgnoreGlobList(FOURTH_AUTHOR_GLOB_LIST);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        expectedAuthors.add(FIRST_AUTHOR);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        expectedAuthors.add(SECOND_AUTHOR);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        expectedAuthors.add(THIRD_AUTHOR);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        expectedAuthors.add(FOURTH_AUTHOR);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorList(expectedAuthors);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.addAuthorDetailsToAuthorMapEntry(FIRST_AUTHOR, FIRST_AUTHOR_ALIASES);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.addAuthorDetailsToAuthorMapEntry(FOURTH_AUTHOR, FOURTH_AUTHOR_ALIASES);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Ahm\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Cod\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorDisplayName(THIRD_AUTHOR, \"Jor\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setAuthorDisplayName(FOURTH_AUTHOR, \"Loh\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setEmails(Arrays.asList(\"codeeong@gmail.com\", \"33129797+codeeong@users.noreply.github.com\"));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        for (Author author : expectedAuthors) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            repoDeltaStandaloneConfig.addAuthorDetailsToAuthorMapEntry(author, author.getEmails());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        repoDeltaStandaloneConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void repoConfig_usesStandaloneConfig_success() throws Exception {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, actualConfig);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoresStandaloneConfig_success() throws Exception {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(FIRST_AUTHOR);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        expectedAuthors.add(author);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorList(expectedAuthors);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        expectedConfig.addAuthorDetailsToAuthorMapEntry(author, FIRST_AUTHOR_ALIASES);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorDisplayName(author, \"Ahm\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_TEST_CONFIG_FILES)"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":169,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoresStandaloneConfigInCli_success() throws Exception {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_DELTA)"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":192,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void repoConfig_ignoreStandaloneConfigInCli_overrideCsv() throws Exception {"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":202,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_BETA), \"master\");"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":206,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST)"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":220,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":221,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":229,"author":{"gitId":"gok99"},"content":"    public void repoConfig_ignoreFileSizeLimit_success() throws Exception {"},{"lineNumber":230,"author":{"gitId":"gok99"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":231,"author":{"gitId":"gok99"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":232,"author":{"gitId":"gok99"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":233,"author":{"gitId":"gok99"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":234,"author":{"gitId":"gok99"},"content":"        expectedConfig.setFileSizeLimitIgnored(true);"},{"lineNumber":235,"author":{"gitId":"gok99"},"content":""},{"lineNumber":236,"author":{"gitId":"gok99"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":237,"author":{"gitId":"gok99"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_FILESIZE_LIMIT_TEST_CONFIG_FILES)"},{"lineNumber":238,"author":{"gitId":"gok99"},"content":"                .addFormats(formats)"},{"lineNumber":239,"author":{"gitId":"gok99"},"content":"                .build();"},{"lineNumber":240,"author":{"gitId":"gok99"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":241,"author":{"gitId":"gok99"},"content":""},{"lineNumber":242,"author":{"gitId":"gok99"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":243,"author":{"gitId":"gok99"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":244,"author":{"gitId":"gok99"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":245,"author":{"gitId":"gok99"},"content":""},{"lineNumber":246,"author":{"gitId":"gok99"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":247,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":248,"author":{"gitId":"gok99"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":249,"author":{"gitId":"gok99"},"content":""},{"lineNumber":250,"author":{"gitId":"gok99"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":251,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"gok99"},"content":""},{"lineNumber":253,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":254,"author":{"gitId":"gok99"},"content":"    public void repoConfig_ignoreFileSizeLimitInCli_overrideCsv() throws Exception {"},{"lineNumber":255,"author":{"gitId":"gok99"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":256,"author":{"gitId":"gok99"},"content":"                new RepoLocation(TEST_REPO_BETA), \"master\");"},{"lineNumber":257,"author":{"gitId":"gok99"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":258,"author":{"gitId":"gok99"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":259,"author":{"gitId":"gok99"},"content":"        repoBetaExpectedConfig.setFileSizeLimitIgnored(true);"},{"lineNumber":260,"author":{"gitId":"gok99"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":261,"author":{"gitId":"gok99"},"content":"                new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":262,"author":{"gitId":"gok99"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":263,"author":{"gitId":"gok99"},"content":"        repoDeltaExpectedConfig.setFileSizeLimitIgnored(true);"},{"lineNumber":264,"author":{"gitId":"gok99"},"content":""},{"lineNumber":265,"author":{"gitId":"gok99"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_FILESIZE_LIMIT_OVERRIDE_CSV_TEST_CONFIG_FILES)"},{"lineNumber":266,"author":{"gitId":"gok99"},"content":"                .addIgnoreFilesizeLimit()"},{"lineNumber":267,"author":{"gitId":"gok99"},"content":"                .build();"},{"lineNumber":268,"author":{"gitId":"gok99"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":269,"author":{"gitId":"gok99"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":270,"author":{"gitId":"gok99"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":271,"author":{"gitId":"gok99"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":272,"author":{"gitId":"gok99"},"content":"        RepoConfiguration.setFileSizeLimitIgnoredToRepoConfigs(actualConfigs,"},{"lineNumber":273,"author":{"gitId":"gok99"},"content":"                cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":274,"author":{"gitId":"gok99"},"content":""},{"lineNumber":275,"author":{"gitId":"gok99"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":276,"author":{"gitId":"gok99"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":277,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":278,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutIgnoreStandaloneConfigInCli_useCsv() throws Exception {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":288,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_BETA), \"master\");"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_FLAG_OVERRIDE_CSV_TEST).build();"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":295,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs,"},{"lineNumber":297,"author":{"gitId":"-"},"content":"                cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":301,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":302,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, repoDeltaActualConfig);"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"-"},"content":""},{"lineNumber":309,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    public void repoConfig_wrongKeywordUseStandaloneConfig_success() throws Exception {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_STANDALONE_KEYWORD_TEST_CONFIG_FILES)"},{"lineNumber":313,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":314,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":318,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":321,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaStandaloneConfig, actualConfig);"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    public void repoConfig_shallowCloning_success() throws Exception {"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        expectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(SHALLOW_CLONING_TEST_CONFIG_FILES)"},{"lineNumber":337,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":338,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":342,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":346,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    public void repoConfig_shallowCloningInCli_success() throws Exception {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":356,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":357,"author":{"gitId":"-"},"content":"        expectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_DELTA)"},{"lineNumber":361,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":362,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":363,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":369,"author":{"gitId":"-"},"content":"                cliArguments.isShallowCloningPerformed());"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":372,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":379,"author":{"gitId":"-"},"content":"    public void repoConfig_shallowCloningInCli_overrideCsv() throws Exception {"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":381,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_BETA), \"master\");"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":386,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(SHALLOW_CLONING_FLAG_OVERRIDE_TEST_CONFIG_FILES)"},{"lineNumber":391,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":392,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":394,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":395,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":398,"author":{"gitId":"-"},"content":"                cliArguments.isShallowCloningPerformed());"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":402,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":403,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutShallowCloningInInCli_useCsv() throws Exception {"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":413,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_BETA), \"master\");"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":418,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(SHALLOW_CLONING_FLAG_OVERRIDE_TEST_CONFIG_FILES).build();"},{"lineNumber":422,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":424,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":425,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":427,"author":{"gitId":"-"},"content":"                cliArguments.isShallowCloningPerformed());"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":431,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":432,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":433,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":434,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":436,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":437,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    public void repoConfig_findPreviousAuthors_success() throws Exception {"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        expectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FIND_PREVIOUS_AUTHORS_TEST_CONFIG_FILES)"},{"lineNumber":449,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":450,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":454,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":456,"author":{"gitId":"-"},"content":""},{"lineNumber":457,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":458,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":460,"author":{"gitId":"-"},"content":""},{"lineNumber":461,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":462,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":465,"author":{"gitId":"-"},"content":"    public void repoConfig_findPreviousAuthorsInCli_success() throws Exception {"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":467,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":468,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        expectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":470,"author":{"gitId":"-"},"content":""},{"lineNumber":471,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_DELTA)"},{"lineNumber":473,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":474,"author":{"gitId":"-"},"content":"                .addFindPreviousAuthors()"},{"lineNumber":475,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":478,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":480,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":481,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":484,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":485,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":486,"author":{"gitId":"-"},"content":""},{"lineNumber":487,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":488,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":491,"author":{"gitId":"-"},"content":"    public void repoConfig_findPreviousAuthorsInCli_overrideCsv() throws Exception {"},{"lineNumber":492,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":493,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_BETA), \"master\");"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":496,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":497,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":498,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":500,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FIND_PREVIOUS_AUTHORS_FLAG_OVERRIDE_TEST_CONFIG_FILES)"},{"lineNumber":503,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":504,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":505,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":507,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":510,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":513,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":514,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":515,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":516,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":517,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":520,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":523,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutFindPreviousAuthorsInCli_useCsv() throws Exception {"},{"lineNumber":524,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":525,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_BETA), \"master\");"},{"lineNumber":526,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":527,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":528,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setIsFindingPreviousAuthorsPerformed(true);"},{"lineNumber":529,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":530,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":532,"author":{"gitId":"-"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FIND_PREVIOUS_AUTHORS_FLAG_OVERRIDE_TEST_CONFIG_FILES).build();"},{"lineNumber":534,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":536,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":537,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":538,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":539,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":540,"author":{"gitId":"-"},"content":""},{"lineNumber":541,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":543,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":544,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":545,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":547,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":548,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":549,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":552,"author":{"gitId":"-"},"content":"    public void repoConfig_userEnvironmentCannotRunFindPreviousAuthors_setFindPreviousAuthorsToFalseInAllRepoConfigs()"},{"lineNumber":553,"author":{"gitId":"-"},"content":"            throws Exception {"},{"lineNumber":554,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":555,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_BETA), \"master\");"},{"lineNumber":556,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setFormats(FileType.convertFormatStringsToFileTypes(CLI_FORMATS));"},{"lineNumber":557,"author":{"gitId":"-"},"content":"        repoBetaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaExpectedConfig \u003d new RepoConfiguration("},{"lineNumber":559,"author":{"gitId":"-"},"content":"                new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":560,"author":{"gitId":"-"},"content":"        repoDeltaExpectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FIND_PREVIOUS_AUTHORS_FLAG_OVERRIDE_TEST_CONFIG_FILES).build();"},{"lineNumber":563,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":565,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":566,"author":{"gitId":"-"},"content":"        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(actualConfigs, true);"},{"lineNumber":567,"author":{"gitId":"-"},"content":"        RepoConfiguration.setIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs,"},{"lineNumber":568,"author":{"gitId":"-"},"content":"                cliArguments.isFindingPreviousAuthorsPerformed());"},{"lineNumber":569,"author":{"gitId":"-"},"content":""},{"lineNumber":570,"author":{"gitId":"-"},"content":"        // Assume by default that the environment does not support Find Previous Authors feature"},{"lineNumber":571,"author":{"gitId":"-"},"content":"        RepoConfiguration.setToFalseIsFindingPreviousAuthorsPerformedToRepoConfigs(actualConfigs);"},{"lineNumber":572,"author":{"gitId":"-"},"content":""},{"lineNumber":573,"author":{"gitId":"-"},"content":"        RepoConfiguration repoBetaActualConfig \u003d actualConfigs.get(0);"},{"lineNumber":574,"author":{"gitId":"-"},"content":"        RepoConfiguration repoDeltaActualConfig \u003d actualConfigs.get(1);"},{"lineNumber":575,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoBetaActualConfig);"},{"lineNumber":576,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(repoDeltaActualConfig);"},{"lineNumber":577,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoBetaActualConfig);"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(repoDeltaActualConfig);"},{"lineNumber":579,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoBetaExpectedConfig, repoBetaActualConfig);"},{"lineNumber":580,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(repoDeltaExpectedConfig, repoDeltaActualConfig);"},{"lineNumber":581,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":582,"author":{"gitId":"-"},"content":""},{"lineNumber":583,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":584,"author":{"gitId":"-"},"content":"    public void repoConfig_withFormats_ignoreCliFormats() throws Exception {"},{"lineNumber":585,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":586,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(FORMATS_TEST_CONFIG_FILES)"},{"lineNumber":587,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":588,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":590,"author":{"gitId":"-"},"content":""},{"lineNumber":591,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":592,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":594,"author":{"gitId":"-"},"content":""},{"lineNumber":595,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, actualConfigs.size());"},{"lineNumber":596,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(CONFIG_FORMATS, actualConfigs.get(0).getFileTypeManager().getFormats());"},{"lineNumber":597,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":598,"author":{"gitId":"-"},"content":""},{"lineNumber":599,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":600,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutFormats_useCliFormats() throws Exception {"},{"lineNumber":601,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":602,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(WITHOUT_FORMATS_TEST_CONFIG_FILES)"},{"lineNumber":603,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":604,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":605,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":606,"author":{"gitId":"-"},"content":""},{"lineNumber":607,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":608,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":609,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":610,"author":{"gitId":"-"},"content":""},{"lineNumber":611,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, actualConfigs.size());"},{"lineNumber":612,"author":{"gitId":"-"},"content":""},{"lineNumber":613,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e actualFormats \u003d actualConfigs.get(0).getFileTypeManager().getFormats();"},{"lineNumber":614,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(FileType.convertFormatStringsToFileTypes(CLI_FORMATS), actualFormats);"},{"lineNumber":615,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":616,"author":{"gitId":"-"},"content":""},{"lineNumber":617,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":618,"author":{"gitId":"-"},"content":"    public void repoConfig_withCustomGroups_useCustomGroups() throws Exception {"},{"lineNumber":619,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(GROUPS_TEST_CONFIG_FILES).build();"},{"lineNumber":620,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":621,"author":{"gitId":"-"},"content":""},{"lineNumber":622,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":623,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":624,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d"},{"lineNumber":625,"author":{"gitId":"-"},"content":"                new GroupConfigCsvParser(((ConfigCliArguments) cliArguments).getGroupConfigFilePath()).parse();"},{"lineNumber":626,"author":{"gitId":"-"},"content":""},{"lineNumber":627,"author":{"gitId":"-"},"content":"        RepoConfiguration.setGroupConfigsToRepos(actualConfigs, groupConfigs);"},{"lineNumber":628,"author":{"gitId":"-"},"content":""},{"lineNumber":629,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, actualConfigs.size());"},{"lineNumber":630,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(FIRST_CONFIG_GROUPS, actualConfigs.get(0).getFileTypeManager().getGroups());"},{"lineNumber":631,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(SECOND_CONFIG_GROUPS, actualConfigs.get(1).getFileTypeManager().getGroups());"},{"lineNumber":632,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":633,"author":{"gitId":"-"},"content":""},{"lineNumber":634,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":635,"author":{"gitId":"-"},"content":"    public void repoConfig_withoutFormatsAndCliFormats_useAllFormats() throws Exception {"},{"lineNumber":636,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(WITHOUT_FORMATS_TEST_CONFIG_FILES).build();"},{"lineNumber":637,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":638,"author":{"gitId":"-"},"content":""},{"lineNumber":639,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":640,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":641,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"},{"lineNumber":642,"author":{"gitId":"-"},"content":""},{"lineNumber":643,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, actualConfigs.size());"},{"lineNumber":644,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, actualConfigs.get(0).getFileTypeManager()"},{"lineNumber":645,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .getFormats());"},{"lineNumber":646,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":647,"author":{"gitId":"-"},"content":""},{"lineNumber":648,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":649,"author":{"gitId":"-"},"content":"    public void repoConfig_emptyLocationDifferentBranch_equal() throws Exception {"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        RepoConfiguration emptyLocationEmptyBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"), \"\");"},{"lineNumber":651,"author":{"gitId":"-"},"content":"        RepoConfiguration emptyLocationDefaultBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"));"},{"lineNumber":652,"author":{"gitId":"-"},"content":"        RepoConfiguration emptyLocationWithBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"), \"master\");"},{"lineNumber":653,"author":{"gitId":"-"},"content":""},{"lineNumber":654,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(emptyLocationDefaultBranchRepoConfig, emptyLocationEmptyBranchRepoConfig);"},{"lineNumber":655,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(emptyLocationWithBranchRepoConfig, emptyLocationEmptyBranchRepoConfig);"},{"lineNumber":656,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":657,"author":{"gitId":"-"},"content":""},{"lineNumber":658,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":659,"author":{"gitId":"-"},"content":"    public void repoConfig_sameLocationDifferentBranch_notEqual() throws Exception {"},{"lineNumber":660,"author":{"gitId":"-"},"content":"        RepoConfiguration validLocationValidBranchRepoConfig \u003d"},{"lineNumber":661,"author":{"gitId":"-"},"content":"                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":662,"author":{"gitId":"-"},"content":"        RepoConfiguration validLocationDefaultBranchRepoConfig \u003d"},{"lineNumber":663,"author":{"gitId":"-"},"content":"                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA));"},{"lineNumber":664,"author":{"gitId":"-"},"content":""},{"lineNumber":665,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertNotEquals(validLocationDefaultBranchRepoConfig, validLocationValidBranchRepoConfig);"},{"lineNumber":666,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":667,"author":{"gitId":"-"},"content":""},{"lineNumber":668,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":669,"author":{"gitId":"-"},"content":"    public void repoConfig_overrideStandaloneConfig_success() throws Exception {"},{"lineNumber":670,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\","},{"lineNumber":671,"author":{"gitId":"gok99"},"content":"                Collections.emptyList(), Collections.emptyList(), RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT,"},{"lineNumber":672,"author":{"gitId":"gok99"},"content":"                false, false, Collections.emptyList(), true, true, true, false, false, false, false);"},{"lineNumber":673,"author":{"gitId":"-"},"content":"        expectedConfig.setIsIgnoredAuthorsListOverriding(true);"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoredAuthorsList(Arrays.asList(\"lithiumlkid\"));"},{"lineNumber":675,"author":{"gitId":"-"},"content":""},{"lineNumber":676,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        Author[] authors \u003d new Author[]{FIRST_AUTHOR, SECOND_AUTHOR, THIRD_AUTHOR, FOURTH_AUTHOR};"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        for (Author author : authors) {"},{"lineNumber":679,"author":{"gitId":"-"},"content":"            Author expectedAuthor \u003d new Author(author);"},{"lineNumber":680,"author":{"gitId":"-"},"content":"            List\u003cString\u003e expectedAuthorIgnoreGlobList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":681,"author":{"gitId":"-"},"content":"            expectedAuthorIgnoreGlobList.addAll(author.getIgnoreGlobList());"},{"lineNumber":682,"author":{"gitId":"-"},"content":""},{"lineNumber":683,"author":{"gitId":"-"},"content":"            // Authors\u0027 original ignoreGlobList contains values from StandaloneConfig repo level, thus need to remove"},{"lineNumber":684,"author":{"gitId":"-"},"content":"            expectedAuthorIgnoreGlobList.removeAll(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":685,"author":{"gitId":"-"},"content":"            expectedAuthor.setIgnoreGlobList(expectedAuthorIgnoreGlobList);"},{"lineNumber":686,"author":{"gitId":"-"},"content":"            expectedAuthorList.add(expectedAuthor);"},{"lineNumber":687,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":688,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorList(expectedAuthorList);"},{"lineNumber":689,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorDisplayNameMap(repoDeltaStandaloneConfig.getAuthorDisplayNameMap());"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorDetailsToAuthorMap(repoDeltaStandaloneConfig.getAuthorDetailsToAuthorMap());"},{"lineNumber":691,"author":{"gitId":"-"},"content":""},{"lineNumber":692,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":693,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(OVERRIDE_STANDALONE_TEST_CONFIG_FILE)"},{"lineNumber":694,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":695,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":696,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":697,"author":{"gitId":"-"},"content":""},{"lineNumber":698,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":699,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":702,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":703,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":704,"author":{"gitId":"-"},"content":""},{"lineNumber":705,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":706,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":707,"author":{"gitId":"-"},"content":""},{"lineNumber":708,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":709,"author":{"gitId":"-"},"content":"    public void repoConfig_minimalStandaloneConfig_fieldsAssignedDefaultValues() throws Exception {"},{"lineNumber":710,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG),"},{"lineNumber":711,"author":{"gitId":"-"},"content":"                \"master\");"},{"lineNumber":712,"author":{"gitId":"-"},"content":""},{"lineNumber":713,"author":{"gitId":"-"},"content":"        Author firstAuthor \u003d new Author(\"bluein-green\");"},{"lineNumber":714,"author":{"gitId":"-"},"content":"        Author secondAuthor \u003d new Author(\"jylee-git\");"},{"lineNumber":715,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d Arrays.asList(firstAuthor, secondAuthor);"},{"lineNumber":716,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorList(expectedAuthors);"},{"lineNumber":717,"author":{"gitId":"-"},"content":""},{"lineNumber":718,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(Collections.emptyList());"},{"lineNumber":719,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(Collections.emptyList());"},{"lineNumber":720,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreCommitList(Collections.emptyList());"},{"lineNumber":721,"author":{"gitId":"-"},"content":""},{"lineNumber":722,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_MINIMAL_STANDALONE_CONFIG),"},{"lineNumber":723,"author":{"gitId":"-"},"content":"                \"master\");"},{"lineNumber":724,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":725,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":726,"author":{"gitId":"-"},"content":""},{"lineNumber":727,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":728,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":729,"author":{"gitId":"-"},"content":""},{"lineNumber":730,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":731,"author":{"gitId":"-"},"content":"    public void repoConfig_removeIgnoredAuthors_success() throws Exception {"},{"lineNumber":732,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":733,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(FIRST_AUTHOR);"},{"lineNumber":734,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":735,"author":{"gitId":"-"},"content":"        expectedAuthors.add(author);"},{"lineNumber":736,"author":{"gitId":"-"},"content":""},{"lineNumber":737,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"},{"lineNumber":738,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorList(expectedAuthors);"},{"lineNumber":739,"author":{"gitId":"-"},"content":"        expectedConfig.addAuthorDetailsToAuthorMapEntry(author, FIRST_AUTHOR_ALIASES);"},{"lineNumber":740,"author":{"gitId":"-"},"content":"        expectedConfig.setAuthorDisplayName(author, \"Ahm\");"},{"lineNumber":741,"author":{"gitId":"-"},"content":""},{"lineNumber":742,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":743,"author":{"gitId":"-"},"content":"        expectedConfig.setFormats(CONFIG_FORMATS);"},{"lineNumber":744,"author":{"gitId":"-"},"content":"        expectedConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":745,"author":{"gitId":"-"},"content":"        expectedConfig.setIgnoredAuthorsList(Arrays.asList(\"jordancjq\", \"Eugene Peh\"));"},{"lineNumber":746,"author":{"gitId":"-"},"content":""},{"lineNumber":747,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", CLI_FORMATS);"},{"lineNumber":748,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(IGNORE_AUTHORS_TEST_CONFIG_FILE)"},{"lineNumber":749,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":750,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":751,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":752,"author":{"gitId":"-"},"content":""},{"lineNumber":753,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":754,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":755,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":756,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":757,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":758,"author":{"gitId":"-"},"content":""},{"lineNumber":759,"author":{"gitId":"-"},"content":"        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"},{"lineNumber":760,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(actualConfig);"},{"lineNumber":761,"author":{"gitId":"-"},"content":"        ReportGenerator.updateRepoConfig(actualConfig);"},{"lineNumber":762,"author":{"gitId":"-"},"content":"        Method updateAuthorList \u003d ReportGenerator.class.getDeclaredMethod(\"updateAuthorList\", RepoConfiguration.class);"},{"lineNumber":763,"author":{"gitId":"-"},"content":"        updateAuthorList.setAccessible(true);"},{"lineNumber":764,"author":{"gitId":"-"},"content":"        updateAuthorList.invoke(null, actualConfig);"},{"lineNumber":765,"author":{"gitId":"-"},"content":""},{"lineNumber":766,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"},{"lineNumber":767,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":768,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":29,"yhtMinceraft1010X":17,"gok99":55,"-":667}},{"path":"src/test/java/reposense/model/RepoLocationTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static reposense.model.RepoLocation.UNSUPPORTED_DOMAIN_NAME;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static reposense.model.RepoLocation.getDomainNameFromDomain;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":"import static reposense.model.RepoLocation.isLocalRepo;"},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Assumptions;"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.parser.InvalidLocationException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.AssertUtil;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class RepoLocationTest {"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_VALID_WITHOUT_DOT_GIT_ONE \u003d \"repo\";"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_VALID_WITHOUT_DOT_GIT_TWO \u003d \"../path/to/repo\";"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_VALID_WITHOUT_DOT_GIT_THREE \u003d \"/path/to/repo\";"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_VALID_WITH_DOT_GIT_ONE \u003d \"path/to/repo/.git\";"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_VALID_WITH_DOT_GIT_TWO \u003d \"file://path/to/repo.git\";"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_FILE_URL_ONE \u003d \"file://path/to/repo\";"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_FILE_URL_TWO \u003d \"file:///path/to/repo\";"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_WITHOUT_DOT_GIT_ONE \u003d \"path\\\\to\\\\repo\\\\\";"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_WITHOUT_DOT_GIT_TWO \u003d \"..\\\\path\\\\to\\\\repo\";"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_WITH_DOT_GIT_ONE \u003d \"path\\\\to\\\\repo\\\\.git\";"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_WINDOWS_DISK_DRIVE \u003d \"C:\\\\path\\\\to\\\\repo.git\";"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_MIXED_ONE \u003d \"..\\\\path/to\\\\repo\";"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_WINDOWS_VALID_MIXED_TWO \u003d \"file://path\\\\to\\\\repo.git\";"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"    private static final String LOCAL_REPO_WINDOWS_DISK_DRIVE_MIXED \u003d \"C:\\\\path/to/repo.git\";"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    private static final String EXPECTED_REPO_NAME \u003d \"repo\";"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"    private static final String EXPECTED_ORGANIZATION \u003d \"path-to\";"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    private static final String EXPECTED_DOMAIN_NAME \u003d \"github\";"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"    private static final String EXPECTED_UNRECOGNISED_DOMAIN_NAME \u003d UNSUPPORTED_DOMAIN_NAME;"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"    public void repoLocation_parseEmptyString_success() throws Exception {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"        RepoLocation repoLocation \u003d new RepoLocation(\"\");"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"    public void isLocalRepo_validLocalRepos_success() throws Exception {"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertTrue(isLocalRepo(LOCAL_REPO_VALID_WITH_DOT_GIT_ONE));"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertTrue(isLocalRepo(LOCAL_REPO_WINDOWS_VALID_MIXED_ONE));"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertTrue(isLocalRepo(\"./abc:def\"));"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"    public void isLocalRepo_remoteRepos_returnsFalse() throws Exception {"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertFalse(isLocalRepo(\"https://github.com/reposense/RepoSense.git/\"));"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertFalse(isLocalRepo(\"git@github.com:reposense/RepoSense.git/\"));"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    public void repoLocation_parseLocalRepoLocation_success() throws Exception {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"        // local paths not containing \".git\" should be valid"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITHOUT_DOT_GIT_ONE,"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"\", EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        // relative pathing should be considered part of the \u0027organization\u0027 for differentiation"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITHOUT_DOT_GIT_TWO,"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"..-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITHOUT_DOT_GIT_THREE,"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"        // local paths containing \".git\" should also be valid"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITH_DOT_GIT_ONE,"},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_VALID_WITH_DOT_GIT_TWO,"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"        // file-type url protocol (file://) is accepted by git clone"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_FILE_URL_ONE,"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_FILE_URL_TWO,"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"    public void repoLocation_parseWindowsLocalRepoLocation_success() throws Exception {"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"        Assumptions.assumeTrue(SystemUtil.isWindows());"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"        // repeated tests but with windows file separators"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_WITHOUT_DOT_GIT_ONE,"},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_WITHOUT_DOT_GIT_TWO,"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"..-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":89,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_WITH_DOT_GIT_ONE,"},{"lineNumber":90,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":91,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_DISK_DRIVE,"},{"lineNumber":92,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"C--\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":93,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":94,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_MIXED_ONE,"},{"lineNumber":95,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"..-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":96,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_VALID_MIXED_TWO,"},{"lineNumber":97,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":98,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(LOCAL_REPO_WINDOWS_DISK_DRIVE_MIXED,"},{"lineNumber":99,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"C--\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":100,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":101,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":103,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"chan-j-d"},"content":"    public void repoLocation_parseValidRemoteRepoUrl_success() throws Exception {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // valid url without specifying branch"},{"lineNumber":106,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense/testrepo-Beta.git\","},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"                \"testrepo-Beta\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":108,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense/testrepo-Delta.git\","},{"lineNumber":109,"author":{"gitId":"chan-j-d"},"content":"                \"testrepo-Delta\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":110,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://gitlab.com/reposense/RepoSense.git\","},{"lineNumber":111,"author":{"gitId":"chan-j-d"},"content":"                \"RepoSense\", \"reposense\", \"gitlab\");"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense.git\","},{"lineNumber":113,"author":{"gitId":"chan-j-d"},"content":"                \"reposense\", \"\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":114,"author":{"gitId":"chan-j-d"},"content":"        // valid url to parse for obtaining repo and organization, just not a valid git clone target"},{"lineNumber":115,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense/.git\","},{"lineNumber":116,"author":{"gitId":"chan-j-d"},"content":"                \"reposense\", \"\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":117,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":118,"author":{"gitId":"chan-j-d"},"content":"        // valid url from other domains"},{"lineNumber":119,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://bitbucket.org/reposense/RepoSense.git\","},{"lineNumber":120,"author":{"gitId":"chan-j-d"},"content":"                \"RepoSense\", \"reposense\", \"bitbucket\");"},{"lineNumber":121,"author":{"gitId":"chan-j-d"},"content":"        // valid url from unsupported domain with longer path to git directory than the standard organization/reponame"},{"lineNumber":122,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://opensource.ncsa.illinois.edu/bitbucket/scm/u3d/3dutilities.git\","},{"lineNumber":123,"author":{"gitId":"chan-j-d"},"content":"                \"3dutilities\", \"bitbucket-scm-u3d\", EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":124,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":125,"author":{"gitId":"chan-j-d"},"content":"        // treated as valid but will be caught when git clone fails"},{"lineNumber":126,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense/testrepo-Beta/tree/add-config-json\","},{"lineNumber":127,"author":{"gitId":"chan-j-d"},"content":"                \"add-config-json\", \"reposense-testrepo-Beta-tree\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":128,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense/testrepo-Beta.git/tree/add-config-json\","},{"lineNumber":129,"author":{"gitId":"chan-j-d"},"content":"                \"add-config-json\", \"reposense-testrepo-Beta.git-tree\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":130,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":131,"author":{"gitId":"chan-j-d"},"content":"        // URLs without \".git\" should be accepted as git clone works even without it"},{"lineNumber":132,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense\","},{"lineNumber":133,"author":{"gitId":"chan-j-d"},"content":"                \"reposense\", \"\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":134,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense/RepoSense\","},{"lineNumber":135,"author":{"gitId":"chan-j-d"},"content":"                \"RepoSense\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":136,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":137,"author":{"gitId":"chan-j-d"},"content":"        // Test against other types of URL protocols that are valid for git clone"},{"lineNumber":138,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"ssh://git@github.com/path/to/repo.git/\","},{"lineNumber":139,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_DOMAIN_NAME);"},{"lineNumber":140,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"git://github.com/path/to/repo.git\","},{"lineNumber":141,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_DOMAIN_NAME);"},{"lineNumber":142,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://host.xz:9000/path/to/repo.git\","},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":144,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":145,"author":{"gitId":"chan-j-d"},"content":"        // Test against the conventional ssh protocol used for GitHub, e.g. git@github.com:reposense/RepoSense.git"},{"lineNumber":146,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"repo@organization.com:path/to/repo.git/\","},{"lineNumber":147,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":148,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"git@github.com:reposense/RepoSense.git\","},{"lineNumber":149,"author":{"gitId":"chan-j-d"},"content":"                \"RepoSense\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"chan-j-d"},"content":"    public void repoLocation_parseNormalizableRepoLocations_success() throws Exception {"},{"lineNumber":154,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"https://github.com/reposense/redundant/directories/../../RepoSense.git\","},{"lineNumber":155,"author":{"gitId":"chan-j-d"},"content":"                \"RepoSense\", \"reposense\", EXPECTED_DOMAIN_NAME);"},{"lineNumber":156,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"/path/with/redundant/directories/../.././../to/repo\","},{"lineNumber":157,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"-\" + EXPECTED_ORGANIZATION, EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":158,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":159,"author":{"gitId":"chan-j-d"},"content":"        // Tests if there is an additional \u0027../\u0027 it is not consumed by accident"},{"lineNumber":160,"author":{"gitId":"chan-j-d"},"content":"        assertParsableLocation(\"path/with/redundant/directories/../../../../../to/repo\","},{"lineNumber":161,"author":{"gitId":"chan-j-d"},"content":"                EXPECTED_REPO_NAME, \"..-to\", EXPECTED_UNRECOGNISED_DOMAIN_NAME);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"chan-j-d"},"content":"    public void repoLocation_parseInvalidRemoteRepo_throwsInvalidLocationException() throws Exception {"},{"lineNumber":166,"author":{"gitId":"chan-j-d"},"content":"        // Invalid URL protocol"},{"lineNumber":167,"author":{"gitId":"chan-j-d"},"content":"        assertUnparsableLocation(\"ttp://github.com/reposense.RepoSense.git\");"},{"lineNumber":168,"author":{"gitId":"chan-j-d"},"content":"        assertUnparsableLocation(\"not-valid-protocol://abc.com/reposense/RepoSense.git\");"},{"lineNumber":169,"author":{"gitId":"chan-j-d"},"content":"        // URL contains illegal characters"},{"lineNumber":170,"author":{"gitId":"chan-j-d"},"content":"        assertUnparsableLocation(\"https://github.com/contains-illegal-chars/^\\\\/\");"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitId":"chan-j-d"},"content":"    public void getDomainNameFromMatcher_parseValidDomain_success() throws Exception {"},{"lineNumber":175,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(\"github\", getDomainNameFromDomain(\"www.github.com\"));"},{"lineNumber":176,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(\"github\", getDomainNameFromDomain(\"github.com\"));"},{"lineNumber":177,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(\"gitlab\", getDomainNameFromDomain(\"www.gitlab.org\"));"},{"lineNumber":178,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(\"bitbucket\", getDomainNameFromDomain(\"ww2.bitbucket.com\"));"},{"lineNumber":179,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":180,"author":{"gitId":"chan-j-d"},"content":"        // valid but unsupported"},{"lineNumber":181,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(UNSUPPORTED_DOMAIN_NAME, getDomainNameFromDomain(\"opensource.ncsa.illinois.edu\"));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"chan-j-d"},"content":"    public void getDomainNameFromMatcher_parseInvalidDomain_throwsInvalidLocationException() throws Exception {"},{"lineNumber":186,"author":{"gitId":"chan-j-d"},"content":"        // no top level domain specified"},{"lineNumber":187,"author":{"gitId":"chan-j-d"},"content":"        AssertUtil.assertThrows(InvalidLocationException.class, () -\u003e getDomainNameFromDomain(\"www.github\"));"},{"lineNumber":188,"author":{"gitId":"chan-j-d"},"content":"        AssertUtil.assertThrows(InvalidLocationException.class, () -\u003e getDomainNameFromDomain(\"github\"));"},{"lineNumber":189,"author":{"gitId":"chan-j-d"},"content":"        // has a dot but still no top level domain specified"},{"lineNumber":190,"author":{"gitId":"chan-j-d"},"content":"        AssertUtil.assertThrows(InvalidLocationException.class, () -\u003e getDomainNameFromDomain(\"github.\"));"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Compares the information of {@code rawLocation} parsed by the RepoLocation model with {@code expectedRepoName}"},{"lineNumber":195,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * and {@code expectedOrganization}."},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"chan-j-d"},"content":"    public void assertParsableLocation(String rawLocation, String expectedRepoName,"},{"lineNumber":198,"author":{"gitId":"chan-j-d"},"content":"            String expectedOrganization, String expectedDomainName) throws Exception {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        RepoLocation repoLocation \u003d new RepoLocation(rawLocation);"},{"lineNumber":200,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedRepoName, repoLocation.getRepoName());"},{"lineNumber":201,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedOrganization, repoLocation.getOrganization());"},{"lineNumber":202,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedDomainName, repoLocation.getDomainName());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"chan-j-d"},"content":"    private void assertUnparsableLocation(String rawLocation) {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        AssertUtil.assertThrows(InvalidLocationException.class, () -\u003e new RepoLocation(rawLocation));"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":173,"yhtMinceraft1010X":4,"-":31}},{"path":"src/test/java/reposense/model/StandaloneConfigTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.parser.StandaloneConfigJsonParser;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StandaloneConfigTest extends GitTestTemplate {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path VALID_CONFIG \u003d loadResource(StandaloneConfigTest.class,"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            \"StandaloneConfigTest/valid_config.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path INVALID_IGNOREGLOB_CONFIG \u003d loadResource(StandaloneConfigTest.class,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \"StandaloneConfigTest/lithiumlkid_invalidIgnoreGlob_config.json\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path INVALID_FORMATS_CONFIG \u003d loadResource(StandaloneConfigTest.class,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \"StandaloneConfigTest/invalidFormats_config.json\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Path INVALID_IGNORECOMMIT_CONFIG \u003d loadResource(StandaloneConfigTest.class,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \"StandaloneConfigTest/invalidIgnoreCommit_config.json\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path SPECIAL_CHARACTER_AUTHOR_CONFIG \u003d loadResource(StandaloneConfigTest.class,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"StandaloneConfigTest/specialCharacterAuthor_config.json\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path AUTHORS_TRAILING_COMMAS_CONFIG \u003d loadResource(StandaloneConfigTest.class,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \"StandaloneConfigTest/authors_trailingCommas_config.json\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path LITHIUMLKID_TRAILING_COMMAS_CONFIG \u003d loadResource(StandaloneConfigTest.class,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \"StandaloneConfigTest/lithiumlkid_trailingCommas_config.json\");"},{"lineNumber":34,"author":{"gitId":"gok99"},"content":"    private static final Path FILE_SIZE_LIMIT_CONFIG \u003d loadResource(StandaloneConfigTest.class,"},{"lineNumber":35,"author":{"gitId":"gok99"},"content":"            \"StandaloneConfigTest/fileSizeLimit_config.json\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final Author FIRST_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"‘Processed�‘Cooked�\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Author SECOND_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"(codeeong)\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Author THIRD_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"^:jordancjq;$\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS \u003d Arrays.asList("},{"lineNumber":41,"author":{"gitId":"-"},"content":"            FIRST_SPECIAL_CHARACTER_AUTHOR, SECOND_SPECIAL_CHARACTER_AUTHOR, THIRD_SPECIAL_CHARACTER_AUTHOR);"},{"lineNumber":42,"author":{"gitId":"gok99"},"content":"    private static final long FILE_SIZE_LIMIT \u003d 100000;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static StandaloneConfig validStandaloneConfig;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeAll"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void setUp() throws Exception {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        validStandaloneConfig \u003d new StandaloneConfigJsonParser().parse(VALID_CONFIG);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void standaloneConfig_validJson_success() throws Exception {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(VALID_CONFIG);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        config.update(standaloneConfig);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void standaloneConfig_specialCharacterAuthor_success() throws Exception {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(SPECIAL_CHARACTER_AUTHOR_CONFIG);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        config.update(standaloneConfig);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void standaloneConfig_trailingCommasInList_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(AUTHORS_TRAILING_COMMAS_CONFIG);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        config.update(standaloneConfig);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(validStandaloneConfig, standaloneConfig);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"gok99"},"content":"    public void standaloneConfig_fileSizeLimit_success() throws Exception {"},{"lineNumber":75,"author":{"gitId":"gok99"},"content":"        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(FILE_SIZE_LIMIT_CONFIG);"},{"lineNumber":76,"author":{"gitId":"gok99"},"content":"        config.update(standaloneConfig);"},{"lineNumber":77,"author":{"gitId":"gok99"},"content":""},{"lineNumber":78,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(FILE_SIZE_LIMIT, config.getFileSizeLimit());"},{"lineNumber":79,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"gok99"},"content":""},{"lineNumber":81,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void standaloneConfig_trailingCommasInMaps_throwsJsonSyntaxException() {"},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(JsonSyntaxException.class, () -\u003e new StandaloneConfigJsonParser()"},{"lineNumber":84,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .parse(LITHIUMLKID_TRAILING_COMMAS_CONFIG));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void standaloneConfig_invalidIgnoreGlob_throwIllegalArgumentException() throws Exception {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_IGNOREGLOB_CONFIG);"},{"lineNumber":90,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e config.update(standaloneConfig));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void standaloneConfig_invalidFormats_throwIllegalArgumentException() throws Exception {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_FORMATS_CONFIG);"},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e config.update(standaloneConfig));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void standaloneConfig_invalidIgnoreCommit_throwIllegalArgumentException() throws Exception {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_IGNORECOMMIT_CONFIG);"},{"lineNumber":102,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(IllegalArgumentException.class, () -\u003e config.update(standaloneConfig));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":16,"gok99":11,"-":77}},{"path":"src/test/java/reposense/model/SupportedDomainUrlMapTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"public class SupportedDomainUrlMapTest {"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":"    private static final String SUPPORTED_DOMAIN_GITHUB \u003d \"github\";"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"    private static final String SUPPORTED_DOMAIN_GITLAB \u003d \"gitlab\";"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"    private static final String SUPPORTED_DOMAIN_BITBUCKET \u003d \"bitbucket\";"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"    private static final String UNSUPPORTED_DOMAIN_1 \u003d \"opensource.ncsa.illinois.edu\";"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"    private static final String UNSUPPORTED_DOMAIN_2 \u003d \"example.org\";"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":"    public void getDomainsAccessed_noRemote_onlyUnsupportedEntry() {"},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":"        SupportedDomainUrlMap supportedDomainUrlMap \u003d new SupportedDomainUrlMap();"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"        Map\u003cString, Map\u003cString, String\u003e\u003e expectedMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"        expectedMap.put(RepoLocation.UNSUPPORTED_DOMAIN_NAME, SupportedDomainUrlMap.NOT_SUPPORTED_MAP);"},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedMap, supportedDomainUrlMap.getRequiredDomainUrlMap());"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"    public void getDomainsAccessed_remoteRepositories_onlyRelevantDomainsAdded() {"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"        SupportedDomainUrlMap supportedDomainUrlMap \u003d new SupportedDomainUrlMap();"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"        Map\u003cString, Map\u003cString, String\u003e\u003e expectedMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"        expectedMap.put(RepoLocation.UNSUPPORTED_DOMAIN_NAME, SupportedDomainUrlMap.NOT_SUPPORTED_MAP);"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"        supportedDomainUrlMap.isSupportedDomain(UNSUPPORTED_DOMAIN_1);"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"        // no change expected"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedMap, supportedDomainUrlMap.getRequiredDomainUrlMap());"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"        supportedDomainUrlMap.isSupportedDomain(SUPPORTED_DOMAIN_GITHUB);"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        expectedMap.put(SUPPORTED_DOMAIN_GITHUB, SupportedDomainUrlMap.GITHUB_MAP);"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"        // github mapping now added"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedMap, supportedDomainUrlMap.getRequiredDomainUrlMap());"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        supportedDomainUrlMap.isSupportedDomain(SUPPORTED_DOMAIN_GITLAB);"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"        expectedMap.put(SUPPORTED_DOMAIN_GITLAB, SupportedDomainUrlMap.GITLAB_MAP);"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"        // gitlab mapping now added"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedMap, supportedDomainUrlMap.getRequiredDomainUrlMap());"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        supportedDomainUrlMap.isSupportedDomain(UNSUPPORTED_DOMAIN_2);"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"        // no change expected"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedMap, supportedDomainUrlMap.getRequiredDomainUrlMap());"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"        supportedDomainUrlMap.isSupportedDomain(SUPPORTED_DOMAIN_BITBUCKET);"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        expectedMap.put(SUPPORTED_DOMAIN_BITBUCKET, SupportedDomainUrlMap.BITBUCKET_MAP);"},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"        // bitbucket mapping now added"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(expectedMap, supportedDomainUrlMap.getRequiredDomainUrlMap());"},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":56}},{"path":"src/test/java/reposense/parser/ArgsParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":18,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.LocationsCliArguments;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.model.ViewCliArguments;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class ArgsParserTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path PROJECT_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + File.separator + \"config\" + File.separator);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_FOLDER_ABSOLUTE \u003d loadResource(ArgsParserTest.class, \"cli_location_test\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Path OUTPUT_DIRECTORY_ABSOLUTE \u003d loadResource(ArgsParserTest.class, \"output\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_FOLDER_RELATIVE \u003d PROJECT_DIRECTORY.relativize(CONFIG_FOLDER_ABSOLUTE);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path OUTPUT_DIRECTORY_RELATIVE \u003d PROJECT_DIRECTORY.relativize(OUTPUT_DIRECTORY_ABSOLUTE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_CSV_FILE \u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            CONFIG_FOLDER_ABSOLUTE.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_CSV_FILE \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            CONFIG_FOLDER_ABSOLUTE.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String NONEXISTENT_DIRECTORY \u003d \"some_non_existent_dir/\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final InputBuilder DEFAULT_INPUT_BUILDER \u003d new InputBuilder();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_REPOSENSE \u003d \"https://github.com/reposense/RepoSense.git\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"    private static final String DEFAULT_TIME_ZONE_STRING \u003d \"Asia/Singapore\";"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"    private static final ZoneId DEFAULT_TIME_ZONE_ID \u003d TestUtil.getZoneId(DEFAULT_TIME_ZONE_STRING);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeEach"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void before() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        DEFAULT_INPUT_BUILDER.reset().addConfig(CONFIG_FOLDER_ABSOLUTE);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @AfterEach"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            FileUtil.deleteDirectory(PROJECT_DIRECTORY.resolve(NONEXISTENT_DIRECTORY).toString());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_d1CorrectTimeZone_success() throws Exception {"},{"lineNumber":77,"author":{"gitId":"yhtMinceraft1010X"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .addSinceDate(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND)"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":80,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":81,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .build();"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":84,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":85,"author":{"gitId":"yhtMinceraft1010X"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":86,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":87,"author":{"gitId":"yhtMinceraft1010X"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":88,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":89,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedSinceDate \u003d TimeUtil.getArbitraryFirstCommitDateConverted(DEFAULT_TIME_ZONE_ID);"},{"lineNumber":90,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":92,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(DEFAULT_TIME_ZONE_ID, cliArguments.getZoneId());"},{"lineNumber":95,"author":{"gitId":"yhtMinceraft1010X"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parse_allCorrectInputs_success() throws Exception {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .addFormats(\"java adoc html css js\")"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":105,"author":{"gitId":"gok99"},"content":"                .addIgnoreFilesizeLimit()"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":107,"author":{"gitId":"chan-j-d"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":110,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":111,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":112,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":114,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":115,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":116,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":119,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":120,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":121,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":124,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":125,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":128,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(DEFAULT_TIME_ZONE_ID, cliArguments.getZoneId());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_help_throwsHelpScreenException() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String input \u003d \"--help\";"},{"lineNumber":136,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(HelpScreenException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void parse_allCorrectInputsAlias_success() throws Exception {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        String input \u003d String.format("},{"lineNumber":142,"author":{"gitId":"gok99"},"content":"                \"-c \\\"%s\\\" -o \\\"%s\\\" -s 01/07/2017 -u 30/11/2017 -f java adoc html css js -i -I -v -t %s\","},{"lineNumber":143,"author":{"gitId":"chan-j-d"},"content":"                CONFIG_FOLDER_ABSOLUTE, OUTPUT_DIRECTORY_ABSOLUTE, DEFAULT_TIME_ZONE_STRING);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":145,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":146,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":147,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":148,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":149,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":151,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":154,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":155,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":156,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":159,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":160,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":163,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(DEFAULT_TIME_ZONE_ID, cliArguments.getZoneId());"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_withExtraWhitespaces_success() throws Exception {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).addWhiteSpace(5)"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE).addWhiteSpace(4)"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\").addWhiteSpace(3)"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\").addWhiteSpace(6)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                .addFormats(\"java   adoc  html      css js   \")"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig().addWhiteSpace(1)"},{"lineNumber":176,"author":{"gitId":"gok99"},"content":"                .addIgnoreFilesizeLimit().addWhiteSpace(2)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .addView().addWhiteSpace(4)"},{"lineNumber":178,"author":{"gitId":"chan-j-d"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING).addWhiteSpace(5)"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":181,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":182,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":183,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":184,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":185,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":186,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":187,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":190,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":191,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":192,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes(Arrays.asList("},{"lineNumber":195,"author":{"gitId":"-"},"content":"                \"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":196,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":199,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(cliArguments.isFileSizeLimitIgnored());"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(DEFAULT_TIME_ZONE_ID, cliArguments.getZoneId());"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public void parse_configFolderOnly_success() throws Exception {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).build();"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":208,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":209,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":210,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":211,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":212,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        // Optional arguments have default values"},{"lineNumber":214,"author":{"gitId":"yhtMinceraft1010X"},"content":"        assertDateDiffOneMonth(cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":215,"author":{"gitId":"yhtMinceraft1010X"},"content":"        assertDateDiffEndOfDay(cliArguments.getUntilDate());"},{"lineNumber":216,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(ArgsParser.DEFAULT_REPORT_NAME,"},{"lineNumber":217,"author":{"gitId":"yhtMinceraft1010X"},"content":"                cliArguments.getOutputFilePath().getFileName().toString());"},{"lineNumber":218,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, cliArguments.getFormats());"},{"lineNumber":219,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE).build();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":223,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":224,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":225,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":226,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":227,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        // Optional arguments have default values"},{"lineNumber":229,"author":{"gitId":"yhtMinceraft1010X"},"content":"        assertDateDiffOneMonth(cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":230,"author":{"gitId":"yhtMinceraft1010X"},"content":"        assertDateDiffEndOfDay(cliArguments.getUntilDate());"},{"lineNumber":231,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(ArgsParser.DEFAULT_REPORT_NAME,"},{"lineNumber":232,"author":{"gitId":"yhtMinceraft1010X"},"content":"                cliArguments.getOutputFilePath().getFileName().toString());"},{"lineNumber":233,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, cliArguments.getFormats());"},{"lineNumber":234,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":235,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(ZoneId.systemDefault(), cliArguments.getZoneId());"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    public void parse_viewOnly_success() throws Exception {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addView(OUTPUT_DIRECTORY_ABSOLUTE).build();"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":242,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ViewCliArguments);"},{"lineNumber":243,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":244,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE, ((ViewCliArguments) cliArguments).getReportDirectoryPath()));"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public void parse_withIgnore_success() throws Exception {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"        String inputWithAlias \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                .add(\"-i\")"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        CliArguments cliArgumentsWithAlias \u003d ArgsParser.parse(translateCommandline(inputWithAlias));"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":260,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArgumentsWithAlias instanceof LocationsCliArguments);"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(((LocationsCliArguments) cliArguments).isStandaloneConfigIgnored());"},{"lineNumber":263,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(((LocationsCliArguments) cliArgumentsWithAlias).isStandaloneConfigIgnored());"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(cliArguments, cliArgumentsWithAlias);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    public void parse_withoutIgnore_success() throws Exception {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":274,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(((LocationsCliArguments) cliArguments).isStandaloneConfigIgnored());"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    public void parse_viewOnlyWithoutArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addView().build();"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":283,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(CONFIG_DIRECTORY.toString(), ("},{"lineNumber":284,"author":{"gitId":"-"},"content":"                (ConfigCliArguments) cliArguments).getConfigFolderPath().toString());"},{"lineNumber":285,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndOutputDirectory_success() throws Exception {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        Path expectedRelativeOutputDirectoryPath \u003d OUTPUT_DIRECTORY_RELATIVE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        Path expectedAbsoluteOutputDirectoryPath \u003d OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":294,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_RELATIVE)"},{"lineNumber":295,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":297,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":298,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":299,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":300,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":301,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":302,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile(expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE)"},{"lineNumber":305,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":308,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":309,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":310,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":311,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":312,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":313,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile(expectedAbsoluteOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndViewWithouthArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":319,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":320,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":324,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":325,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":326,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":327,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":328,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE)"},{"lineNumber":331,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":332,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":336,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":337,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":338,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":339,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":340,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndViewWithArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                .addView(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":351,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":352,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":353,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":354,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":355,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    public void sinceDate_correctFormat_success() throws Exception {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":361,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":362,"author":{"gitId":"chan-j-d"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":363,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":365,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":366,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":367,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    public void untilDate_correctFormat_success() throws Exception {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":373,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":374,"author":{"gitId":"chan-j-d"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":375,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":377,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":378,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":379,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    public void sinceDate_withExtraDate_success() throws Exception {"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":385,"author":{"gitId":"-"},"content":"                .addSinceDate(\"\\\"01/07/2017 01/07/2018\\\"\")"},{"lineNumber":386,"author":{"gitId":"chan-j-d"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":387,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":389,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":390,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JULY.getValue(), 1);"},{"lineNumber":391,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":392,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":395,"author":{"gitId":"-"},"content":"    public void untilDate_withExtraTime_success() throws Exception {"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":397,"author":{"gitId":"-"},"content":"                .addUntilDate(\"\\\"30/11/2017 10:10:10\\\"\")"},{"lineNumber":398,"author":{"gitId":"chan-j-d"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":399,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":401,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":402,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.NOVEMBER.getValue(), 30);"},{"lineNumber":403,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":407,"author":{"gitId":"-"},"content":"    public void period_inDaysWithSinceDate_success() throws Exception {"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":409,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":410,"author":{"gitId":"-"},"content":"                .addPeriod(\"2d\")"},{"lineNumber":411,"author":{"gitId":"chan-j-d"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":412,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":414,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":415,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedUntilDate \u003d TestUtil.getUntilDate(2017, Month.JULY.getValue(), 3);"},{"lineNumber":416,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":417,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":420,"author":{"gitId":"-"},"content":"    public void period_inWeeksWithUntilDate_success() throws Exception {"},{"lineNumber":421,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":422,"author":{"gitId":"-"},"content":"                .addUntilDate(\"14/07/2017\")"},{"lineNumber":423,"author":{"gitId":"chan-j-d"},"content":"                .addTimezone(DEFAULT_TIME_ZONE_STRING)"},{"lineNumber":424,"author":{"gitId":"-"},"content":"                .addPeriod(\"2w\")"},{"lineNumber":425,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":426,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":427,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":428,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedSinceDate \u003d TestUtil.getSinceDate(2017, Month.JUNE.getValue(), 30);"},{"lineNumber":429,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":430,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    public void formats_inAlphanumeric_success() throws Exception {"},{"lineNumber":434,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addFormats(\"java js css 7z\").build();"},{"lineNumber":435,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":436,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":438,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"js\", \"css\", \"7z\"));"},{"lineNumber":439,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":443,"author":{"gitId":"-"},"content":"    public void numCloningThreads_default_success() throws Exception {"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.build();"},{"lineNumber":445,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":446,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":447,"author":{"gitId":"-"},"content":"        int expectedNumThreads \u003d ArgsParser.DEFAULT_NUM_CLONING_THREADS;"},{"lineNumber":448,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedNumThreads, cliArguments.getNumCloningThreads());"},{"lineNumber":449,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":452,"author":{"gitId":"-"},"content":"    public void numCloningThreads_isNumeric_success() throws Exception {"},{"lineNumber":453,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":454,"author":{"gitId":"-"},"content":"                .addNumCloningThreads(2)"},{"lineNumber":455,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        System.out.println(input);"},{"lineNumber":457,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":458,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":459,"author":{"gitId":"-"},"content":"        int expectedNumThreads \u003d 2;"},{"lineNumber":460,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedNumThreads, cliArguments.getNumCloningThreads());"},{"lineNumber":461,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":464,"author":{"gitId":"-"},"content":"    public void numAnalysisThreads_default_success() throws Exception {"},{"lineNumber":465,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.build();"},{"lineNumber":466,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":467,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":468,"author":{"gitId":"-"},"content":"        int expectedNumThreads \u003d ArgsParser.DEFAULT_NUM_ANALYSIS_THREADS;"},{"lineNumber":469,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedNumThreads, cliArguments.getNumAnalysisThreads());"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":473,"author":{"gitId":"-"},"content":"    public void numAnalysisThreads_isNumeric_success() throws Exception {"},{"lineNumber":474,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":475,"author":{"gitId":"-"},"content":"                .addNumAnalysisThreads(2)"},{"lineNumber":476,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":478,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        int expectedNumThreads \u003d 2;"},{"lineNumber":480,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedNumThreads, cliArguments.getNumAnalysisThreads());"},{"lineNumber":481,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":484,"author":{"gitId":"-"},"content":"    public void parse_validGitRepoLocations_repoConfigurationListCorrectSize() throws Exception {"},{"lineNumber":485,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":486,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":487,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":489,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, repoConfigs.size());"},{"lineNumber":490,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsAndView_returnsLocationCliArguments() throws Exception {"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":495,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":496,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":497,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":498,"author":{"gitId":"-"},"content":""},{"lineNumber":499,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":500,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":501,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":502,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"},{"lineNumber":503,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":504,"author":{"gitId":"-"},"content":""},{"lineNumber":505,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":506,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsOnly_success() throws Exception {"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":509,"author":{"gitId":"-"},"content":""},{"lineNumber":510,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":511,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":512,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":513,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"},{"lineNumber":514,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":515,"author":{"gitId":"-"},"content":""},{"lineNumber":516,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":517,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsAndViewWithArgs_returnsLocationsCliArguments() throws Exception {"},{"lineNumber":518,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":519,"author":{"gitId":"-"},"content":"                .addView(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":520,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":521,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":522,"author":{"gitId":"-"},"content":""},{"lineNumber":523,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":524,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":525,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":526,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":528,"author":{"gitId":"-"},"content":""},{"lineNumber":529,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":530,"author":{"gitId":"-"},"content":"    public void parse_viewWithArgCwd_returnsViewCliArguments() throws Exception {"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addView(new File(\".\").toPath()).build();"},{"lineNumber":532,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ViewCliArguments);"},{"lineNumber":535,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":536,"author":{"gitId":"-"},"content":""},{"lineNumber":537,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":538,"author":{"gitId":"-"},"content":"    public void parse_configOrLocationsSimilar_success() throws Exception {"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).build();"},{"lineNumber":540,"author":{"gitId":"-"},"content":"        CliArguments configCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":541,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(configCliArguments instanceof ConfigCliArguments);"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualRepoConfigs \u003d"},{"lineNumber":543,"author":{"gitId":"-"},"content":"                RepoSense.getRepoConfigurations((ConfigCliArguments) configCliArguments);"},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addRepos(TEST_REPO_BETA, TEST_REPO_CHARLIE, TEST_REPO_DELTA).build();"},{"lineNumber":546,"author":{"gitId":"-"},"content":"        CliArguments locationCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":547,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(locationCliArguments instanceof LocationsCliArguments);"},{"lineNumber":548,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e expectedRepoConfigs \u003d"},{"lineNumber":549,"author":{"gitId":"-"},"content":"                RepoSense.getRepoConfigurations((LocationsCliArguments) locationCliArguments);"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(actualRepoConfigs, expectedRepoConfigs);"},{"lineNumber":552,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":553,"author":{"gitId":"-"},"content":""},{"lineNumber":554,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":555,"author":{"gitId":"-"},"content":"    public void emptyArgs_defaultConfigFolderPath() throws Exception {"},{"lineNumber":556,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(new String[]{});"},{"lineNumber":557,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":558,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(CONFIG_DIRECTORY.toString(), ("},{"lineNumber":559,"author":{"gitId":"-"},"content":"                (ConfigCliArguments) cliArguments).getConfigFolderPath().toString());"},{"lineNumber":560,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":563,"author":{"gitId":"-"},"content":"    public void parse_repoAliases_sameResult() throws Exception {"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_BETA).build();"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        CliArguments repoAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":566,"author":{"gitId":"-"},"content":""},{"lineNumber":567,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().add(String.format(\"--repos %s\", TEST_REPO_BETA)).build();"},{"lineNumber":568,"author":{"gitId":"-"},"content":"        CliArguments reposAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":569,"author":{"gitId":"-"},"content":""},{"lineNumber":570,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(repoAliasCliArguments, reposAliasCliArguments);"},{"lineNumber":571,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":572,"author":{"gitId":"-"},"content":""},{"lineNumber":573,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":574,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void absoluteConfigFolder_withoutRequiredConfigFiles_throwsParseException() {"},{"lineNumber":575,"author":{"gitId":"-"},"content":"        Path absDirectory \u003d PROJECT_DIRECTORY.getParent().toAbsolutePath();"},{"lineNumber":576,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(absDirectory).build();"},{"lineNumber":577,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":578,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":579,"author":{"gitId":"-"},"content":""},{"lineNumber":580,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":581,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void relativeConfigFolder_withoutRequiredConfigFiles_throwsParseException() {"},{"lineNumber":582,"author":{"gitId":"-"},"content":"        Path relDirectory \u003d PROJECT_DIRECTORY.getParent();"},{"lineNumber":583,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(relDirectory).build();"},{"lineNumber":584,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":585,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":586,"author":{"gitId":"-"},"content":""},{"lineNumber":587,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":588,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_notExistsConfigFolder_throwsParseException() {"},{"lineNumber":589,"author":{"gitId":"-"},"content":"        Path absConfigFolder \u003d PROJECT_DIRECTORY.resolve(\"non_existing_random_folder\");"},{"lineNumber":590,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(absConfigFolder).build();"},{"lineNumber":591,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":592,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":593,"author":{"gitId":"-"},"content":""},{"lineNumber":594,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":595,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_configCsvFileAsConfigFolder_throwsParseException() {"},{"lineNumber":596,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(REPO_CONFIG_CSV_FILE).build();"},{"lineNumber":597,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":598,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":599,"author":{"gitId":"-"},"content":""},{"lineNumber":600,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":601,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_missingConfigValue_throwsParseException() {"},{"lineNumber":602,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(new File(\"\").toPath()).build();"},{"lineNumber":603,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":604,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":605,"author":{"gitId":"-"},"content":""},{"lineNumber":606,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":607,"author":{"gitId":"-"},"content":"    public void outputPath_nonExistentDirectory_success() throws Exception {"},{"lineNumber":608,"author":{"gitId":"-"},"content":"        Path nonExistentDirectory \u003d PROJECT_DIRECTORY.resolve(NONEXISTENT_DIRECTORY);"},{"lineNumber":609,"author":{"gitId":"-"},"content":"        Path expectedRelativeOutputDirectoryPath \u003d nonExistentDirectory.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":610,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addOutput(nonExistentDirectory).build();"},{"lineNumber":611,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":612,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":613,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.isSameFile("},{"lineNumber":614,"author":{"gitId":"-"},"content":"                expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":615,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":616,"author":{"gitId":"-"},"content":""},{"lineNumber":617,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":618,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void sinceDate_unsupportedFormats_throwsParseException() {"},{"lineNumber":619,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01 July 17\").build();"},{"lineNumber":620,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":621,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":622,"author":{"gitId":"-"},"content":""},{"lineNumber":623,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":624,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void untilDate_unsupportedFormats_throwsParseException() {"},{"lineNumber":625,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addUntilDate(\"11/31/2017\").build();"},{"lineNumber":626,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":627,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":628,"author":{"gitId":"-"},"content":""},{"lineNumber":629,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":630,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void sinceDate_laterThanUntilDate_throwsParseException() {"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01/12/2017\")"},{"lineNumber":632,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":633,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":634,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":635,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":638,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void period_withBothSinceDateAndUntilDate_throwsParseException() {"},{"lineNumber":639,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"18d\")"},{"lineNumber":640,"author":{"gitId":"-"},"content":"                .addSinceDate(\"30/11/2017\")"},{"lineNumber":641,"author":{"gitId":"-"},"content":"                .addUntilDate(\"01/12/2017\")"},{"lineNumber":642,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":643,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":644,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":645,"author":{"gitId":"-"},"content":""},{"lineNumber":646,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":647,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void period_notNumeric_throwsParseExcpetion() {"},{"lineNumber":648,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"abcd\").build();"},{"lineNumber":649,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":650,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":651,"author":{"gitId":"-"},"content":""},{"lineNumber":652,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":653,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void period_isZero_throwsParseExcpetion() {"},{"lineNumber":654,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"0w\").build();"},{"lineNumber":655,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":656,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":657,"author":{"gitId":"-"},"content":""},{"lineNumber":658,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":659,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void formats_notInAlphanumeric_throwsParseException() {"},{"lineNumber":660,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addFormats(\".java\").build();"},{"lineNumber":661,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":662,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":663,"author":{"gitId":"-"},"content":""},{"lineNumber":664,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":665,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_mutuallyExclusiveArgumentsConfigAndReposTogether_throwsParseException() {"},{"lineNumber":666,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":667,"author":{"gitId":"-"},"content":"                .addRepos(TEST_REPO_REPOSENSE)"},{"lineNumber":668,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":669,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":670,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":671,"author":{"gitId":"-"},"content":""},{"lineNumber":672,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":673,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_extraArgumentForIgnore_throwsParseException() {"},{"lineNumber":674,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addIgnoreStandaloneConfig().add(\"true\").build();"},{"lineNumber":675,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":676,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":677,"author":{"gitId":"-"},"content":""},{"lineNumber":678,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":679,"author":{"gitId":"-"},"content":"    public void parse_withTimezone_success() throws Exception {"},{"lineNumber":680,"author":{"gitId":"-"},"content":"        String zoneId \u003d \"UTC+11\";"},{"lineNumber":681,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":682,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":683,"author":{"gitId":"-"},"content":""},{"lineNumber":684,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":685,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":686,"author":{"gitId":"-"},"content":""},{"lineNumber":687,"author":{"gitId":"-"},"content":"        zoneId \u003d \"UTC-1030\";"},{"lineNumber":688,"author":{"gitId":"-"},"content":"        input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":689,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":690,"author":{"gitId":"-"},"content":""},{"lineNumber":691,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":692,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":693,"author":{"gitId":"-"},"content":""},{"lineNumber":694,"author":{"gitId":"-"},"content":"        zoneId \u003d \"UTC\";"},{"lineNumber":695,"author":{"gitId":"-"},"content":"        input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":696,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":697,"author":{"gitId":"-"},"content":""},{"lineNumber":698,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":699,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":700,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":701,"author":{"gitId":"-"},"content":""},{"lineNumber":702,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":703,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_incorrectTimezone_throwsParseException() {"},{"lineNumber":704,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"UTC+\").build();"},{"lineNumber":705,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));;"},{"lineNumber":706,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":707,"author":{"gitId":"-"},"content":""},{"lineNumber":708,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":709,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parse_timezoneWithoutArgument_throwsParseException() {"},{"lineNumber":710,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"\").build();"},{"lineNumber":711,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e ArgsParser.parse(translateCommandline(input)));"},{"lineNumber":712,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":713,"author":{"gitId":"-"},"content":""},{"lineNumber":714,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":715,"author":{"gitId":"-"},"content":"    public void parse_shallowCloning_success() throws Exception {"},{"lineNumber":716,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":717,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":718,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":719,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":720,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":721,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(false, cliArguments.isShallowCloningPerformed());"},{"lineNumber":722,"author":{"gitId":"-"},"content":""},{"lineNumber":723,"author":{"gitId":"-"},"content":"        String inputShallow \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":724,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":725,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":726,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":727,"author":{"gitId":"-"},"content":"        CliArguments cliArgumentsShallow \u003d ArgsParser.parse(translateCommandline(inputShallow));"},{"lineNumber":728,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(cliArgumentsShallow instanceof ConfigCliArguments);"},{"lineNumber":729,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(true, cliArgumentsShallow.isShallowCloningPerformed());"},{"lineNumber":730,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":731,"author":{"gitId":"-"},"content":""},{"lineNumber":732,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":733,"author":{"gitId":"-"},"content":"     * Ensures that {@code actualSinceDate} is exactly one month before {@code untilDate}."},{"lineNumber":734,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":735,"author":{"gitId":"-"},"content":"     * @throws AssertionError if {@code actualSinceDate} is not one month before {@code untilDate}."},{"lineNumber":736,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":737,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private void assertDateDiffOneMonth(LocalDateTime actualSinceDate, LocalDateTime untilDate) {"},{"lineNumber":738,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime oneMonthBeforeUntilDate \u003d untilDate.withHour(0).withMinute(0).withSecond(0).minusMonths(1);"},{"lineNumber":739,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(actualSinceDate.equals(oneMonthBeforeUntilDate));"},{"lineNumber":740,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":741,"author":{"gitId":"-"},"content":""},{"lineNumber":742,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":743,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Ensures that {@code actualUntilDate} falls on the date of report generation with time at 23:59:59."},{"lineNumber":744,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":745,"author":{"gitId":"-"},"content":"     * @throws AssertionError if {@code actualUntilDate} does not fall on the date of report generation"},{"lineNumber":746,"author":{"gitId":"-"},"content":"     * with time at 23:59:59."},{"lineNumber":747,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":748,"author":{"gitId":"yhtMinceraft1010X"},"content":"    private void assertDateDiffEndOfDay(LocalDateTime actualUntilDate) {"},{"lineNumber":749,"author":{"gitId":"yhtMinceraft1010X"},"content":""},{"lineNumber":750,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime currentDate \u003d LocalDateTime.now().withHour(23).withMinute(59).withSecond(59).withNano(0);"},{"lineNumber":751,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(actualUntilDate.equals(currentDate));"},{"lineNumber":752,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":753,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":11,"yhtMinceraft1010X":232,"gok99":6,"-":504}},{"path":"src/test/java/reposense/parser/AuthorConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.AbstractMap.SimpleEntry;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AuthorConfigParserTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_EMPTY_LOCATION_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_emptyLocation_test.csv\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_EMPTY_CONFIG_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/require_trailing_whitespaces/authorconfig_emptyConfig_test.csv\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_noSpecialCharacter_test.csv\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_specialCharacter_test.csv\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_COMMAS_AND_DOUBLEQUOTES_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_commasAndDoubleQuotes_test.csv\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_multipleEmails_test.csv\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_DIFFERENT_COLUMN_ORDER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_differentColumnOrder_test.csv\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MISSING_OPTIONAL_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_MISSING_MANDATORY_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static final Path AUTHOR_CONFIG_UNKNOWN_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":41,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            \"AuthorConfigParserTest/authorconfig_unknownHeaders_test.csv\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_GITHUB_ID_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_gitHubIdHeader_test.csv\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_GIT_HOST_ID_HEADER \u003d loadResource(AuthorConfigParserTest.class,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \"AuthorConfigParserTest/authorconfig_gitHostIdHeader_test.csv\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_MASTER_BRANCH \u003d \"master\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS \u003d"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Arrays.asList(FIRST_AUTHOR, SECOND_AUTHOR);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final Author FIRST_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"‘Processed�‘Cooked�\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final Author SECOND_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"(codeeong)\");"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final Author THIRD_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"^:jordancjq;$\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS \u003d Arrays.asList("},{"lineNumber":59,"author":{"gitId":"-"},"content":"            FIRST_SPECIAL_CHARACTER_AUTHOR, SECOND_SPECIAL_CHARACTER_AUTHOR, THIRD_SPECIAL_CHARACTER_AUTHOR);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final Author FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"ProcessedCooked\");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static final Author SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"codeeong\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final Author THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR \u003d new Author(\"jordancjq\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static final String FIRST_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"Tay Fan Gao, Douya\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final String SECOND_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"\\\"\\\"Tora, S/O,\\\" Doyua, T.\\\"\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static final String THIRD_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME \u003d \"jordancjq\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            Collections.singletonList(\"Tay Fan Gao, Douya \\\"SOC, Y2S1\\\"\");"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d Collections.emptyList();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e THIRD_COMMAS_AND_DOUBLEQUOTES_ALIAS \u003d"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            Arrays.asList(\"Borex T\\\"ony Tong\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final Map\u003cAuthor, List\u003cString\u003e\u003e AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP \u003d"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            Stream.of(new SimpleEntry\u003c\u003e(FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR, FIRST_COMMAS_AND_DOUBLEQUOTES_ALIAS),"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR, SECOND_COMMAS_AND_DOUBLEQUOTES_ALIAS),"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR, THIRD_COMMAS_AND_DOUBLEQUOTES_ALIAS))"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toMap(entry -\u003e entry.getKey(), entry -\u003e entry.getValue()));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private static final Map\u003cAuthor, String\u003e AUTHOR_DISPLAY_NAME_COMMAS_AND_DOUBLE_QUOTES_MAP \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            Stream.of(new SimpleEntry\u003c\u003e(FIRST_COMMAS_AND_DOUBLEQUOTES_AUTHOR,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                            FIRST_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME),"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(SECOND_COMMAS_AND_DOUBLEQUOTES_AUTHOR,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                            SECOND_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME),"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                    new SimpleEntry\u003c\u003e(THIRD_COMMAS_AND_DOUBLEQUOTES_AUTHOR, THIRD_COMMAS_AND_DOUBLEQUOTES_DISPLAY_NAME))"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                    .collect(Collectors.toMap(entry -\u003e entry.getKey(), entry -\u003e entry.getValue()));"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_EMAIL_LIST \u003d"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            Arrays.asList(\"nbr@example.com\", \"nbriannl@test.net\", \"nbriannl@users.noreply.github.com\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void authorConfig_noSpecialCharacter_success() throws Exception {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void authorConfig_emptyLocation_success() throws Exception {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        AuthorConfiguration expectedConfig \u003d new AuthorConfiguration(new RepoLocation(\"\"));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_LOCATION_FILE);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d authorConfigCsvParser.parse();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        AuthorConfiguration authorConfig \u003d authorConfigs.get(0);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, authorConfigs.size());"},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedConfig.getLocation(), authorConfig.getLocation());"},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedConfig.getBranch(), authorConfig.getBranch());"},{"lineNumber":115,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, authorConfig.getAuthorList());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void authorConfig_emptyConfig_throwsInvalidCsvException() throws Exception {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_CONFIG_FILE);"},{"lineNumber":121,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e authorConfigCsvParser.parse());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void authorConfig_specialCharacter_success() throws Exception {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":134,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void authorConfig_multipleEmails_success() throws Exception {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Author actualAuthor \u003d config.getAuthorList().get(0);"},{"lineNumber":149,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(FIRST_AUTHOR_EMAIL_LIST.size(), actualAuthor.getEmails().size());"},{"lineNumber":150,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(actualAuthor.getEmails().containsAll(FIRST_AUTHOR_EMAIL_LIST));"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void authorConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_DIFFERENT_COLUMN_ORDER);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":164,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void authorConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MISSING_OPTIONAL_HEADER);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(4, config.getAuthorList().size());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public void authorConfig_newGitHostIdHeader_success() throws Exception {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser;"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_GIT_HOST_ID_HEADER);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configsWithGitHostIdHeader \u003d authorConfigCsvParser.parse();"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_GITHUB_ID_HEADER);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configsWithGitHubIdHeader \u003d authorConfigCsvParser.parse();"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(configsWithGitHubIdHeader, configsWithGitHostIdHeader);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public void authorConfig_missingMandatoryHeader_throwsInvalidCsvException() throws Exception {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MISSING_MANDATORY_HEADER);"},{"lineNumber":197,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e authorConfigCsvParser.parse());"},{"lineNumber":198,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":200,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void authorConfig_unknownHeaders_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":202,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_UNKNOWN_HEADER);"},{"lineNumber":203,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidHeaderException.class, () -\u003e authorConfigCsvParser.parse());"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public void parse_multipleColumnsWithCommasAndDoubleQuotes_success() throws Exception {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        AuthorConfigCsvParser authorConfigCsvParser \u003d"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(AUTHOR_CONFIG_COMMAS_AND_DOUBLEQUOTES_FILE);"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        AuthorConfiguration config \u003d configs.get(0);"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":217,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":218,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(AUTHOR_DISPLAY_NAME_COMMAS_AND_DOUBLE_QUOTES_MAP, config.getAuthorDisplayNameMap());"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP.size(), config.getAuthorList().size());"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        config.getAuthorList().forEach(author -\u003e {"},{"lineNumber":222,"author":{"gitId":"yhtMinceraft1010X"},"content":"            Assertions.assertEquals(AUTHOR_ALIAS_COMMAS_AND_DOUBLE_QUOTES_MAP.get(author), author.getAuthorAliases());"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":35,"Zhou-Jiahao-1998":6,"-":184}},{"path":"src/test/java/reposense/parser/GroupConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class GroupConfigParserTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MULTI_LOCATION_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_multipleLocation_test.csv\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_EMPTY_LOCATION_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_emptyLocation_test.csv\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_DIFFERENT_COLUMN_ORDER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_differentColumnOrder_test.csv\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MISSING_OPTIONAL_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Path GROUP_CONFIG_MISSING_MANDATORY_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \"GroupConfigParserTest/groupconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":27,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static final Path GROUP_CONFIG_UNKNOWN_HEADER_FILE \u003d loadResource(GroupConfigParserTest.class,"},{"lineNumber":28,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            \"GroupConfigParserTest/groupconfig_unknownHeader_test.csv\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_BETA_GROUPS \u003d Arrays.asList("},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new FileType(\"Code\", Arrays.asList(\"**/*.java\", \"**/*.py\")),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            new FileType(\"Docs\", Collections.singletonList(\"docs/**\")));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_DELTA_GROUPS \u003d Arrays.asList("},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new FileType(\"Main\", Collections.singletonList(\"src/main/**\")),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new FileType(\"Test\", Arrays.asList(\"src/test/**\", \"src/systest/**\")));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void groupConfig_emptyLocation_success() throws Exception {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_EMPTY_LOCATION_FILE);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, groupConfigs.size());"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        GroupConfiguration actualReposenseConfig \u003d groupConfigs.get(0);"},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, actualReposenseConfig.getGroupsList().size());"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        GroupConfiguration actualEmptyLocationConfig \u003d groupConfigs.get(1);"},{"lineNumber":51,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, actualEmptyLocationConfig.getGroupsList().size());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void groupConfig_multipleLocations_success() throws Exception {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_MULTI_LOCATION_FILE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, groupConfigs.size());"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        GroupConfiguration actualBetaConfig \u003d groupConfigs.get(0);"},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_LOCATION, actualBetaConfig.getLocation().toString());"},{"lineNumber":63,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_GROUPS, actualBetaConfig.getGroupsList());"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        GroupConfiguration actualDeltaConfig \u003d groupConfigs.get(1);"},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_LOCATION, actualDeltaConfig.getLocation().toString());"},{"lineNumber":67,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_GROUPS, actualDeltaConfig.getGroupsList());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void groupConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_DIFFERENT_COLUMN_ORDER_FILE);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, groupConfigs.size());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        GroupConfiguration actualBetaConfig \u003d groupConfigs.get(0);"},{"lineNumber":78,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_LOCATION, actualBetaConfig.getLocation().toString());"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_GROUPS, actualBetaConfig.getGroupsList());"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        GroupConfiguration actualDeltaConfig \u003d groupConfigs.get(1);"},{"lineNumber":82,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_LOCATION, actualDeltaConfig.getLocation().toString());"},{"lineNumber":83,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_GROUPS, actualDeltaConfig.getGroupsList());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void groupConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser(GROUP_CONFIG_MISSING_OPTIONAL_HEADER_FILE);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d groupConfigCsvParser.parse();"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, groupConfigs.size());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(3, groupConfigs.get(0).getGroupsList().size());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void groupConfig_missingMandatoryHeader_throwsInvalidCsvException() throws Exception {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser("},{"lineNumber":99,"author":{"gitId":"-"},"content":"                GROUP_CONFIG_MISSING_MANDATORY_HEADER_FILE);"},{"lineNumber":100,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e groupConfigCsvParser.parse());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":103,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void groupConfig_unknownHeader_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":105,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        GroupConfigCsvParser groupConfigCsvParser \u003d new GroupConfigCsvParser("},{"lineNumber":106,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                GROUP_CONFIG_UNKNOWN_HEADER_FILE);"},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidHeaderException.class, () -\u003e groupConfigCsvParser.parse());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":21,"Zhou-Jiahao-1998":6,"-":82}},{"path":"src/test/java/reposense/parser/RepoConfigParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"import static reposense.model.RepoConfiguration.DEFAULT_FILE_SIZE_LIMIT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class RepoConfigParserTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Path TEST_CONFIG_FOLDER \u003d loadResource(RepoConfigParserTest.class, \"repoconfig_merge_test\");"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path TEST_EMPTY_BRANCH_CONFIG_FOLDER \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \"repoconfig_empty_branch_test\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_noSpecialCharacter_test.csv\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_OVERRIDE_KEYWORD_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_overrideKeyword_test.csv\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_REDUNDANT_LINES_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/require_trailing_whitespaces/repoconfig_redundantLines_test.csv\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_UNRECOGNIZED_VALUES_FOR_YES_KEYWORD_HEADERS_FILE \u003d"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_unrecognizedValuesForYesKeywordHeaders_test.csv\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DUPLICATE_HEADERS_CASE_SENSITIVE_FILE \u003d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_duplicateHeadersCaseSensitive_test.csv\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DUPLICATE_HEADERS_CASE_INSENSITIVE_FILE \u003d"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            loadResource(RepoConfigParserTest.class,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_duplicateHeadersCaseInsensitive_test.csv\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_DIFFERENT_COLUMN_ORDER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_differentColumnOrder_test.csv\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_OPTIONAL_HEADER_MISSING_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_missingOptionalHeader_test.csv\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_MANDATORY_HEADER_MISSING_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_missingMandatoryHeader_test.csv\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final Path MERGE_EMPTY_LOCATION_FOLDER \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \"RepoConfigParserTest/repoconfig_merge_empty_location_test\");"},{"lineNumber":53,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    private static final Path REPO_CONFIG_UNKNOWN_HEADER_FILE \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":54,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"            \"RepoConfigParserTest/repoconfig_unknownHeaders_test.csv\");"},{"lineNumber":55,"author":{"gitId":"gok99"},"content":"    private static final Path REPO_CONFIG_INVALID_FILE_SIZE_LIMIT \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":56,"author":{"gitId":"gok99"},"content":"            \"RepoConfigParserTest/repoconfig_invalidFileSizeLimit_test.csv\");"},{"lineNumber":57,"author":{"gitId":"gok99"},"content":"    private static final Path REPO_CONFIG_IGNORE_FILE_SIZE_LIMIT \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":58,"author":{"gitId":"gok99"},"content":"            \"RepoConfigParserTest/repoconfig_ignoreFileSizeLimit_test.csv\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_ZERO_VALID_RECORDS \u003d loadResource(RepoConfigParserTest.class,"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            \"CsvParserTest/repoconfig_zeroValidRecords_test.csv\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_MASTER_BRANCH \u003d \"master\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA_ADD_CONFIG_JSON_BRANCH \u003d \"add-config-json\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA_BRANCH \u003d \"HEAD\";"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_DELTA_FORMATS \u003d"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            FileType.convertFormatStringsToFileTypes(Arrays.asList(\"java\", \"fxml\"));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static final List\u003cFileType\u003e TEST_REPO_BETA_CONFIG_FORMATS \u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            FileType.convertFormatStringsToFileTypes(Arrays.asList(\"java\", \"adoc\", \"md\"));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e TEST_REPO_BETA_CONFIG_IGNORED_COMMITS \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            Arrays.asList(\"abcde12345\", \"67890fdecba\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"gok99"},"content":"    private static final int FILE_SIZE_LIMIT_VALUE \u003d 100000;"},{"lineNumber":77,"author":{"gitId":"gok99"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE_LOCATION \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE_BRANCH \u003d \"HEAD\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Arrays.asList(\"Zachary Tang\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Arrays.asList(\"collated**\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.java\", \"collated**\");"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e SECOND_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.doc\", \"collated**\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void repoConfig_noSpecialCharacter_success() throws Exception {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(config.getIgnoreCommitList(),"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS));"},{"lineNumber":107,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(config.getFileSizeLimit(), FILE_SIZE_LIMIT_VALUE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(config.isShallowCloningPerformed());"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isFormatsOverriding());"},{"lineNumber":112,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":113,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":114,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(config.isFileSizeLimitOverriding());"},{"lineNumber":115,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(config.isFileSizeLimitIgnored());"},{"lineNumber":116,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(config.isIgnoredFileAnalysisSkipped());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void merge_twoRepoConfigs_success() throws Exception {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setIgnoreGlobList(SECOND_AUTHOR_GLOB_LIST);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        expectedAuthors.add(FIRST_AUTHOR);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        expectedAuthors.add(SECOND_AUTHOR);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RepoConfiguration firstRepo \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                TEST_REPO_BETA_MASTER_BRANCH);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorList(expectedAuthors);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        firstRepo.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        firstRepo.addAuthorDetailsToAuthorMapEntry(SECOND_AUTHOR, Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        firstRepo.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        RepoConfiguration secondRepo \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                TEST_REPO_BETA_ADD_CONFIG_JSON_BRANCH);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        secondRepo.setAuthorList(Arrays.asList(SECOND_AUTHOR));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        secondRepo.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        secondRepo.addAuthorDetailsToAuthorMapEntry(SECOND_AUTHOR, Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        secondRepo.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(TEST_CONFIG_FOLDER).build();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, actualConfigs.size());"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(firstRepo, actualConfigs.get(0));"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(secondRepo, actualConfigs.get(1));"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void merge_emptyLocation_success() throws Exception {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedBetaAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedBetaAuthors.add(FIRST_AUTHOR);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        expectedBetaAuthors.add(SECOND_AUTHOR);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        List\u003cAuthor\u003e expectedDeltaAuthors \u003d new ArrayList\u003c\u003e();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        expectedDeltaAuthors.add(FIRST_AUTHOR);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedBetaConfig \u003d"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION), TEST_REPO_BETA_MASTER_BRANCH);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorList(expectedBetaAuthors);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        expectedBetaConfig.addAuthorDetailsToAuthorMapEntry(SECOND_AUTHOR, Arrays.asList(\"Zachary Tang\"));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        expectedBetaConfig.setIsShallowCloningPerformed(true);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedDeltaConfig \u003d"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA_LOCATION), TEST_REPO_DELTA_BRANCH);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setAuthorList(expectedDeltaAuthors);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setStandaloneConfigIgnored(true);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        expectedDeltaConfig.setFormats(TEST_REPO_DELTA_FORMATS);"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e expectedConfigs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        expectedConfigs.add(expectedBetaConfig);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        expectedConfigs.add(expectedDeltaConfig);"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(MERGE_EMPTY_LOCATION_FOLDER).build();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(2, actualConfigs.size());"},{"lineNumber":201,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedConfigs, actualConfigs);"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfigs.get(0), actualConfigs.get(0));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedConfigs.get(1), actualConfigs.get(1));"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public void repoConfig_defaultBranch_success() throws Exception {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                RepoConfiguration.DEFAULT_BRANCH);"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(TEST_EMPTY_BRANCH_CONFIG_FOLDER).build();"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualConfigs \u003d"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(actualConfigs, authorConfigs);"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, actualConfigs.size());"},{"lineNumber":222,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedConfig.getBranch(), actualConfigs.get(0).getBranch());"},{"lineNumber":223,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedConfig.getBranch(), authorConfigs.get(0).getBranch());"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public void repoConfig_overrideKeyword_success() throws Exception {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_OVERRIDE_KEYWORD_FILE);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":233,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":234,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":235,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":236,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isStandaloneConfigIgnored());"},{"lineNumber":237,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS),"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                config.getIgnoreCommitList());"},{"lineNumber":239,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(FILE_SIZE_LIMIT_VALUE, config.getFileSizeLimit());"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(config.isFormatsOverriding());"},{"lineNumber":242,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(config.isIgnoreGlobListOverriding());"},{"lineNumber":243,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(config.isIgnoreCommitListOverriding());"},{"lineNumber":244,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(config.isFileSizeLimitOverriding());"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public void repoConfig_redundantLines_success() throws Exception {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_REDUNDANT_LINES_FILE);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(3, configs.size());"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        RepoConfiguration betaConfig \u003d configs.get(0);"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        RepoConfiguration charlieConfig \u003d configs.get(1);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        RepoConfiguration deltaConfig \u003d configs.get(2);"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), betaConfig.getLocation());"},{"lineNumber":258,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, betaConfig.getBranch());"},{"lineNumber":259,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_CHARLIE_LOCATION), charlieConfig.getLocation());"},{"lineNumber":260,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_CHARLIE_BRANCH, charlieConfig.getBranch());"},{"lineNumber":261,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_DELTA_LOCATION), deltaConfig.getLocation());"},{"lineNumber":262,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_DELTA_BRANCH, deltaConfig.getBranch());"},{"lineNumber":263,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(deltaConfig.isStandaloneConfigIgnored());"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    public void repoConfig_differentColumnOrder_success() throws Exception {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_DIFFERENT_COLUMN_ORDER_FILE);"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":276,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(config.getIgnoreCommitList(),"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS));"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isFormatsOverriding());"},{"lineNumber":286,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":287,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    public void repoConfig_missingOptionalHeader_success() throws Exception {"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_OPTIONAL_HEADER_MISSING_FILE);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(1, configs.size());"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"        RepoConfiguration config \u003d configs.get(0);"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"},{"lineNumber":300,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_MASTER_BRANCH, config.getBranch());"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, config.getFileTypeManager().getFormats());"},{"lineNumber":303,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(DEFAULT_FILE_SIZE_LIMIT, config.getFileSizeLimit());"},{"lineNumber":304,"author":{"gitId":"-"},"content":""},{"lineNumber":305,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(config.isStandaloneConfigIgnored());"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isFormatsOverriding());"},{"lineNumber":308,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isIgnoreGlobListOverriding());"},{"lineNumber":309,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(config.isIgnoreCommitListOverriding());"},{"lineNumber":310,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(config.isFileSizeLimitOverriding());"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitId":"-"},"content":""},{"lineNumber":313,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    public void repoConfig_withUnrecognizedValuesForYesKeywordHeaders_valuesIgnored() throws Exception {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":316,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_UNRECOGNIZED_VALUES_FOR_YES_KEYWORD_HEADERS_FILE);"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(configs.get(0).isStandaloneConfigIgnored());"},{"lineNumber":320,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(configs.get(0).isShallowCloningPerformed());"},{"lineNumber":321,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(configs.get(0).isFindingPreviousAuthorsPerformed());"},{"lineNumber":322,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(configs.get(0).isFileSizeLimitIgnored());"},{"lineNumber":323,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(configs.get(0).isIgnoredFileAnalysisSkipped());"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":327,"author":{"gitId":"gok99"},"content":"    public void repoConfig_invalidFileSizeLimit_valueIgnored() throws Exception {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":329,"author":{"gitId":"gok99"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_INVALID_FILE_SIZE_LIMIT);"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":331,"author":{"gitId":"-"},"content":""},{"lineNumber":332,"author":{"gitId":"gok99"},"content":"        Assertions.assertEquals(configs.get(0).getFileSizeLimit(), DEFAULT_FILE_SIZE_LIMIT);"},{"lineNumber":333,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(configs.get(0).isFileSizeLimitOverriding());"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"gok99"},"content":"    @Test"},{"lineNumber":337,"author":{"gitId":"gok99"},"content":"    public void repoConfig_ignoreFileSizeLimit_ignoreFileSizeColumns() throws Exception {"},{"lineNumber":338,"author":{"gitId":"gok99"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":339,"author":{"gitId":"gok99"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_IGNORE_FILE_SIZE_LIMIT);"},{"lineNumber":340,"author":{"gitId":"gok99"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"},{"lineNumber":341,"author":{"gitId":"gok99"},"content":""},{"lineNumber":342,"author":{"gitId":"gok99"},"content":"        Assertions.assertTrue(configs.get(0).isFileSizeLimitIgnored());"},{"lineNumber":343,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(configs.get(0).isFileSizeLimitOverriding());"},{"lineNumber":344,"author":{"gitId":"gok99"},"content":"        Assertions.assertFalse(configs.get(0).isIgnoredFileAnalysisSkipped());"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    public void repoConfig_mandatoryHeaderMissing_throwsInvalidCsvException() throws Exception {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_MANDATORY_HEADER_MISSING_FILE);"},{"lineNumber":350,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    public void repoConfig_zeroValidRecords_throwsInvalidCsvException() throws Exception {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_ZERO_VALID_RECORDS);"},{"lineNumber":356,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    public void repoConfig_duplicateHeadersCaseSensitive_throwsInvalidCsvException() throws Exception {"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":362,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_DUPLICATE_HEADERS_CASE_SENSITIVE_FILE);"},{"lineNumber":363,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    public void repoConfig_duplicateHeadersCaseInsensitive_throwsInvalidCsvException() throws Exception {"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":369,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_DUPLICATE_HEADERS_CASE_INSENSITIVE_FILE);"},{"lineNumber":370,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidCsvException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":371,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":372,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":373,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":374,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void repoConfig_unknownHeaders_throwsInvalidHeaderException() throws Exception {"},{"lineNumber":375,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        RepoConfigCsvParser repoConfigCsvParser \u003d"},{"lineNumber":376,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"                new RepoConfigCsvParser(REPO_CONFIG_UNKNOWN_HEADER_FILE);"},{"lineNumber":377,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(InvalidHeaderException.class, () -\u003e repoConfigCsvParser.parse());"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":379,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":65,"Zhou-Jiahao-1998":6,"gok99":30,"-":278}},{"path":"src/test/java/reposense/parser/ReportConfigJsonParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ReportConfigJsonParserTest {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final Path VALID_REPORT_CONFIG \u003d loadResource("},{"lineNumber":15,"author":{"gitId":"-"},"content":"            ReportConfigJsonParserTest.class, \"ReportConfigJsonParserTest/report-config-valid.json\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final Path INVALID_REPORT_CONFIG \u003d loadResource("},{"lineNumber":17,"author":{"gitId":"-"},"content":"            ReportConfigJsonParserTest.class, \"ReportConfigJsonParserTest/report-config-invalid.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path EMPTY_REPORT_CONFIG \u003d loadResource("},{"lineNumber":19,"author":{"gitId":"-"},"content":"            ReportConfigJsonParserTest.class, \"ReportConfigJsonParserTest/report-config-empty.json\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String DEFAULT_TITLE \u003d \"RepoSense Report\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void reportConfig_parseEmptyJsonFile_getDefaultTitle() throws Exception {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        ReportConfiguration reportConfig \u003d new ReportConfigJsonParser().parse(EMPTY_REPORT_CONFIG);"},{"lineNumber":25,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(reportConfig.getTitle(), DEFAULT_TITLE);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void reportConfig_parseInvalidJsonFile_getDefaultTitle() throws Exception {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        ReportConfiguration reportConfig \u003d new ReportConfigJsonParser().parse(INVALID_REPORT_CONFIG);"},{"lineNumber":30,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(reportConfig.getTitle(), DEFAULT_TITLE);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void reportConfig_parseValidJsonFile_getCustomTitle() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ReportConfiguration reportConfig \u003d new ReportConfigJsonParser().parse(VALID_REPORT_CONFIG);"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertNotEquals(reportConfig.getTitle(), DEFAULT_TITLE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":5,"-":33}},{"path":"src/test/java/reposense/parser/StandaloneConfigJsonParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.StandaloneConfig;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class StandaloneConfigJsonParserTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_MALFORMED_CONFIG \u003d loadResource("},{"lineNumber":26,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class, \"StandaloneConfigJsonParserTest/standaloneConfig_malformedJson.json\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_UNKNOWN_PROPERTY_CONFIG \u003d loadResource("},{"lineNumber":29,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_unknownPropertyInJson.json\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_CONFIG_FULL \u003d loadResource("},{"lineNumber":33,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_full.json\");"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_CONFIG_EMPTY_TEXT_FILE \u003d loadResource("},{"lineNumber":37,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_emptyText.json\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_CONFIG_EMPTY_JSON_FILE \u003d loadResource("},{"lineNumber":41,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_emptyJson.json\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path STANDALONE_CONFIG_GITHUBID_ONLY \u003d loadResource("},{"lineNumber":45,"author":{"gitId":"-"},"content":"            StandaloneConfigJsonParserTest.class,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \"StandaloneConfigJsonParserTest/standaloneConfig_githubId_only.json\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TEST_DUMMY_LOCATION \u003d \"https://github.com/reposense/RepoSense.git\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static RepoConfiguration expectedGithubIdOnlyRepoconfig;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static RepoConfiguration expectedFullRepoConfig;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeAll"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static void setUp() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(\"yong24s\");"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        author.setAuthorAliases(Arrays.asList(\"Yong Hao TENG\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        author.setIgnoreGlobList(Arrays.asList(\"**.css\", \"**.html\", \"**.jade\", \"**.js\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        expectedGithubIdOnlyRepoconfig \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedGithubIdOnlyRepoconfig.setFormats(FileTypeTest.NO_SPECIFIED_FORMATS);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedGithubIdOnlyRepoconfig.setAuthorList(Arrays.asList(new Author(\"yong24s\")));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedGithubIdOnlyRepoconfig.addAuthorDetailsToAuthorMapEntry(author, author.getEmails());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setFormats(FileType.convertFormatStringsToFileTypes("},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Arrays.asList(\"gradle\", \"jade\", \"java\", \"js\", \"md\", \"scss\", \"yml\")));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setIgnoreCommitList(Arrays.asList(new CommitHash("},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \"7b96c563eb2d3612aa5275364333664a18f01491\")));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setIgnoreGlobList(Arrays.asList(\"**.adoc\", \"collate**\"));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setIgnoredAuthorsList(Arrays.asList(\"yong24s\"));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setAuthorList(Arrays.asList(author));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.setAuthorDisplayName(author, \"Yong Hao\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.addAuthorDetailsToAuthorMapEntry(author, Arrays.asList(author.getGitId()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.addAuthorDetailsToAuthorMapEntry(author, author.getAuthorAliases());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        expectedFullRepoConfig.addAuthorDetailsToAuthorMapEntry(author, author.getEmails());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void standaloneConfig_parseEmptyTextFile_success() throws Exception {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_EMPTY_TEXT_FILE);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void standaloneConfig_parseEmptyJsonFile_success() throws Exception {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_EMPTY_JSON_FILE);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void standaloneConfig_ignoresUnknownProperty_success() throws Exception {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        new StandaloneConfigJsonParser().parse(STANDALONE_UNKNOWN_PROPERTY_CONFIG);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void standaloneConfig_correctConfig_success() throws Exception {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        StandaloneConfig config \u003d new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_FULL);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertSameConfig(expectedFullRepoConfig, config);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void standaloneConfig_githubIdOnlyConfig_success() throws Exception {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        StandaloneConfig config \u003d new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_GITHUBID_ONLY);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertSameConfig(expectedGithubIdOnlyRepoconfig, config);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void standaloneConfig_malformedJsonFile_throwsJsonSyntaxException() {"},{"lineNumber":107,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(JsonSyntaxException.class, () -\u003e new StandaloneConfigJsonParser()"},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"                .parse(STANDALONE_MALFORMED_CONFIG));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    private void assertSameConfig(RepoConfiguration expectedRepoConfig, StandaloneConfig actualStandaloneConfig)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throws Exception {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        RepoConfiguration actualRepoConfig \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        actualRepoConfig.update(actualStandaloneConfig);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        TestUtil.compareRepoConfig(expectedRepoConfig, actualRepoConfig);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":8,"-":109}},{"path":"src/test/java/reposense/report/ErrorSummaryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":6,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":7,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"import reposense.parser.InvalidLocationException;"},{"lineNumber":8,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":9,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"public class ErrorSummaryTest {"},{"lineNumber":10,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    public void errorSummary_addRepeatedErrorMessage_containsNoDuplicates() {"},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"        String invalidLocation1 \u003d \"ttp://github.com/reposense.RepoSense.git\";"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"        String invalidLocation2 \u003d \"https://github.com/contains-illegal-chars/^\\\\/\";"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"        String invalidLocation3 \u003d \"not-valid-protocol://abc.com/reposense/RepoSense.git\";"},{"lineNumber":15,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":"        ErrorSummary errorSummaryInstance \u003d ErrorSummary.getInstance();"},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"        errorSummaryInstance.clearErrorSet();"},{"lineNumber":18,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":19,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"            new RepoLocation(invalidLocation1);"},{"lineNumber":21,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":"            // not relevant to the test"},{"lineNumber":23,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(1, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":25,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":26,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"            new RepoLocation(invalidLocation1);"},{"lineNumber":28,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"            // not relevant to the test"},{"lineNumber":30,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(1, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":32,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":33,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"            new RepoLocation(invalidLocation2);"},{"lineNumber":35,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"            // not relevant to the test"},{"lineNumber":37,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(2, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":39,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":40,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            new RepoLocation(invalidLocation1);"},{"lineNumber":42,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            // not relevant to the test"},{"lineNumber":44,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(2, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":46,"author":{"gitId":"Zhou-Jiahao-1998"},"content":""},{"lineNumber":47,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"            new RepoLocation(invalidLocation3);"},{"lineNumber":49,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        } catch (InvalidLocationException e) {"},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"            // not relevant to the test"},{"lineNumber":51,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"        Assertions.assertEquals(3, errorSummaryInstance.getErrorSet().size());"},{"lineNumber":53,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Zhou-Jiahao-1998"},"content":"}"}],"authorContributionMap":{"chan-j-d":20,"yhtMinceraft1010X":2,"Zhou-Jiahao-1998":32}},{"path":"src/test/java/reposense/report/RepoClonerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class RepoClonerTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_EMPTY_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Empty.git\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Alpha.git\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path REPOCLONE_LOCAL_TEST_PATH \u003d"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Paths.get(FileUtil.REPOS_ADDRESS, \"repoclone test/dummy-repo\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void repoCloner_emptyRepo_failsGracefully() throws Exception {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        RepoConfiguration emptyRepositoryRepoConfig \u003d"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                new RepoConfiguration(new RepoLocation(TEST_REPO_EMPTY_GIT_LOCATION));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        repoCloner.cloneBare(emptyRepositoryRepoConfig);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        RepoLocation clonedRepoLocation \u003d repoCloner.getClonedRepoLocation();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertNull(clonedRepoLocation);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void repoCloner_validRepoLocationWithRelativePathingAndSpaces_success() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // Clones a test repository into the test directory for testing of relative pathing"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        RepoConfiguration tempRemoteConfiguration \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION));"},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneBare(tempRemoteConfiguration, Paths.get(\".\"), REPOCLONE_LOCAL_TEST_PATH.toString());"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        RepoConfiguration repoWithRelativePathingAndSpacesAndEndingBackslash \u003d"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new RepoConfiguration(new RepoLocation(REPOCLONE_LOCAL_TEST_PATH.toString()));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        repoCloner.cloneBare(repoWithRelativePathingAndSpacesAndEndingBackslash);"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(REPOCLONE_LOCAL_TEST_PATH));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":2,"yhtMinceraft1010X":4,"-":40}},{"path":"src/test/java/reposense/template/GitTestTemplate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.template;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yhtMinceraft1010X"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.authorship.FileInfoAnalyzer;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.authorship.FileInfoExtractor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.git.GitShow;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"import reposense.util.TestRepoCloner;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Contains templates for git testing."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class GitTestTemplate {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Alpha.git\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    protected static final String IGNORE_REVS_FILE_LOCATION \u003d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            \"repos/reposense_testrepo-Alpha/testrepo-Alpha/.git-blame-ignore-revs\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_BLAME_WITH_PREVIOUS_AUTHORS_BRANCH \u003d \"1565-find-previous-authors\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    protected static final String FIRST_COMMIT_HASH \u003d \"7d7584f\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected static final String ROOT_COMMIT_HASH \u003d \"fd425072e12004b71d733a58d819d845509f8db3\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH \u003d \"2fb6b9b\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH_LONG \u003d \"2fb6b9b2dd9fa40bf0f9815da2cb0ae8731436c7\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH_PARENT \u003d \"c5a6dc774e22099cd9ddeb0faff1e75f9cf4f151\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected static final String MAIN_AUTHOR_NAME \u003d \"harryggg\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_NAME \u003d \"fakeAuthor\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected static final String IGNORED_AUTHOR_NAME \u003d \"FH-30\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected static final String EUGENE_AUTHOR_NAME \u003d \"eugenepeh\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected static final String YONG_AUTHOR_NAME \u003d \"Yong Hao TENG\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected static final String MINGYI_AUTHOR_NAME \u003d \"myteo\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected static final String JAMES_AUTHOR_NAME \u003d \"jamessspanggg\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    protected static final String JAMES_ALTERNATIVE_AUTHOR_NAME \u003d \"James Pang\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    protected static final String JINYAO_AUTHOR_NAME \u003d \"jylee-git\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    protected static final String LATEST_COMMIT_HASH \u003d \"af6087ebc0c689a9dcf3de0c3b2eb13ff47775d5\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    protected static final String LATEST_COMMIT_HASH_PARENT \u003d \"5fdb7b10c2107fdeaff7fcc512fcec41eacc381e\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    protected static final String EMPTY_TREE_HASH \u003d \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    protected static final String EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING \u003d"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            \"2d87a431fcbb8f73a731b6df0fcbee962c85c250\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    protected static final CommitHash EUGENE_AUTHOR_README_FILE_COMMIT_07052018 \u003d"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            new CommitHash(EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING \u003d"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    protected static final CommitHash FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018 \u003d"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    protected static final String MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING \u003d"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    protected static final CommitHash MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018 \u003d"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            new CommitHash(MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    protected static final String AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING \u003d"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            \"1d29339e7d16eb5b2bc8fb542e08acedd3d4b0eb\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    protected static final CommitHash AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021 \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            new CommitHash(AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            \"7d7584fc204922cc5ff3bd5ca073cad6bed2c46a\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_TWO_06022018_STRING \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_THREE_07022018_STRING \u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \"8e4ca1da5d413e9ab84a1e8d1474918afa97f7a1\";"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING \u003d"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    protected static final List\u003cCommitHash\u003e FAKE_AUTHOR_BLAME_RANGED_COMMIT_LIST_09022018 \u003d Arrays.asList("},{"lineNumber":84,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING),"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_TWO_06022018_STRING),"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_THREE_07022018_STRING),"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    protected static final List\u003cCommitHash\u003e AUTHOR_TO_IGNORE_BLAME_COMMIT_LIST_07082021 \u003d Collections.singletonList("},{"lineNumber":89,"author":{"gitId":"-"},"content":"            new CommitHash(AUTHOR_TO_IGNORE_BLAME_TEST_FILE_COMMIT_07082021_STRING)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    protected static final String NONEXISTENT_COMMIT_HASH \u003d \"nonExistentCommitHash\";"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    protected static final ZoneId TIME_ZONE_ID \u003d ZoneId.of(\"Asia/Singapore\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    protected static final Author MAIN_AUTHOR \u003d new Author(MAIN_AUTHOR_NAME);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    protected static final Author FAKE_AUTHOR \u003d new Author(FAKE_AUTHOR_NAME);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    protected static RepoConfiguration config;"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeEach"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        config \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\");"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(getAlphaAllAliasAuthor()));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        config.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        config.setIsLastModifiedDateIncluded(false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @BeforeAll"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static void beforeClass() throws Exception {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        config \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID);"},{"lineNumber":112,"author":{"gitId":"chan-j-d"},"content":"        TestRepoCloner.cloneAndBranch(config);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @AfterEach"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), \"master\");"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Generates the information for test file at {@code relativePath}."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public FileInfo generateTestFileInfo(String relativePath) {"},{"lineNumber":124,"author":{"gitId":"gok99"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config, relativePath);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(IGNORED_AUTHOR_NAME, new Author(IGNORED_AUTHOR_NAME));"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return fileInfo;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Generates the .git-blame-ignore-revs file containing {@link CommitHash}es"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * from {@code toIgnore} for the test repo."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public List\u003cCommitHash\u003e createTestIgnoreRevsFile(List\u003cCommitHash\u003e toIgnore) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e expandedIgnoreCommitList \u003d toIgnore.stream()"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .map(CommitHash::toString)"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .map(commitHash -\u003e {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                    try {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                        return GitShow.getExpandedCommitHash(config.getRepoRoot(), commitHash);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                    } catch (CommitNotFoundException e) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                        return new CommitHash(commitHash);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                })"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        FileUtil.writeIgnoreRevsFile(IGNORE_REVS_FILE_LOCATION, expandedIgnoreCommitList);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return expandedIgnoreCommitList;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void removeTestIgnoreRevsFile() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        new File(IGNORE_REVS_FILE_LOCATION).delete();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public FileResult getFileResult(String relativePath) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        FileInfo fileinfo \u003d generateTestFileInfo(relativePath);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return FileInfoAnalyzer.analyzeTextFile(config, fileinfo);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * For each line in {@link FileResult}, assert that it is attributed to the expected author provided by"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * {@code expectedLineAuthors}."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void assertFileAnalysisCorrectness(FileResult fileResult, List\u003cAuthor\u003e expectedLineAuthors) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        List\u003cLineInfo\u003e lines \u003d fileResult.getLines();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(expectedLineAuthors.size(), lines.size());"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Iterator\u003cAuthor\u003e lineAuthorsItr \u003d expectedLineAuthors.iterator();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Iterator\u003cLineInfo\u003e linesItr \u003d lines.iterator();"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        while (linesItr.hasNext() \u0026\u0026 lineAuthorsItr.hasNext()) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            assertEquals(lineAuthorsItr.next(), linesItr.next().getAuthor());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link Author} that has git id and aliases of all authors in testrepo-Alpha, so that no commits"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * will be filtered out in the `git log` command."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    protected Author getAlphaAllAliasAuthor() {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MAIN_AUTHOR_NAME);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        author.setAuthorAliases(Arrays.asList(FAKE_AUTHOR_NAME, EUGENE_AUTHOR_NAME, YONG_AUTHOR_NAME));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return author;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":2,"yhtMinceraft1010X":11,"gok99":1,"-":173}},{"path":"src/test/java/reposense/util/AssertUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class AssertUtil {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expected} Exception."},{"lineNumber":10,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(expected, null, callable);"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."},{"lineNumber":19,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)}"},{"lineNumber":20,"author":{"gitId":"yhtMinceraft1010X"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * @throws AssertionFailedError if the {@code expectedException} is not thrown or {@code expectedMessage}"},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * is not correct after calling {@code callable}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            VoidCallable callable) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            callable.call();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (Throwable actualException) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            String errorMessage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            if (!actualException.getClass().isAssignableFrom(expectedException)) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"                        expectedException.getName(), actualException.getClass().getName());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                errorMessage \u003d String.format("},{"lineNumber":36,"author":{"gitId":"-"},"content":"                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"yhtMinceraft1010X"},"content":"            throw new AssertionError(errorMessage);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"        throw new AssertionError(String.format("},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Represents a function which does not return anything and may throw an exception."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FunctionalInterface"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public interface VoidCallable {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        void call() throws Exception;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":6,"-":49}},{"path":"src/test/java/reposense/util/FileUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":13,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":14,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.report.SummaryJson;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class FileUtilTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path FILE_UTIL_TEST_DIRECTORY \u003d loadResource(FileUtilTest.class, \"FileUtilTest\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path REPO_REPORT_DIRECTORY_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"reposense-report-test\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path ARCHIVE_ZIP_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), FileUtil.ZIP_FILE);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Path EXPECTED_UNZIPPED_DIRECTORY_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \"expectedUnzip\");"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Path TEST_ZIP_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"testZip.zip\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Path UNZIPPED_DIRECTORY_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \"UnzippedFolder\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final List\u003cPath\u003e REPORT_FOLDER_FILE_PATHS \u003d Arrays.asList("},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Paths.get(REPO_REPORT_DIRECTORY_PATH.toString(), \"reposense_testrepo-Beta\").toAbsolutePath(),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            Paths.get(REPO_REPORT_DIRECTORY_PATH.toString(), \"reposense_testrepo-Charlie\").toAbsolutePath(),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            Paths.get(REPO_REPORT_DIRECTORY_PATH.toString(),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            SummaryJson.SUMMARY_JSON_FILE_NAME).toAbsolutePath()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    );"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Path EXPECTED_RELEVANT_FOLDER_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            \"expectedRelevantUnzippedFiles\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Ensures that only the specified files and folders with the corresponding file types get zipped."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void zipFoldersAndFiles_onlyRelevantFiles_success() throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.zipFoldersAndFiles(REPORT_FOLDER_FILE_PATHS, REPO_REPORT_DIRECTORY_PATH, FILE_UTIL_TEST_DIRECTORY,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                \".json\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FileUtil.unzip(ARCHIVE_ZIP_PATH, UNZIPPED_DIRECTORY_PATH);"},{"lineNumber":46,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareDirectories(EXPECTED_RELEVANT_FOLDER_PATH, UNZIPPED_DIRECTORY_PATH));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void zipFoldersAndFiles_validLocation_success() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        FileUtil.zipFoldersAndFiles(REPORT_FOLDER_FILE_PATHS, REPO_REPORT_DIRECTORY_PATH, FILE_UTIL_TEST_DIRECTORY,"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \".json\");"},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(ARCHIVE_ZIP_PATH));"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.size(ARCHIVE_ZIP_PATH) \u003e 0);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void zipFoldersAndFiles_validFileType_success() throws Exception {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e paths \u003d Collections.singletonList(Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"test.csv\"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        FileUtil.zipFoldersAndFiles(paths, FILE_UTIL_TEST_DIRECTORY, \".csv\");"},{"lineNumber":61,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(ARCHIVE_ZIP_PATH));"},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.size(ARCHIVE_ZIP_PATH) \u003e 0);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void unzip_validZipFile_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FileUtil.unzip(TEST_ZIP_PATH, UNZIPPED_DIRECTORY_PATH);"},{"lineNumber":68,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(Files.exists(UNZIPPED_DIRECTORY_PATH));"},{"lineNumber":69,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertTrue(TestUtil.compareDirectories(EXPECTED_UNZIPPED_DIRECTORY_PATH, UNZIPPED_DIRECTORY_PATH));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void unzip_invalidZipFile_fail() throws Exception {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Path invalidZipFile \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"test.csv\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        FileUtil.unzip(invalidZipFile, FILE_UTIL_TEST_DIRECTORY);"},{"lineNumber":76,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertFalse(Files.exists(Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"test\")));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @AfterEach"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void after() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Files.deleteIfExists(ARCHIVE_ZIP_PATH);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (Files.exists(UNZIPPED_DIRECTORY_PATH)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            FileUtil.deleteDirectory(UNZIPPED_DIRECTORY_PATH.toString());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":12,"-":74}},{"path":"src/test/java/reposense/util/InputBuilder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A utility class to help with building command line input."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     {@code String input \u003d new InputBuilder().addSinceDate(\"27/01/2017\").build();}"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class InputBuilder {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private StringBuilder input;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public InputBuilder() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        this.input \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@code input} generated from this {@link InputBuilder}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public String build() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return input.toString();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Add a help flag to the input."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public InputBuilder addHelp() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.HELP_FLAGS[0] + WHITESPACE);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Adds the config flag with the {@code path} as argument to the input."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @param path The config folder path."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public InputBuilder addConfig(Path path) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.CONFIG_FLAGS[0] + WHITESPACE + addQuotationMarksToPath(path) + WHITESPACE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Adds the repo flag with the {@code paths} as arguments to the input."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @param paths The repo paths."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public InputBuilder addRepos(String... paths) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.REPO_FLAGS[0] + WHITESPACE);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (String path : paths) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            input.append(addQuotationMarksToPath(path) + WHITESPACE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the view flag with the {@code path} as argument to the input."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param path The view folder path."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public InputBuilder addView(Path path) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.VIEW_FLAGS[0] + WHITESPACE + addQuotationMarksToPath(path) + WHITESPACE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Adds the view flag only to the input."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public InputBuilder addView() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.VIEW_FLAGS[0] + WHITESPACE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Adds the output flag with the {@code path} as argument to the input."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @param path The output folder path."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public InputBuilder addOutput(Path path) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.OUTPUT_FLAGS[0] + WHITESPACE + addQuotationMarksToPath(path) + WHITESPACE);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Adds the since flag with the {@code date} as argument to the input."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @param date The since date."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public InputBuilder addSinceDate(String date) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.SINCE_FLAGS[0] + WHITESPACE + date + WHITESPACE);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Adds the until flag with the {@code date} as argument to the input."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param date The until date."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public InputBuilder addUntilDate(String date) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.UNTIL_FLAGS[0] + WHITESPACE + date + WHITESPACE);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Adds the period flag with the {@code period} as argument to the input."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @param period The period."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public InputBuilder addPeriod(String period) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.PERIOD_FLAGS[0] + WHITESPACE + period + WHITESPACE);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Adds the format flag with the {@code formats} as argument to the input."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @param formats The formats that need to be evaluated."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public InputBuilder addFormats(String formats) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.FORMAT_FLAGS[0] + WHITESPACE + formats + WHITESPACE);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Adds the ignoreStandaloneConfig flag to the input."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public InputBuilder addIgnoreStandaloneConfig() {"},{"lineNumber":142,"author":{"gitId":"gok99"},"content":"        input.append(ArgsParser.IGNORE_CONFIG_FLAGS[0] + WHITESPACE);"},{"lineNumber":143,"author":{"gitId":"gok99"},"content":"        return this;"},{"lineNumber":144,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"gok99"},"content":""},{"lineNumber":146,"author":{"gitId":"gok99"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"gok99"},"content":"     * Adds the ignoreFilesizeLimit flag to the input."},{"lineNumber":148,"author":{"gitId":"gok99"},"content":"     * This method should only be called once in one build."},{"lineNumber":149,"author":{"gitId":"gok99"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"gok99"},"content":"    public InputBuilder addIgnoreFilesizeLimit() {"},{"lineNumber":151,"author":{"gitId":"gok99"},"content":"        input.append(ArgsParser.IGNORE_SIZELIMIT_FLAGS[0] + WHITESPACE);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Adds the timezone flag with the {@code zoneId} as argument to the input."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public InputBuilder addTimezone(String zoneId) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.TIMEZONE_FLAGS[0] + WHITESPACE + zoneId + WHITESPACE);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Adds the cloning threads flag with the {@code threads} as argument to the input."},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * @param threads The number of threads for cloning."},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public InputBuilder addNumCloningThreads(int threads) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.CLONING_THREADS_FLAG[0] + WHITESPACE + threads + WHITESPACE);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * Adds the analysis threads flag with the {@code threads} as argument to the input."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":178,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * @param threads The number of threads for analysis."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public InputBuilder addNumAnalysisThreads(int threads) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.ANALYSIS_THREADS_FLAG[0] + WHITESPACE + threads + WHITESPACE);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Adds the flag to enable shallow cloning."},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public InputBuilder addShallowCloning() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.SHALLOW_CLONING_FLAGS[0] + WHITESPACE);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * Adds the flag to enable find previous authors."},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * This method should only be called once in one build."},{"lineNumber":198,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public InputBuilder addFindPreviousAuthors() {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        input.append(ArgsParser.FIND_PREVIOUS_AUTHORS_FLAGS[0] + WHITESPACE);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * Adds {@code content} to the input."},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public InputBuilder add(String content) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        input.append(content + WHITESPACE);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Adds {@code num} of white spaces to the input."},{"lineNumber":214,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * @param num The number of white spaces to add."},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    public InputBuilder addWhiteSpace(int num) {"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c num; i++) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            input.append(WHITESPACE);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     * Clears all input and flags given."},{"lineNumber":226,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public InputBuilder reset() {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        input \u003d new StringBuilder();"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"    private static String addQuotationMarksToPath(String path) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return \u0027\"\u0027 + path + \u0027\"\u0027;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private static String addQuotationMarksToPath(Path path) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        return addQuotationMarksToPath(path.toString());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":1,"gok99":10,"-":229}},{"path":"src/test/java/reposense/util/StringsUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":11,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assumptions;"},{"lineNumber":12,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"import reposense.system.CommandRunner;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class StringsUtilTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path STRINGS_UTIL_TEST_DIRECTORY \u003d loadResource(FileUtilTest.class, \"StringsUtilTest\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void filterText_standardInput_success() throws Exception {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Path gitBlameStandardOutputFile \u003d"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                Paths.get(STRINGS_UTIL_TEST_DIRECTORY.toString(), \"standardBlameOutput.txt\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        List\u003cString\u003e lines \u003d Files.readAllLines(gitBlameStandardOutputFile);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        String text \u003d String.join(\"\\n\", lines);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        String expected \u003d \"a79711ed676fd3a27af2f466be6d5b48177580e0 4 4\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"                + \"author example\\n\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String filteredText \u003d StringsUtil.filterText(text, \"(^author .*)|(^[0-9a-f]{40} .*)\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expected, filteredText);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void replaceSpecialSymbols_noSpecialSymbols_noChange() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String noSpecialSymbolString \u003d \"Just A Normal String\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String convertedString \u003d StringsUtil.replaceSpecialSymbols(noSpecialSymbolString, \".\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(noSpecialSymbolString, convertedString);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void replaceSpecialSymbols_stringWithSpecialSymbolsToPeriod_success() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String noSpecialSymbolString \u003d \"($t^!ng W!th $pec!@l Symbols)\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String convertedString \u003d StringsUtil.replaceSpecialSymbols(noSpecialSymbolString, \".\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String expectedConvertedString \u003d \"..t..ng W.th .pec..l Symbols.\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedConvertedString, convertedString);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void removeTrailingBackslash_stringWithMultipleTrailingBackslash_success() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String multipleTrailingBackslashString \u003d \"abc\\\\cde\\\\\\\\\\\\\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String expectedString \u003d \"abc\\\\cde\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String actualString \u003d StringsUtil.removeTrailingBackslash(multipleTrailingBackslashString);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedString, actualString);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void removeTrailingBackslash_stringWithNoTrailingBackslash_noChange() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String multipleTrailingBackslashString \u003d \"abc\\\\cde\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String actualString \u003d StringsUtil.removeTrailingBackslash(multipleTrailingBackslashString);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(multipleTrailingBackslashString, actualString);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void removeTrailingBackslash_emptyString_noChange() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String emptyString \u003d \"\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String actualString \u003d StringsUtil.removeTrailingBackslash(emptyString);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(emptyString, actualString);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"    public void addQuotesForFilePath_specialBashCharacters_success() {"},{"lineNumber":79,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assumptions.assumeTrue(!SystemUtil.isWindows());"},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"        // The characters being tested against are taken from this post: https://unix.stackexchange.com/a/357932"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"        String specialBashSymbols \u003d \"!\\\"#$\u0026\u0027()*,;\u003c\u003d\u003e?\\\\[]^`{| }\";"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"        String result \u003d CommandRunner.runCommand(Paths.get(\"./\"),"},{"lineNumber":84,"author":{"gitId":"chan-j-d"},"content":"                \"echo \" + StringsUtil.addQuotesForFilePath(specialBashSymbols));"},{"lineNumber":85,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":86,"author":{"gitId":"chan-j-d"},"content":"        // CommandRunner\u0027s output ends with an LF character which should be removed."},{"lineNumber":87,"author":{"gitId":"chan-j-d"},"content":"        result \u003d result.substring(0, result.length() - 1);"},{"lineNumber":88,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":89,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(specialBashSymbols, result);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chan-j-d":13,"yhtMinceraft1010X":11,"-":67}},{"path":"src/test/java/reposense/util/TestRepoCloner.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chan-j-d"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":3,"author":{"gitId":"chan-j-d"},"content":"import static reposense.system.CommandRunner.runCommand;"},{"lineNumber":4,"author":{"gitId":"chan-j-d"},"content":"import static reposense.util.StringsUtil.addQuotesForFilePath;"},{"lineNumber":5,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":6,"author":{"gitId":"chan-j-d"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"chan-j-d"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"chan-j-d"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"chan-j-d"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"chan-j-d"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":12,"author":{"gitId":"chan-j-d"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":13,"author":{"gitId":"chan-j-d"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":14,"author":{"gitId":"chan-j-d"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":15,"author":{"gitId":"chan-j-d"},"content":"import reposense.system.LogsManager;"},{"lineNumber":16,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":17,"author":{"gitId":"chan-j-d"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"chan-j-d"},"content":" * Contains cloning utility methods that help facilitate writing of test cases."},{"lineNumber":19,"author":{"gitId":"chan-j-d"},"content":" */"},{"lineNumber":20,"author":{"gitId":"chan-j-d"},"content":"public class TestRepoCloner {"},{"lineNumber":21,"author":{"gitId":"chan-j-d"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(TestRepoCloner.class);"},{"lineNumber":22,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":23,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chan-j-d"},"content":"     * Clones repo specified in the {@code config} and updates it with the branch info."},{"lineNumber":25,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"chan-j-d"},"content":"     * @throws GitBranchException when an error occurs while attempting to branch."},{"lineNumber":27,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chan-j-d"},"content":"    public static void cloneAndBranch(RepoConfiguration config) throws GitBranchException {"},{"lineNumber":29,"author":{"gitId":"chan-j-d"},"content":"        String outputFolderName \u003d Paths.get(FileUtil.getRepoParentFolder(config).toString(),"},{"lineNumber":30,"author":{"gitId":"chan-j-d"},"content":"                config.getRepoName()).toString();"},{"lineNumber":31,"author":{"gitId":"chan-j-d"},"content":"        clone(config, Paths.get(\".\"), outputFolderName);"},{"lineNumber":32,"author":{"gitId":"chan-j-d"},"content":"        config.updateBranch();"},{"lineNumber":33,"author":{"gitId":"chan-j-d"},"content":"        GitCheckout.checkout(config.getRepoRoot(), config.getBranch());"},{"lineNumber":34,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":36,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"chan-j-d"},"content":"     * Clones repo specified in {@code config} from working directory at {@code rootPath} to {@code outputFolderName}."},{"lineNumber":38,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chan-j-d"},"content":"    public static void clone(RepoConfiguration config, Path rootPath, String outputFolderName) {"},{"lineNumber":40,"author":{"gitId":"chan-j-d"},"content":"        if (Files.exists(Paths.get(outputFolderName))) {"},{"lineNumber":41,"author":{"gitId":"chan-j-d"},"content":"            logger.info(\"Skipped cloning from \" + config.getLocation() + \" as it was cloned before.\");"},{"lineNumber":42,"author":{"gitId":"chan-j-d"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"chan-j-d"},"content":"            logger.info(\"Cloning from \" + config.getLocation() + \"...\");"},{"lineNumber":44,"author":{"gitId":"chan-j-d"},"content":"            String command \u003d getCloneCommand(config, outputFolderName);"},{"lineNumber":45,"author":{"gitId":"chan-j-d"},"content":"            runCommand(rootPath, command);"},{"lineNumber":46,"author":{"gitId":"chan-j-d"},"content":"            logger.info(\"Cloning completed!\");"},{"lineNumber":47,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":50,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"chan-j-d"},"content":"     * Clones a bare repo, with {@code rootPath} as working directory, specified in {@code config}"},{"lineNumber":52,"author":{"gitId":"chan-j-d"},"content":"     * into the folder {@code outputFolderName}."},{"lineNumber":53,"author":{"gitId":"chan-j-d"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"chan-j-d"},"content":"     * @throws IOException if it fails to delete or create a directory."},{"lineNumber":55,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"chan-j-d"},"content":"    public static void cloneBare(RepoConfiguration config, Path rootPath, String outputFolderName) throws IOException {"},{"lineNumber":57,"author":{"gitId":"chan-j-d"},"content":"        Path outputFolderPath \u003d Paths.get(outputFolderName);"},{"lineNumber":58,"author":{"gitId":"chan-j-d"},"content":"        if (Files.exists(outputFolderPath)) {"},{"lineNumber":59,"author":{"gitId":"chan-j-d"},"content":"            return;"},{"lineNumber":60,"author":{"gitId":"chan-j-d"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"chan-j-d"},"content":"        String command \u003d getCloneBareCommand(config, outputFolderName);"},{"lineNumber":62,"author":{"gitId":"chan-j-d"},"content":"        runCommand(rootPath, command);"},{"lineNumber":63,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":65,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"chan-j-d"},"content":"     * Constructs the command to clone a repo specified in the {@code config} into the folder {@code outputFolderName}."},{"lineNumber":67,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"chan-j-d"},"content":"    private static String getCloneCommand(RepoConfiguration config, String outputFolderName) {"},{"lineNumber":69,"author":{"gitId":"chan-j-d"},"content":"        return \"git clone \" + addQuotesForFilePath(config.getLocation().toString()) + \" \""},{"lineNumber":70,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(outputFolderName);"},{"lineNumber":71,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"chan-j-d"},"content":""},{"lineNumber":73,"author":{"gitId":"chan-j-d"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"chan-j-d"},"content":"     * Constructs the command to clone a bare repo specified in the {@code config}"},{"lineNumber":75,"author":{"gitId":"chan-j-d"},"content":"     * into the folder {@code outputFolderName}."},{"lineNumber":76,"author":{"gitId":"chan-j-d"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"chan-j-d"},"content":"    private static String getCloneBareCommand(RepoConfiguration config, String outputFolderName) {"},{"lineNumber":78,"author":{"gitId":"chan-j-d"},"content":"        String output \u003d \"git clone --bare \""},{"lineNumber":79,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(config.getLocation().toString()) + \" \""},{"lineNumber":80,"author":{"gitId":"chan-j-d"},"content":"                + addQuotesForFilePath(outputFolderName);"},{"lineNumber":81,"author":{"gitId":"chan-j-d"},"content":"        return output;"},{"lineNumber":82,"author":{"gitId":"chan-j-d"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"chan-j-d"},"content":"}"}],"authorContributionMap":{"chan-j-d":83}},{"path":"src/test/java/reposense/util/TestUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.net.URISyntaxException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.git.GitLog;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains testing related functionalities."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final int[] END_OF_DAY_TIME \u003d {23, 59, 59};"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final int[] START_OF_DAY_TIME \u003d {0, 0, 0};"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COMPARING_FILES \u003d \"Comparing files %s \u0026 %s\\n\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINE_CONTENT_DIFFERENT \u003d \"Content different at line number %d:\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"\u003c\u003c %s\\n\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"\u003e\u003e %s\\n\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_LINES_LENGTH_DIFFERENT \u003d \"The files\u0027 lines count do not match.\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String TAB_SPLITTER \u003d \"\\t\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String MOVED_FILE_INDICATION \u003d \"\u003d\u003e \";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final int STAT_FILE_PATH_INDEX \u003d 2;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns true if the contents of the files at {@code expected} and {@code actual} are the same."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Also prints out error message if the lines count are different,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * else prints out the first line of content difference (if any)."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static boolean compareFileContents(Path expected, Path actual) throws Exception {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return compareFileContents(expected, actual, 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns true if the contents of the files at {@code expected} and {@code actual} are the same."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Also prints out error message if the lines count are different,"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * else prints out maximum {@code maxTraceCounts} lines of content difference (if any)."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static boolean compareFileContents(Path expected, Path actual, int maxTraceCounts) throws Exception {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        int traceCounts \u003d 0;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        System.out.println(String.format(MESSAGE_COMPARING_FILES, expected, actual));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String[] expectedContent \u003d new String(Files.readAllBytes(expected))"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .replace(\"\\r\", \"\").split(\"\\n\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String[] actualContent \u003d new String(Files.readAllBytes(actual))"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .replace(\"\\r\", \"\").split(\"\\n\");"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c Math.min(expectedContent.length, actualContent.length); i++) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            if (!expectedContent[i].equals(actualContent[i])) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                System.out.println("},{"lineNumber":65,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_LINE_CONTENT_DIFFERENT, i + 1, expectedContent[i], actualContent[i]));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                if (++traceCounts \u003e\u003d maxTraceCounts) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (expectedContent.length !\u003d actualContent.length) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            System.out.println(MESSAGE_LINES_LENGTH_DIFFERENT);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        } else if (traceCounts \u003e\u003d maxTraceCounts) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Returns true if {@code expected} directory has all files with same content as {@code actual} directory."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static boolean compareDirectories(Path expected, Path actual) throws Exception {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e expectedPaths \u003d Files.walk(expected)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .sorted()"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e actualPaths \u003d Files.walk(actual)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .sorted()"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (expectedPaths.size() !\u003d actualPaths.size()) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedPaths.size(); i++) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            if (!(Files.isDirectory(expectedPaths.get(i)) || Files.isDirectory(actualPaths.get(i)))"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    \u0026\u0026 !TestUtil.compareFileContents(expectedPaths.get(i), actualPaths.get(i))) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Creates and returns a {@link LocalDateTime} object with the specified {@code year}, {@code month}, {@code day}"},{"lineNumber":106,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * and {@code time}."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getDate(int year, int month, int date, int[] time) {"},{"lineNumber":109,"author":{"gitId":"yhtMinceraft1010X"},"content":"        return LocalDateTime.of(year, month, date, time[0], time[1], time[2], 0);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Wrapper for {@code getDate} method to get since date with time 00:00:00"},{"lineNumber":114,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * from the parameters {@code year}, {@code month}, {@code date}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getSinceDate(int year, int month, int date) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return getDate(year, month, date, START_OF_DAY_TIME);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Wrapper for {@code getDate} method to get until date with time 23:59:59"},{"lineNumber":122,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * from the parameters {@code year}, {@code month}, {@code date}."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static LocalDateTime getUntilDate(int year, int month, int date) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return getDate(year, month, date, END_OF_DAY_TIME);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns a {@link ZoneId} object for the specified {@code timezone}."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static ZoneId getZoneId(String timezone) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return ZoneId.of(timezone);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Compares attributes of {@code expectedRepoConfig} and {@code actualRepoConfig}."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @throws AssertionError if any attributes fail equality check."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public static void compareRepoConfig(RepoConfiguration expectedRepoConfig, RepoConfiguration actualRepoConfig) {"},{"lineNumber":141,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedRepoConfig, actualRepoConfig);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedRepoConfig.getAuthorList().size(); i++) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            compareAuthor(expectedRepoConfig.getAuthorList().get(i), actualRepoConfig.getAuthorList().get(i));"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Compares attributes of {@code expectedAuthor} and {@code actualAuthor}, with exception of it\u0027s display name."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * The display name is not compared as it varies with object construction."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * It is a transient value and it is not needed for object matching."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @throws AssertionError if any attributes fail equality check."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public static void compareAuthor(Author expectedAuthor, Author actualAuthor) {"},{"lineNumber":157,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedAuthor.getGitId(), actualAuthor.getGitId());"},{"lineNumber":158,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedAuthor.getIgnoreGlobList(), actualAuthor.getIgnoreGlobList());"},{"lineNumber":159,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedAuthor.getAuthorAliases(), actualAuthor.getAuthorAliases());"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Returns true if the {@code expectedNumberCommits} is equal to the expected number of commits captured in"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * {@code gitLogResult}."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public static boolean compareNumberExpectedCommitsToGitLogLines(int expectedNumberCommits, String gitLogResult) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // if git log result is empty, then there are no commits"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (gitLogResult.isEmpty()) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            return expectedNumberCommits \u003d\u003d 0;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // (actualSplitGitLogResilt - 1) as the 1st token is always empty."},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return expectedNumberCommits \u003d\u003d (gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER).length - 1);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Returns true if the {@code expectedNumberFilesChanged} is equal to the actual number of files changed in"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * {@code gitLogResult}."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public static boolean compareNumberFilesChanged(int expectedNumberFilesChanged, String gitLogResult) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        // if git log result is empty, then there are no files changed"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        if (gitLogResult.isEmpty()) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            return expectedNumberFilesChanged \u003d\u003d 0;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        String[] changesLogged \u003d gitLogResult.split(GitLog.COMMIT_INFO_DELIMITER);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        HashSet\u003cString\u003e filesChanged \u003d new HashSet\u003c\u003e();"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // start from index 1 as index 0 is always empty."},{"lineNumber":189,"author":{"gitId":"-"},"content":"        for (int i \u003d 1; i \u003c changesLogged.length; i++) {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            filesChanged.addAll(getFilesChangedInCommit(changesLogged[i]));"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        return filesChanged.size() \u003d\u003d expectedNumberFilesChanged;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@link Set} of files changed in the commit {@code rawCommitInfo}."},{"lineNumber":197,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    private static Set\u003cString\u003e getFilesChangedInCommit(String rawCommitInfo) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e filesChanged \u003d new HashSet\u003c\u003e();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        String[] commitInfo \u003d rawCommitInfo.replaceAll(\"\\n+$\", \"\").split(\"\\n\");"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        int fileChangedNum \u003d Integer.parseInt(commitInfo[commitInfo.length - 1].trim().split(\" \")[0]);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        for (int fileNum \u003d 0; fileNum \u003c fileChangedNum; fileNum++) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            filesChanged.add(getFileChanged(commitInfo[commitInfo.length - 2 - fileNum]));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return filesChanged;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * Returns the file changed given a {@code rawFileChangedString}."},{"lineNumber":210,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    private static String getFileChanged(String rawFileChangedString) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        String fileChanged \u003d rawFileChangedString.split(TAB_SPLITTER)[STAT_FILE_PATH_INDEX].trim();"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        if (fileChanged.contains(MOVED_FILE_INDICATION)) {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            fileChanged \u003d fileChanged.substring(fileChanged.indexOf(MOVED_FILE_INDICATION)"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                    + MOVED_FILE_INDICATION.length());"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        return fileChanged;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"-"},"content":"     * Returns true if the test environment is on Windows OS."},{"lineNumber":222,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public static boolean isWindows() {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"yhtMinceraft1010X"},"content":"     * Returns the {@link Path} to a resource given by {@code pathToResource} string, using {@code classForLoading}."},{"lineNumber":229,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public static Path loadResource(Class\u003c?\u003e classForLoading, String pathToResource) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        ClassLoader classLoader \u003d classForLoading.getClassLoader();"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        URL url \u003d classLoader.getResource(pathToResource);"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Path path \u003d null;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            path \u003d Paths.get(url.toURI());"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        } catch (URISyntaxException e) {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            System.out.println(\"URL format does not follow required standard\");"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":20,"-":221}},{"path":"src/test/java/reposense/util/TestUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":10,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TestUtilTest {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String EXPECTED_FILE_CONTENTS \u003d \"1\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String DIRECTORY_NAME \u003d \"TestUtilTest\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String PATH_NO_SPECIAL_CHAR_TEST \u003d DIRECTORY_NAME + \"/test.txt\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String PATH_PLUS_TEST \u003d DIRECTORY_NAME + \"/plus+test.txt\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String PATH_SPACE_TEST \u003d DIRECTORY_NAME + \"/space test.txt\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String PATH_SYMBOLS_TEST \u003d DIRECTORY_NAME + \"/symbols +-,.;\u0027[]{}~`!@#$%^\u0026()_-+\u003dtest.txt\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void loadResource_validFileWithNoSpecialCharacters_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Path path \u003d loadResource(TestUtilTest.class, PATH_NO_SPECIAL_CHAR_TEST);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FileReader fileReader \u003d new FileReader(path.toString());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        String actualLine \u003d new Scanner(fileReader).nextLine();"},{"lineNumber":28,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(EXPECTED_FILE_CONTENTS, actualLine);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void loadResource_validFileWithSpace_success() throws Exception {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Path path \u003d loadResource(TestUtilTest.class, PATH_SPACE_TEST);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        FileReader fileReader \u003d new FileReader(path.toString());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String actualLine \u003d new Scanner(fileReader).nextLine();"},{"lineNumber":36,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(EXPECTED_FILE_CONTENTS, actualLine);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void loadResource_validFileWithPlus_success() throws Exception {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Path path \u003d loadResource(TestUtilTest.class, PATH_PLUS_TEST);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        FileReader fileReader \u003d new FileReader(path.toString());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String actualLine \u003d new Scanner(fileReader).nextLine();"},{"lineNumber":44,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(EXPECTED_FILE_CONTENTS, actualLine);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void loadResource_validFileWithManySymbols_success() throws Exception {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Path path \u003d loadResource(TestUtilTest.class, PATH_SYMBOLS_TEST);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        FileReader fileReader \u003d new FileReader(path.toString());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String actualLine \u003d new Scanner(fileReader).nextLine();"},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(EXPECTED_FILE_CONTENTS, actualLine);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":6,"-":48}},{"path":"src/test/java/reposense/util/TimeUtilTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"yhtMinceraft1010X"},"content":"import java.time.Month;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":8,"author":{"gitId":"yhtMinceraft1010X"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TimeUtilTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void extractDate_validDate_success() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String expectedDate \u003d \"20/05/2019\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        String actualDate \u003d TimeUtil.extractDate(expectedDate);"},{"lineNumber":15,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedDate, actualDate);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void extractDate_validDateAndTime_success() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        String originalDateAndTime \u003d \"20/05/2020 12:34:56\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        String expectedDate \u003d \"20/05/2020\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String actualDate \u003d TimeUtil.extractDate(originalDateAndTime);"},{"lineNumber":23,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedDate, actualDate);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void extractDate_validSingleDigitDate_success() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String expectedDate \u003d \"1/1/2022\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String actualDate \u003d TimeUtil.extractDate(expectedDate);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedDate, actualDate);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void extractDate_validSingleDigitDateAndTime_success() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String originalDateAndTime \u003d \"1/1/2022 12:34:56\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String expectedDate \u003d \"1/1/2022\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String actualDate \u003d TimeUtil.extractDate(originalDateAndTime);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedDate, actualDate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void extractDate_validSingleDigitDateAndString_success() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String originalDateAndString \u003d \"1/1/2022addedstring\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedDate \u003d \"1/1/2022\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String actualDate \u003d TimeUtil.extractDate(originalDateAndString);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedDate, actualDate);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseDate_validDateAndTime_success() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String originalDateAndTime \u003d \"20/05/2020 00:00:00\";"},{"lineNumber":52,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime expectedDate \u003d TestUtil.getSinceDate(2020, Month.MAY.getValue(), 20);"},{"lineNumber":53,"author":{"gitId":"yhtMinceraft1010X"},"content":"        LocalDateTime actualDate \u003d TimeUtil.parseDate(originalDateAndTime);"},{"lineNumber":54,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertEquals(expectedDate, actualDate);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parseDate_invalidDate_throwsParseException() {"},{"lineNumber":59,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e TimeUtil.parseDate(\"31/02/2020 00:00:00\"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"yhtMinceraft1010X"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"yhtMinceraft1010X"},"content":"    public void parseDate_invalidTime_throwsParseException() {"},{"lineNumber":64,"author":{"gitId":"yhtMinceraft1010X"},"content":"        Assertions.assertThrows(ParseException.class, () -\u003e TimeUtil.parseDate(\"20/05/2020 23:69:70\"));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yhtMinceraft1010X":15,"-":51}},{"path":"src/test/resources/StandaloneConfigTest/fileSizeLimit_config.json","fileType":"json","lines":[{"lineNumber":1,"author":{"gitId":"gok99"},"content":"{"},{"lineNumber":2,"author":{"gitId":"gok99"},"content":"  \"ignoreGlobList\": [\"collated**\"],"},{"lineNumber":3,"author":{"gitId":"gok99"},"content":"  \"ignoreCommitsList\": [\"12345abc\", \"67890def\"],"},{"lineNumber":4,"author":{"gitId":"gok99"},"content":"  \"fileSizeLimit\": 100000,"},{"lineNumber":5,"author":{"gitId":"gok99"},"content":"  \"authors\":"},{"lineNumber":6,"author":{"gitId":"gok99"},"content":"  ["},{"lineNumber":7,"author":{"gitId":"gok99"},"content":"    {"},{"lineNumber":8,"author":{"gitId":"gok99"},"content":"      \"githubId\": \"lithiumlkid\","},{"lineNumber":9,"author":{"gitId":"gok99"},"content":"      \"displayName\": \"Ahm\","},{"lineNumber":10,"author":{"gitId":"gok99"},"content":"      \"authorNames\": [\"Ahmad Syafiq\"],"},{"lineNumber":11,"author":{"gitId":"gok99"},"content":"      \"ignoreGlobList\": [\"*.aa1\", \"**.aa2\", \"**.java\"]"},{"lineNumber":12,"author":{"gitId":"gok99"},"content":"    },"},{"lineNumber":13,"author":{"gitId":"gok99"},"content":"    {"},{"lineNumber":14,"author":{"gitId":"gok99"},"content":"      \"githubId\": \"codeeong\","},{"lineNumber":15,"author":{"gitId":"gok99"},"content":"      \"displayName\": \"Cod\","},{"lineNumber":16,"author":{"gitId":"gok99"},"content":"      \"authorNames\": [\"Codee\"],"},{"lineNumber":17,"author":{"gitId":"gok99"},"content":"      \"ignoreGlobList\": [\"**[!(.md)]\"]"},{"lineNumber":18,"author":{"gitId":"gok99"},"content":"    },"},{"lineNumber":19,"author":{"gitId":"gok99"},"content":"    {"},{"lineNumber":20,"author":{"gitId":"gok99"},"content":"      \"githubId\": \"jordancjq\","},{"lineNumber":21,"author":{"gitId":"gok99"},"content":"      \"displayName\": \"Jor\","},{"lineNumber":22,"author":{"gitId":"gok99"},"content":"      \"authorNames\": [\"Jordan Chong\"],"},{"lineNumber":23,"author":{"gitId":"gok99"},"content":"      \"ignoreGlobList\": [\"\"]"},{"lineNumber":24,"author":{"gitId":"gok99"},"content":"    },"},{"lineNumber":25,"author":{"gitId":"gok99"},"content":"    {"},{"lineNumber":26,"author":{"gitId":"gok99"},"content":"      \"githubId\": \"lohtianwei\","},{"lineNumber":27,"author":{"gitId":"gok99"},"content":"      \"displayName\": \"Loh\","},{"lineNumber":28,"author":{"gitId":"gok99"},"content":"      \"authorNames\": [\"Tianwei\"]"},{"lineNumber":29,"author":{"gitId":"gok99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"gok99"},"content":"  ]"},{"lineNumber":31,"author":{"gitId":"gok99"},"content":"}"}],"authorContributionMap":{"gok99":31}}]
